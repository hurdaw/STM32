
Giua_ky.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005d28  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001110  08005ec8  08005ec8  00015ec8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006fd8  08006fd8  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08006fd8  08006fd8  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006fd8  08006fd8  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006fd8  08006fd8  00016fd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006fdc  08006fdc  00016fdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08006fe0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001468  20000078  08007058  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200014e0  08007058  000214e0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .comment      000000be  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0003ade9  00000000  00000000  00020166  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003293  00000000  00000000  0005af4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001230  00000000  00000000  0005e1e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000002dd  00000000  00000000  0005f418  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001c4df  00000000  00000000  0005f6f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000c53a  00000000  00000000  0007bbd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00057a33  00000000  00000000  0008810e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005174  00000000  00000000  000dfb44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000045  00000000  00000000  000e4cb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_ranges 00000cb0  00000000  00000000  000e4cfd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000078 	.word	0x20000078
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005eb0 	.word	0x08005eb0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000007c 	.word	0x2000007c
 80001dc:	08005eb0 	.word	0x08005eb0

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_dmul>:
 8000280:	b570      	push	{r4, r5, r6, lr}
 8000282:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000286:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800028a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800028e:	bf1d      	ittte	ne
 8000290:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000294:	ea94 0f0c 	teqne	r4, ip
 8000298:	ea95 0f0c 	teqne	r5, ip
 800029c:	f000 f8de 	bleq	800045c <__aeabi_dmul+0x1dc>
 80002a0:	442c      	add	r4, r5
 80002a2:	ea81 0603 	eor.w	r6, r1, r3
 80002a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002b2:	bf18      	it	ne
 80002b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002c0:	d038      	beq.n	8000334 <__aeabi_dmul+0xb4>
 80002c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002c6:	f04f 0500 	mov.w	r5, #0
 80002ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002d6:	f04f 0600 	mov.w	r6, #0
 80002da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002de:	f09c 0f00 	teq	ip, #0
 80002e2:	bf18      	it	ne
 80002e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80002ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80002f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80002f4:	d204      	bcs.n	8000300 <__aeabi_dmul+0x80>
 80002f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002fa:	416d      	adcs	r5, r5
 80002fc:	eb46 0606 	adc.w	r6, r6, r6
 8000300:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000304:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000308:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800030c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000310:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000314:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000318:	bf88      	it	hi
 800031a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800031e:	d81e      	bhi.n	800035e <__aeabi_dmul+0xde>
 8000320:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	bd70      	pop	{r4, r5, r6, pc}
 8000334:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000338:	ea46 0101 	orr.w	r1, r6, r1
 800033c:	ea40 0002 	orr.w	r0, r0, r2
 8000340:	ea81 0103 	eor.w	r1, r1, r3
 8000344:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000348:	bfc2      	ittt	gt
 800034a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800034e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000352:	bd70      	popgt	{r4, r5, r6, pc}
 8000354:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000358:	f04f 0e00 	mov.w	lr, #0
 800035c:	3c01      	subs	r4, #1
 800035e:	f300 80ab 	bgt.w	80004b8 <__aeabi_dmul+0x238>
 8000362:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000366:	bfde      	ittt	le
 8000368:	2000      	movle	r0, #0
 800036a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800036e:	bd70      	pople	{r4, r5, r6, pc}
 8000370:	f1c4 0400 	rsb	r4, r4, #0
 8000374:	3c20      	subs	r4, #32
 8000376:	da35      	bge.n	80003e4 <__aeabi_dmul+0x164>
 8000378:	340c      	adds	r4, #12
 800037a:	dc1b      	bgt.n	80003b4 <__aeabi_dmul+0x134>
 800037c:	f104 0414 	add.w	r4, r4, #20
 8000380:	f1c4 0520 	rsb	r5, r4, #32
 8000384:	fa00 f305 	lsl.w	r3, r0, r5
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f205 	lsl.w	r2, r1, r5
 8000390:	ea40 0002 	orr.w	r0, r0, r2
 8000394:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000398:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800039c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003a0:	fa21 f604 	lsr.w	r6, r1, r4
 80003a4:	eb42 0106 	adc.w	r1, r2, r6
 80003a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ac:	bf08      	it	eq
 80003ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003b2:	bd70      	pop	{r4, r5, r6, pc}
 80003b4:	f1c4 040c 	rsb	r4, r4, #12
 80003b8:	f1c4 0520 	rsb	r5, r4, #32
 80003bc:	fa00 f304 	lsl.w	r3, r0, r4
 80003c0:	fa20 f005 	lsr.w	r0, r0, r5
 80003c4:	fa01 f204 	lsl.w	r2, r1, r4
 80003c8:	ea40 0002 	orr.w	r0, r0, r2
 80003cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003d4:	f141 0100 	adc.w	r1, r1, #0
 80003d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003dc:	bf08      	it	eq
 80003de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003e2:	bd70      	pop	{r4, r5, r6, pc}
 80003e4:	f1c4 0520 	rsb	r5, r4, #32
 80003e8:	fa00 f205 	lsl.w	r2, r0, r5
 80003ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80003f0:	fa20 f304 	lsr.w	r3, r0, r4
 80003f4:	fa01 f205 	lsl.w	r2, r1, r5
 80003f8:	ea43 0302 	orr.w	r3, r3, r2
 80003fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000404:	fa21 f204 	lsr.w	r2, r1, r4
 8000408:	ea20 0002 	bic.w	r0, r0, r2
 800040c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000410:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000414:	bf08      	it	eq
 8000416:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800041a:	bd70      	pop	{r4, r5, r6, pc}
 800041c:	f094 0f00 	teq	r4, #0
 8000420:	d10f      	bne.n	8000442 <__aeabi_dmul+0x1c2>
 8000422:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000426:	0040      	lsls	r0, r0, #1
 8000428:	eb41 0101 	adc.w	r1, r1, r1
 800042c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000430:	bf08      	it	eq
 8000432:	3c01      	subeq	r4, #1
 8000434:	d0f7      	beq.n	8000426 <__aeabi_dmul+0x1a6>
 8000436:	ea41 0106 	orr.w	r1, r1, r6
 800043a:	f095 0f00 	teq	r5, #0
 800043e:	bf18      	it	ne
 8000440:	4770      	bxne	lr
 8000442:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000446:	0052      	lsls	r2, r2, #1
 8000448:	eb43 0303 	adc.w	r3, r3, r3
 800044c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000450:	bf08      	it	eq
 8000452:	3d01      	subeq	r5, #1
 8000454:	d0f7      	beq.n	8000446 <__aeabi_dmul+0x1c6>
 8000456:	ea43 0306 	orr.w	r3, r3, r6
 800045a:	4770      	bx	lr
 800045c:	ea94 0f0c 	teq	r4, ip
 8000460:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000464:	bf18      	it	ne
 8000466:	ea95 0f0c 	teqne	r5, ip
 800046a:	d00c      	beq.n	8000486 <__aeabi_dmul+0x206>
 800046c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000470:	bf18      	it	ne
 8000472:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000476:	d1d1      	bne.n	800041c <__aeabi_dmul+0x19c>
 8000478:	ea81 0103 	eor.w	r1, r1, r3
 800047c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000480:	f04f 0000 	mov.w	r0, #0
 8000484:	bd70      	pop	{r4, r5, r6, pc}
 8000486:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800048a:	bf06      	itte	eq
 800048c:	4610      	moveq	r0, r2
 800048e:	4619      	moveq	r1, r3
 8000490:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000494:	d019      	beq.n	80004ca <__aeabi_dmul+0x24a>
 8000496:	ea94 0f0c 	teq	r4, ip
 800049a:	d102      	bne.n	80004a2 <__aeabi_dmul+0x222>
 800049c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004a0:	d113      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004a2:	ea95 0f0c 	teq	r5, ip
 80004a6:	d105      	bne.n	80004b4 <__aeabi_dmul+0x234>
 80004a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004ac:	bf1c      	itt	ne
 80004ae:	4610      	movne	r0, r2
 80004b0:	4619      	movne	r1, r3
 80004b2:	d10a      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004b4:	ea81 0103 	eor.w	r1, r1, r3
 80004b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd70      	pop	{r4, r5, r6, pc}
 80004ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004d2:	bd70      	pop	{r4, r5, r6, pc}

080004d4 <__aeabi_drsub>:
 80004d4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e002      	b.n	80004e0 <__adddf3>
 80004da:	bf00      	nop

080004dc <__aeabi_dsub>:
 80004dc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080004e0 <__adddf3>:
 80004e0:	b530      	push	{r4, r5, lr}
 80004e2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004e6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004ea:	ea94 0f05 	teq	r4, r5
 80004ee:	bf08      	it	eq
 80004f0:	ea90 0f02 	teqeq	r0, r2
 80004f4:	bf1f      	itttt	ne
 80004f6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004fa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004fe:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000502:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000506:	f000 80e2 	beq.w	80006ce <__adddf3+0x1ee>
 800050a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800050e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000512:	bfb8      	it	lt
 8000514:	426d      	neglt	r5, r5
 8000516:	dd0c      	ble.n	8000532 <__adddf3+0x52>
 8000518:	442c      	add	r4, r5
 800051a:	ea80 0202 	eor.w	r2, r0, r2
 800051e:	ea81 0303 	eor.w	r3, r1, r3
 8000522:	ea82 0000 	eor.w	r0, r2, r0
 8000526:	ea83 0101 	eor.w	r1, r3, r1
 800052a:	ea80 0202 	eor.w	r2, r0, r2
 800052e:	ea81 0303 	eor.w	r3, r1, r3
 8000532:	2d36      	cmp	r5, #54	; 0x36
 8000534:	bf88      	it	hi
 8000536:	bd30      	pophi	{r4, r5, pc}
 8000538:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800053c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000540:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000544:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000548:	d002      	beq.n	8000550 <__adddf3+0x70>
 800054a:	4240      	negs	r0, r0
 800054c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000550:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000554:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000558:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800055c:	d002      	beq.n	8000564 <__adddf3+0x84>
 800055e:	4252      	negs	r2, r2
 8000560:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000564:	ea94 0f05 	teq	r4, r5
 8000568:	f000 80a7 	beq.w	80006ba <__adddf3+0x1da>
 800056c:	f1a4 0401 	sub.w	r4, r4, #1
 8000570:	f1d5 0e20 	rsbs	lr, r5, #32
 8000574:	db0d      	blt.n	8000592 <__adddf3+0xb2>
 8000576:	fa02 fc0e 	lsl.w	ip, r2, lr
 800057a:	fa22 f205 	lsr.w	r2, r2, r5
 800057e:	1880      	adds	r0, r0, r2
 8000580:	f141 0100 	adc.w	r1, r1, #0
 8000584:	fa03 f20e 	lsl.w	r2, r3, lr
 8000588:	1880      	adds	r0, r0, r2
 800058a:	fa43 f305 	asr.w	r3, r3, r5
 800058e:	4159      	adcs	r1, r3
 8000590:	e00e      	b.n	80005b0 <__adddf3+0xd0>
 8000592:	f1a5 0520 	sub.w	r5, r5, #32
 8000596:	f10e 0e20 	add.w	lr, lr, #32
 800059a:	2a01      	cmp	r2, #1
 800059c:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005a0:	bf28      	it	cs
 80005a2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005a6:	fa43 f305 	asr.w	r3, r3, r5
 80005aa:	18c0      	adds	r0, r0, r3
 80005ac:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	d507      	bpl.n	80005c6 <__adddf3+0xe6>
 80005b6:	f04f 0e00 	mov.w	lr, #0
 80005ba:	f1dc 0c00 	rsbs	ip, ip, #0
 80005be:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005c2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005c6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005ca:	d31b      	bcc.n	8000604 <__adddf3+0x124>
 80005cc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005d0:	d30c      	bcc.n	80005ec <__adddf3+0x10c>
 80005d2:	0849      	lsrs	r1, r1, #1
 80005d4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005d8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005dc:	f104 0401 	add.w	r4, r4, #1
 80005e0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005e4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80005e8:	f080 809a 	bcs.w	8000720 <__adddf3+0x240>
 80005ec:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80005f0:	bf08      	it	eq
 80005f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005f6:	f150 0000 	adcs.w	r0, r0, #0
 80005fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fe:	ea41 0105 	orr.w	r1, r1, r5
 8000602:	bd30      	pop	{r4, r5, pc}
 8000604:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000608:	4140      	adcs	r0, r0
 800060a:	eb41 0101 	adc.w	r1, r1, r1
 800060e:	3c01      	subs	r4, #1
 8000610:	bf28      	it	cs
 8000612:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000616:	d2e9      	bcs.n	80005ec <__adddf3+0x10c>
 8000618:	f091 0f00 	teq	r1, #0
 800061c:	bf04      	itt	eq
 800061e:	4601      	moveq	r1, r0
 8000620:	2000      	moveq	r0, #0
 8000622:	fab1 f381 	clz	r3, r1
 8000626:	bf08      	it	eq
 8000628:	3320      	addeq	r3, #32
 800062a:	f1a3 030b 	sub.w	r3, r3, #11
 800062e:	f1b3 0220 	subs.w	r2, r3, #32
 8000632:	da0c      	bge.n	800064e <__adddf3+0x16e>
 8000634:	320c      	adds	r2, #12
 8000636:	dd08      	ble.n	800064a <__adddf3+0x16a>
 8000638:	f102 0c14 	add.w	ip, r2, #20
 800063c:	f1c2 020c 	rsb	r2, r2, #12
 8000640:	fa01 f00c 	lsl.w	r0, r1, ip
 8000644:	fa21 f102 	lsr.w	r1, r1, r2
 8000648:	e00c      	b.n	8000664 <__adddf3+0x184>
 800064a:	f102 0214 	add.w	r2, r2, #20
 800064e:	bfd8      	it	le
 8000650:	f1c2 0c20 	rsble	ip, r2, #32
 8000654:	fa01 f102 	lsl.w	r1, r1, r2
 8000658:	fa20 fc0c 	lsr.w	ip, r0, ip
 800065c:	bfdc      	itt	le
 800065e:	ea41 010c 	orrle.w	r1, r1, ip
 8000662:	4090      	lslle	r0, r2
 8000664:	1ae4      	subs	r4, r4, r3
 8000666:	bfa2      	ittt	ge
 8000668:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800066c:	4329      	orrge	r1, r5
 800066e:	bd30      	popge	{r4, r5, pc}
 8000670:	ea6f 0404 	mvn.w	r4, r4
 8000674:	3c1f      	subs	r4, #31
 8000676:	da1c      	bge.n	80006b2 <__adddf3+0x1d2>
 8000678:	340c      	adds	r4, #12
 800067a:	dc0e      	bgt.n	800069a <__adddf3+0x1ba>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0220 	rsb	r2, r4, #32
 8000684:	fa20 f004 	lsr.w	r0, r0, r4
 8000688:	fa01 f302 	lsl.w	r3, r1, r2
 800068c:	ea40 0003 	orr.w	r0, r0, r3
 8000690:	fa21 f304 	lsr.w	r3, r1, r4
 8000694:	ea45 0103 	orr.w	r1, r5, r3
 8000698:	bd30      	pop	{r4, r5, pc}
 800069a:	f1c4 040c 	rsb	r4, r4, #12
 800069e:	f1c4 0220 	rsb	r2, r4, #32
 80006a2:	fa20 f002 	lsr.w	r0, r0, r2
 80006a6:	fa01 f304 	lsl.w	r3, r1, r4
 80006aa:	ea40 0003 	orr.w	r0, r0, r3
 80006ae:	4629      	mov	r1, r5
 80006b0:	bd30      	pop	{r4, r5, pc}
 80006b2:	fa21 f004 	lsr.w	r0, r1, r4
 80006b6:	4629      	mov	r1, r5
 80006b8:	bd30      	pop	{r4, r5, pc}
 80006ba:	f094 0f00 	teq	r4, #0
 80006be:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006c2:	bf06      	itte	eq
 80006c4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006c8:	3401      	addeq	r4, #1
 80006ca:	3d01      	subne	r5, #1
 80006cc:	e74e      	b.n	800056c <__adddf3+0x8c>
 80006ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006d2:	bf18      	it	ne
 80006d4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006d8:	d029      	beq.n	800072e <__adddf3+0x24e>
 80006da:	ea94 0f05 	teq	r4, r5
 80006de:	bf08      	it	eq
 80006e0:	ea90 0f02 	teqeq	r0, r2
 80006e4:	d005      	beq.n	80006f2 <__adddf3+0x212>
 80006e6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006ea:	bf04      	itt	eq
 80006ec:	4619      	moveq	r1, r3
 80006ee:	4610      	moveq	r0, r2
 80006f0:	bd30      	pop	{r4, r5, pc}
 80006f2:	ea91 0f03 	teq	r1, r3
 80006f6:	bf1e      	ittt	ne
 80006f8:	2100      	movne	r1, #0
 80006fa:	2000      	movne	r0, #0
 80006fc:	bd30      	popne	{r4, r5, pc}
 80006fe:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000702:	d105      	bne.n	8000710 <__adddf3+0x230>
 8000704:	0040      	lsls	r0, r0, #1
 8000706:	4149      	adcs	r1, r1
 8000708:	bf28      	it	cs
 800070a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800070e:	bd30      	pop	{r4, r5, pc}
 8000710:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000714:	bf3c      	itt	cc
 8000716:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800071a:	bd30      	popcc	{r4, r5, pc}
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000720:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000724:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000728:	f04f 0000 	mov.w	r0, #0
 800072c:	bd30      	pop	{r4, r5, pc}
 800072e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000732:	bf1a      	itte	ne
 8000734:	4619      	movne	r1, r3
 8000736:	4610      	movne	r0, r2
 8000738:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800073c:	bf1c      	itt	ne
 800073e:	460b      	movne	r3, r1
 8000740:	4602      	movne	r2, r0
 8000742:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000746:	bf06      	itte	eq
 8000748:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800074c:	ea91 0f03 	teqeq	r1, r3
 8000750:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000754:	bd30      	pop	{r4, r5, pc}
 8000756:	bf00      	nop

08000758 <__aeabi_ui2d>:
 8000758:	f090 0f00 	teq	r0, #0
 800075c:	bf04      	itt	eq
 800075e:	2100      	moveq	r1, #0
 8000760:	4770      	bxeq	lr
 8000762:	b530      	push	{r4, r5, lr}
 8000764:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000768:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800076c:	f04f 0500 	mov.w	r5, #0
 8000770:	f04f 0100 	mov.w	r1, #0
 8000774:	e750      	b.n	8000618 <__adddf3+0x138>
 8000776:	bf00      	nop

08000778 <__aeabi_i2d>:
 8000778:	f090 0f00 	teq	r0, #0
 800077c:	bf04      	itt	eq
 800077e:	2100      	moveq	r1, #0
 8000780:	4770      	bxeq	lr
 8000782:	b530      	push	{r4, r5, lr}
 8000784:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000788:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800078c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000790:	bf48      	it	mi
 8000792:	4240      	negmi	r0, r0
 8000794:	f04f 0100 	mov.w	r1, #0
 8000798:	e73e      	b.n	8000618 <__adddf3+0x138>
 800079a:	bf00      	nop

0800079c <__aeabi_f2d>:
 800079c:	0042      	lsls	r2, r0, #1
 800079e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007a2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007a6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007aa:	bf1f      	itttt	ne
 80007ac:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007b0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007b4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007b8:	4770      	bxne	lr
 80007ba:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007be:	bf08      	it	eq
 80007c0:	4770      	bxeq	lr
 80007c2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007c6:	bf04      	itt	eq
 80007c8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007cc:	4770      	bxeq	lr
 80007ce:	b530      	push	{r4, r5, lr}
 80007d0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007d4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	e71c      	b.n	8000618 <__adddf3+0x138>
 80007de:	bf00      	nop

080007e0 <__aeabi_ul2d>:
 80007e0:	ea50 0201 	orrs.w	r2, r0, r1
 80007e4:	bf08      	it	eq
 80007e6:	4770      	bxeq	lr
 80007e8:	b530      	push	{r4, r5, lr}
 80007ea:	f04f 0500 	mov.w	r5, #0
 80007ee:	e00a      	b.n	8000806 <__aeabi_l2d+0x16>

080007f0 <__aeabi_l2d>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	b530      	push	{r4, r5, lr}
 80007fa:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80007fe:	d502      	bpl.n	8000806 <__aeabi_l2d+0x16>
 8000800:	4240      	negs	r0, r0
 8000802:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000806:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800080a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800080e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000812:	f43f aed8 	beq.w	80005c6 <__adddf3+0xe6>
 8000816:	f04f 0203 	mov.w	r2, #3
 800081a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800081e:	bf18      	it	ne
 8000820:	3203      	addne	r2, #3
 8000822:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000826:	bf18      	it	ne
 8000828:	3203      	addne	r2, #3
 800082a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800082e:	f1c2 0320 	rsb	r3, r2, #32
 8000832:	fa00 fc03 	lsl.w	ip, r0, r3
 8000836:	fa20 f002 	lsr.w	r0, r0, r2
 800083a:	fa01 fe03 	lsl.w	lr, r1, r3
 800083e:	ea40 000e 	orr.w	r0, r0, lr
 8000842:	fa21 f102 	lsr.w	r1, r1, r2
 8000846:	4414      	add	r4, r2
 8000848:	e6bd      	b.n	80005c6 <__adddf3+0xe6>
 800084a:	bf00      	nop

0800084c <__aeabi_d2f>:
 800084c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000850:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000854:	bf24      	itt	cs
 8000856:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800085a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800085e:	d90d      	bls.n	800087c <__aeabi_d2f+0x30>
 8000860:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000864:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000868:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800086c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000870:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000874:	bf08      	it	eq
 8000876:	f020 0001 	biceq.w	r0, r0, #1
 800087a:	4770      	bx	lr
 800087c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000880:	d121      	bne.n	80008c6 <__aeabi_d2f+0x7a>
 8000882:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000886:	bfbc      	itt	lt
 8000888:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800088c:	4770      	bxlt	lr
 800088e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000892:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000896:	f1c2 0218 	rsb	r2, r2, #24
 800089a:	f1c2 0c20 	rsb	ip, r2, #32
 800089e:	fa10 f30c 	lsls.w	r3, r0, ip
 80008a2:	fa20 f002 	lsr.w	r0, r0, r2
 80008a6:	bf18      	it	ne
 80008a8:	f040 0001 	orrne.w	r0, r0, #1
 80008ac:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80008b0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80008b4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80008b8:	ea40 000c 	orr.w	r0, r0, ip
 80008bc:	fa23 f302 	lsr.w	r3, r3, r2
 80008c0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80008c4:	e7cc      	b.n	8000860 <__aeabi_d2f+0x14>
 80008c6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80008ca:	d107      	bne.n	80008dc <__aeabi_d2f+0x90>
 80008cc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80008d0:	bf1e      	ittt	ne
 80008d2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80008d6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80008da:	4770      	bxne	lr
 80008dc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80008e0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80008e4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80008e8:	4770      	bx	lr
 80008ea:	bf00      	nop

080008ec <KalmanFilterInit>:
/******************************************************************************/
/*                            EXPORTED FUNCTIONS                              */
/******************************************************************************/

void KalmanFilterInit(float mea_e, float est_e, float q)
{
 80008ec:	b480      	push	{r7}
 80008ee:	b085      	sub	sp, #20
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	ed87 0a03 	vstr	s0, [r7, #12]
 80008f6:	edc7 0a02 	vstr	s1, [r7, #8]
 80008fa:	ed87 1a01 	vstr	s2, [r7, #4]
  _err_measure=mea_e;
 80008fe:	4a07      	ldr	r2, [pc, #28]	; (800091c <KalmanFilterInit+0x30>)
 8000900:	68fb      	ldr	r3, [r7, #12]
 8000902:	6013      	str	r3, [r2, #0]
  _err_estimate=est_e;
 8000904:	4a06      	ldr	r2, [pc, #24]	; (8000920 <KalmanFilterInit+0x34>)
 8000906:	68bb      	ldr	r3, [r7, #8]
 8000908:	6013      	str	r3, [r2, #0]
  _q = q;
 800090a:	4a06      	ldr	r2, [pc, #24]	; (8000924 <KalmanFilterInit+0x38>)
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	6013      	str	r3, [r2, #0]
}
 8000910:	bf00      	nop
 8000912:	3714      	adds	r7, #20
 8000914:	46bd      	mov	sp, r7
 8000916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091a:	4770      	bx	lr
 800091c:	20000094 	.word	0x20000094
 8000920:	20000098 	.word	0x20000098
 8000924:	2000009c 	.word	0x2000009c

08000928 <KalmanFilter_updateEstimate>:

float KalmanFilter_updateEstimate(float mea)
{
 8000928:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800092c:	b082      	sub	sp, #8
 800092e:	af00      	add	r7, sp, #0
 8000930:	ed87 0a01 	vstr	s0, [r7, #4]
  _kalman_gain = _err_estimate/(_err_estimate + _err_measure);
 8000934:	4b3d      	ldr	r3, [pc, #244]	; (8000a2c <KalmanFilter_updateEstimate+0x104>)
 8000936:	edd3 6a00 	vldr	s13, [r3]
 800093a:	4b3c      	ldr	r3, [pc, #240]	; (8000a2c <KalmanFilter_updateEstimate+0x104>)
 800093c:	ed93 7a00 	vldr	s14, [r3]
 8000940:	4b3b      	ldr	r3, [pc, #236]	; (8000a30 <KalmanFilter_updateEstimate+0x108>)
 8000942:	edd3 7a00 	vldr	s15, [r3]
 8000946:	ee37 7a27 	vadd.f32	s14, s14, s15
 800094a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800094e:	4b39      	ldr	r3, [pc, #228]	; (8000a34 <KalmanFilter_updateEstimate+0x10c>)
 8000950:	edc3 7a00 	vstr	s15, [r3]
  _current_estimate = _last_estimate + _kalman_gain * (mea - _last_estimate);
 8000954:	4b38      	ldr	r3, [pc, #224]	; (8000a38 <KalmanFilter_updateEstimate+0x110>)
 8000956:	edd3 7a00 	vldr	s15, [r3]
 800095a:	ed97 7a01 	vldr	s14, [r7, #4]
 800095e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000962:	4b34      	ldr	r3, [pc, #208]	; (8000a34 <KalmanFilter_updateEstimate+0x10c>)
 8000964:	edd3 7a00 	vldr	s15, [r3]
 8000968:	ee27 7a27 	vmul.f32	s14, s14, s15
 800096c:	4b32      	ldr	r3, [pc, #200]	; (8000a38 <KalmanFilter_updateEstimate+0x110>)
 800096e:	edd3 7a00 	vldr	s15, [r3]
 8000972:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000976:	4b31      	ldr	r3, [pc, #196]	; (8000a3c <KalmanFilter_updateEstimate+0x114>)
 8000978:	edc3 7a00 	vstr	s15, [r3]
  _err_estimate =  (1.0 - _kalman_gain)*_err_estimate + fabs(_last_estimate-_current_estimate)*_q;
 800097c:	4b2d      	ldr	r3, [pc, #180]	; (8000a34 <KalmanFilter_updateEstimate+0x10c>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	4618      	mov	r0, r3
 8000982:	f7ff ff0b 	bl	800079c <__aeabi_f2d>
 8000986:	4602      	mov	r2, r0
 8000988:	460b      	mov	r3, r1
 800098a:	f04f 0000 	mov.w	r0, #0
 800098e:	492c      	ldr	r1, [pc, #176]	; (8000a40 <KalmanFilter_updateEstimate+0x118>)
 8000990:	f7ff fda4 	bl	80004dc <__aeabi_dsub>
 8000994:	4602      	mov	r2, r0
 8000996:	460b      	mov	r3, r1
 8000998:	4614      	mov	r4, r2
 800099a:	461d      	mov	r5, r3
 800099c:	4b23      	ldr	r3, [pc, #140]	; (8000a2c <KalmanFilter_updateEstimate+0x104>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	4618      	mov	r0, r3
 80009a2:	f7ff fefb 	bl	800079c <__aeabi_f2d>
 80009a6:	4602      	mov	r2, r0
 80009a8:	460b      	mov	r3, r1
 80009aa:	4620      	mov	r0, r4
 80009ac:	4629      	mov	r1, r5
 80009ae:	f7ff fc67 	bl	8000280 <__aeabi_dmul>
 80009b2:	4602      	mov	r2, r0
 80009b4:	460b      	mov	r3, r1
 80009b6:	4690      	mov	r8, r2
 80009b8:	4699      	mov	r9, r3
 80009ba:	4b1f      	ldr	r3, [pc, #124]	; (8000a38 <KalmanFilter_updateEstimate+0x110>)
 80009bc:	ed93 7a00 	vldr	s14, [r3]
 80009c0:	4b1e      	ldr	r3, [pc, #120]	; (8000a3c <KalmanFilter_updateEstimate+0x114>)
 80009c2:	edd3 7a00 	vldr	s15, [r3]
 80009c6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80009ca:	eef0 7ae7 	vabs.f32	s15, s15
 80009ce:	ee17 0a90 	vmov	r0, s15
 80009d2:	f7ff fee3 	bl	800079c <__aeabi_f2d>
 80009d6:	4604      	mov	r4, r0
 80009d8:	460d      	mov	r5, r1
 80009da:	4b1a      	ldr	r3, [pc, #104]	; (8000a44 <KalmanFilter_updateEstimate+0x11c>)
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	4618      	mov	r0, r3
 80009e0:	f7ff fedc 	bl	800079c <__aeabi_f2d>
 80009e4:	4602      	mov	r2, r0
 80009e6:	460b      	mov	r3, r1
 80009e8:	4620      	mov	r0, r4
 80009ea:	4629      	mov	r1, r5
 80009ec:	f7ff fc48 	bl	8000280 <__aeabi_dmul>
 80009f0:	4602      	mov	r2, r0
 80009f2:	460b      	mov	r3, r1
 80009f4:	4640      	mov	r0, r8
 80009f6:	4649      	mov	r1, r9
 80009f8:	f7ff fd72 	bl	80004e0 <__adddf3>
 80009fc:	4602      	mov	r2, r0
 80009fe:	460b      	mov	r3, r1
 8000a00:	4610      	mov	r0, r2
 8000a02:	4619      	mov	r1, r3
 8000a04:	f7ff ff22 	bl	800084c <__aeabi_d2f>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	4a08      	ldr	r2, [pc, #32]	; (8000a2c <KalmanFilter_updateEstimate+0x104>)
 8000a0c:	6013      	str	r3, [r2, #0]
  _last_estimate=_current_estimate;
 8000a0e:	4b0b      	ldr	r3, [pc, #44]	; (8000a3c <KalmanFilter_updateEstimate+0x114>)
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	4a09      	ldr	r2, [pc, #36]	; (8000a38 <KalmanFilter_updateEstimate+0x110>)
 8000a14:	6013      	str	r3, [r2, #0]

  return _current_estimate;
 8000a16:	4b09      	ldr	r3, [pc, #36]	; (8000a3c <KalmanFilter_updateEstimate+0x114>)
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	ee07 3a90 	vmov	s15, r3
}
 8000a1e:	eeb0 0a67 	vmov.f32	s0, s15
 8000a22:	3708      	adds	r7, #8
 8000a24:	46bd      	mov	sp, r7
 8000a26:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8000a2a:	bf00      	nop
 8000a2c:	20000098 	.word	0x20000098
 8000a30:	20000094 	.word	0x20000094
 8000a34:	200000a8 	.word	0x200000a8
 8000a38:	200000a4 	.word	0x200000a4
 8000a3c:	200000a0 	.word	0x200000a0
 8000a40:	3ff00000 	.word	0x3ff00000
 8000a44:	2000009c 	.word	0x2000009c

08000a48 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	b087      	sub	sp, #28
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
 8000a50:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 8000a52:	2300      	movs	r3, #0
 8000a54:	617b      	str	r3, [r7, #20]
 8000a56:	2300      	movs	r3, #0
 8000a58:	613b      	str	r3, [r7, #16]
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	60fb      	str	r3, [r7, #12]

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000a5e:	2300      	movs	r3, #0
 8000a60:	617b      	str	r3, [r7, #20]
 8000a62:	e076      	b.n	8000b52 <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8000a64:	2201      	movs	r2, #1
 8000a66:	697b      	ldr	r3, [r7, #20]
 8000a68:	fa02 f303 	lsl.w	r3, r2, r3
 8000a6c:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8000a6e:	683b      	ldr	r3, [r7, #0]
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	693a      	ldr	r2, [r7, #16]
 8000a74:	4013      	ands	r3, r2
 8000a76:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 8000a78:	68fa      	ldr	r2, [r7, #12]
 8000a7a:	693b      	ldr	r3, [r7, #16]
 8000a7c:	429a      	cmp	r2, r3
 8000a7e:	d165      	bne.n	8000b4c <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	681a      	ldr	r2, [r3, #0]
 8000a84:	697b      	ldr	r3, [r7, #20]
 8000a86:	005b      	lsls	r3, r3, #1
 8000a88:	2103      	movs	r1, #3
 8000a8a:	fa01 f303 	lsl.w	r3, r1, r3
 8000a8e:	43db      	mvns	r3, r3
 8000a90:	401a      	ands	r2, r3
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	681a      	ldr	r2, [r3, #0]
 8000a9a:	683b      	ldr	r3, [r7, #0]
 8000a9c:	791b      	ldrb	r3, [r3, #4]
 8000a9e:	4619      	mov	r1, r3
 8000aa0:	697b      	ldr	r3, [r7, #20]
 8000aa2:	005b      	lsls	r3, r3, #1
 8000aa4:	fa01 f303 	lsl.w	r3, r1, r3
 8000aa8:	431a      	orrs	r2, r3
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8000aae:	683b      	ldr	r3, [r7, #0]
 8000ab0:	791b      	ldrb	r3, [r3, #4]
 8000ab2:	2b01      	cmp	r3, #1
 8000ab4:	d003      	beq.n	8000abe <GPIO_Init+0x76>
 8000ab6:	683b      	ldr	r3, [r7, #0]
 8000ab8:	791b      	ldrb	r3, [r3, #4]
 8000aba:	2b02      	cmp	r3, #2
 8000abc:	d12e      	bne.n	8000b1c <GPIO_Init+0xd4>
      {
        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	689a      	ldr	r2, [r3, #8]
 8000ac2:	697b      	ldr	r3, [r7, #20]
 8000ac4:	005b      	lsls	r3, r3, #1
 8000ac6:	2103      	movs	r1, #3
 8000ac8:	fa01 f303 	lsl.w	r3, r1, r3
 8000acc:	43db      	mvns	r3, r3
 8000ace:	401a      	ands	r2, r3
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	689a      	ldr	r2, [r3, #8]
 8000ad8:	683b      	ldr	r3, [r7, #0]
 8000ada:	795b      	ldrb	r3, [r3, #5]
 8000adc:	4619      	mov	r1, r3
 8000ade:	697b      	ldr	r3, [r7, #20]
 8000ae0:	005b      	lsls	r3, r3, #1
 8000ae2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ae6:	431a      	orrs	r2, r3
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	609a      	str	r2, [r3, #8]

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	685a      	ldr	r2, [r3, #4]
 8000af0:	697b      	ldr	r3, [r7, #20]
 8000af2:	b29b      	uxth	r3, r3
 8000af4:	4619      	mov	r1, r3
 8000af6:	2301      	movs	r3, #1
 8000af8:	408b      	lsls	r3, r1
 8000afa:	43db      	mvns	r3, r3
 8000afc:	401a      	ands	r2, r3
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	685b      	ldr	r3, [r3, #4]
 8000b06:	683a      	ldr	r2, [r7, #0]
 8000b08:	7992      	ldrb	r2, [r2, #6]
 8000b0a:	4611      	mov	r1, r2
 8000b0c:	697a      	ldr	r2, [r7, #20]
 8000b0e:	b292      	uxth	r2, r2
 8000b10:	fa01 f202 	lsl.w	r2, r1, r2
 8000b14:	b292      	uxth	r2, r2
 8000b16:	431a      	orrs	r2, r3
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	68da      	ldr	r2, [r3, #12]
 8000b20:	697b      	ldr	r3, [r7, #20]
 8000b22:	b29b      	uxth	r3, r3
 8000b24:	005b      	lsls	r3, r3, #1
 8000b26:	2103      	movs	r1, #3
 8000b28:	fa01 f303 	lsl.w	r3, r1, r3
 8000b2c:	43db      	mvns	r3, r3
 8000b2e:	401a      	ands	r2, r3
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	68da      	ldr	r2, [r3, #12]
 8000b38:	683b      	ldr	r3, [r7, #0]
 8000b3a:	79db      	ldrb	r3, [r3, #7]
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	697b      	ldr	r3, [r7, #20]
 8000b40:	005b      	lsls	r3, r3, #1
 8000b42:	fa01 f303 	lsl.w	r3, r1, r3
 8000b46:	431a      	orrs	r2, r3
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000b4c:	697b      	ldr	r3, [r7, #20]
 8000b4e:	3301      	adds	r3, #1
 8000b50:	617b      	str	r3, [r7, #20]
 8000b52:	697b      	ldr	r3, [r7, #20]
 8000b54:	2b0f      	cmp	r3, #15
 8000b56:	d985      	bls.n	8000a64 <GPIO_Init+0x1c>
    }
  }
}
 8000b58:	bf00      	nop
 8000b5a:	bf00      	nop
 8000b5c:	371c      	adds	r7, #28
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b64:	4770      	bx	lr

08000b66 <GPIO_WriteBit>:
  *            @arg Bit_RESET: to clear the port pin
  *            @arg Bit_SET: to set the port pin
  * @retval None
  */
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
{
 8000b66:	b480      	push	{r7}
 8000b68:	b083      	sub	sp, #12
 8000b6a:	af00      	add	r7, sp, #0
 8000b6c:	6078      	str	r0, [r7, #4]
 8000b6e:	460b      	mov	r3, r1
 8000b70:	807b      	strh	r3, [r7, #2]
 8000b72:	4613      	mov	r3, r2
 8000b74:	707b      	strb	r3, [r7, #1]
  if (BitVal != Bit_RESET)
 8000b76:	787b      	ldrb	r3, [r7, #1]
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d003      	beq.n	8000b84 <GPIO_WriteBit+0x1e>
  {
    GPIOx->BSRRL = GPIO_Pin;
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	887a      	ldrh	r2, [r7, #2]
 8000b80:	831a      	strh	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRRH = GPIO_Pin ;
  }
}
 8000b82:	e002      	b.n	8000b8a <GPIO_WriteBit+0x24>
    GPIOx->BSRRH = GPIO_Pin ;
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	887a      	ldrh	r2, [r7, #2]
 8000b88:	835a      	strh	r2, [r3, #26]
}
 8000b8a:	bf00      	nop
 8000b8c:	370c      	adds	r7, #12
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b94:	4770      	bx	lr

08000b96 <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_LTDC: Connect LTDC pins to AF14 for STM32F429xx/439xx devices.
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 8000b96:	b480      	push	{r7}
 8000b98:	b085      	sub	sp, #20
 8000b9a:	af00      	add	r7, sp, #0
 8000b9c:	6078      	str	r0, [r7, #4]
 8000b9e:	460b      	mov	r3, r1
 8000ba0:	807b      	strh	r3, [r7, #2]
 8000ba2:	4613      	mov	r3, r2
 8000ba4:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 8000baa:	2300      	movs	r3, #0
 8000bac:	60bb      	str	r3, [r7, #8]

  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8000bae:	787a      	ldrb	r2, [r7, #1]
 8000bb0:	887b      	ldrh	r3, [r7, #2]
 8000bb2:	f003 0307 	and.w	r3, r3, #7
 8000bb6:	009b      	lsls	r3, r3, #2
 8000bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bbc:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8000bbe:	887b      	ldrh	r3, [r7, #2]
 8000bc0:	08db      	lsrs	r3, r3, #3
 8000bc2:	b29b      	uxth	r3, r3
 8000bc4:	461a      	mov	r2, r3
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	3208      	adds	r2, #8
 8000bca:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000bce:	887b      	ldrh	r3, [r7, #2]
 8000bd0:	f003 0307 	and.w	r3, r3, #7
 8000bd4:	009b      	lsls	r3, r3, #2
 8000bd6:	210f      	movs	r1, #15
 8000bd8:	fa01 f303 	lsl.w	r3, r1, r3
 8000bdc:	43db      	mvns	r3, r3
 8000bde:	8879      	ldrh	r1, [r7, #2]
 8000be0:	08c9      	lsrs	r1, r1, #3
 8000be2:	b289      	uxth	r1, r1
 8000be4:	4608      	mov	r0, r1
 8000be6:	ea02 0103 	and.w	r1, r2, r3
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	f100 0208 	add.w	r2, r0, #8
 8000bf0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 8000bf4:	887b      	ldrh	r3, [r7, #2]
 8000bf6:	08db      	lsrs	r3, r3, #3
 8000bf8:	b29b      	uxth	r3, r3
 8000bfa:	461a      	mov	r2, r3
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	3208      	adds	r2, #8
 8000c00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c04:	68fa      	ldr	r2, [r7, #12]
 8000c06:	4313      	orrs	r3, r2
 8000c08:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 8000c0a:	887b      	ldrh	r3, [r7, #2]
 8000c0c:	08db      	lsrs	r3, r3, #3
 8000c0e:	b29b      	uxth	r3, r3
 8000c10:	461a      	mov	r2, r3
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	3208      	adds	r2, #8
 8000c16:	68b9      	ldr	r1, [r7, #8]
 8000c18:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8000c1c:	bf00      	nop
 8000c1e:	3714      	adds	r7, #20
 8000c20:	46bd      	mov	sp, r7
 8000c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c26:	4770      	bx	lr

08000c28 <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	b089      	sub	sp, #36	; 0x24
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8000c30:	2300      	movs	r3, #0
 8000c32:	61bb      	str	r3, [r7, #24]
 8000c34:	2300      	movs	r3, #0
 8000c36:	617b      	str	r3, [r7, #20]
 8000c38:	2300      	movs	r3, #0
 8000c3a:	61fb      	str	r3, [r7, #28]
 8000c3c:	2302      	movs	r3, #2
 8000c3e:	613b      	str	r3, [r7, #16]
 8000c40:	2300      	movs	r3, #0
 8000c42:	60fb      	str	r3, [r7, #12]
 8000c44:	2302      	movs	r3, #2
 8000c46:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000c48:	4b4a      	ldr	r3, [pc, #296]	; (8000d74 <RCC_GetClocksFreq+0x14c>)
 8000c4a:	689b      	ldr	r3, [r3, #8]
 8000c4c:	f003 030c 	and.w	r3, r3, #12
 8000c50:	61bb      	str	r3, [r7, #24]

  switch (tmp)
 8000c52:	69bb      	ldr	r3, [r7, #24]
 8000c54:	2b08      	cmp	r3, #8
 8000c56:	d011      	beq.n	8000c7c <RCC_GetClocksFreq+0x54>
 8000c58:	69bb      	ldr	r3, [r7, #24]
 8000c5a:	2b08      	cmp	r3, #8
 8000c5c:	d844      	bhi.n	8000ce8 <RCC_GetClocksFreq+0xc0>
 8000c5e:	69bb      	ldr	r3, [r7, #24]
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d003      	beq.n	8000c6c <RCC_GetClocksFreq+0x44>
 8000c64:	69bb      	ldr	r3, [r7, #24]
 8000c66:	2b04      	cmp	r3, #4
 8000c68:	d004      	beq.n	8000c74 <RCC_GetClocksFreq+0x4c>
 8000c6a:	e03d      	b.n	8000ce8 <RCC_GetClocksFreq+0xc0>
  {
  case 0x00:  /* HSI used as system clock source */
    RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	4a42      	ldr	r2, [pc, #264]	; (8000d78 <RCC_GetClocksFreq+0x150>)
 8000c70:	601a      	str	r2, [r3, #0]
    break;
 8000c72:	e03d      	b.n	8000cf0 <RCC_GetClocksFreq+0xc8>
  case 0x04:  /* HSE used as system clock  source */
    RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	4a41      	ldr	r2, [pc, #260]	; (8000d7c <RCC_GetClocksFreq+0x154>)
 8000c78:	601a      	str	r2, [r3, #0]
    break;
 8000c7a:	e039      	b.n	8000cf0 <RCC_GetClocksFreq+0xc8>
  case 0x08:  /* PLL P used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLP
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8000c7c:	4b3d      	ldr	r3, [pc, #244]	; (8000d74 <RCC_GetClocksFreq+0x14c>)
 8000c7e:	685b      	ldr	r3, [r3, #4]
 8000c80:	0d9b      	lsrs	r3, r3, #22
 8000c82:	f003 0301 	and.w	r3, r3, #1
 8000c86:	60fb      	str	r3, [r7, #12]
    pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000c88:	4b3a      	ldr	r3, [pc, #232]	; (8000d74 <RCC_GetClocksFreq+0x14c>)
 8000c8a:	685b      	ldr	r3, [r3, #4]
 8000c8c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000c90:	60bb      	str	r3, [r7, #8]

    if (pllsource != 0)
 8000c92:	68fb      	ldr	r3, [r7, #12]
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d00c      	beq.n	8000cb2 <RCC_GetClocksFreq+0x8a>
    {
      /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000c98:	4a38      	ldr	r2, [pc, #224]	; (8000d7c <RCC_GetClocksFreq+0x154>)
 8000c9a:	68bb      	ldr	r3, [r7, #8]
 8000c9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ca0:	4a34      	ldr	r2, [pc, #208]	; (8000d74 <RCC_GetClocksFreq+0x14c>)
 8000ca2:	6852      	ldr	r2, [r2, #4]
 8000ca4:	0992      	lsrs	r2, r2, #6
 8000ca6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000caa:	fb02 f303 	mul.w	r3, r2, r3
 8000cae:	61fb      	str	r3, [r7, #28]
 8000cb0:	e00b      	b.n	8000cca <RCC_GetClocksFreq+0xa2>
    }
    else
    {
      /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000cb2:	4a31      	ldr	r2, [pc, #196]	; (8000d78 <RCC_GetClocksFreq+0x150>)
 8000cb4:	68bb      	ldr	r3, [r7, #8]
 8000cb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cba:	4a2e      	ldr	r2, [pc, #184]	; (8000d74 <RCC_GetClocksFreq+0x14c>)
 8000cbc:	6852      	ldr	r2, [r2, #4]
 8000cbe:	0992      	lsrs	r2, r2, #6
 8000cc0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000cc4:	fb02 f303 	mul.w	r3, r2, r3
 8000cc8:	61fb      	str	r3, [r7, #28]
    }

    pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8000cca:	4b2a      	ldr	r3, [pc, #168]	; (8000d74 <RCC_GetClocksFreq+0x14c>)
 8000ccc:	685b      	ldr	r3, [r3, #4]
 8000cce:	0c1b      	lsrs	r3, r3, #16
 8000cd0:	f003 0303 	and.w	r3, r3, #3
 8000cd4:	3301      	adds	r3, #1
 8000cd6:	005b      	lsls	r3, r3, #1
 8000cd8:	613b      	str	r3, [r7, #16]
    RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 8000cda:	69fa      	ldr	r2, [r7, #28]
 8000cdc:	693b      	ldr	r3, [r7, #16]
 8000cde:	fbb2 f2f3 	udiv	r2, r2, r3
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	601a      	str	r2, [r3, #0]
    break;
 8000ce6:	e003      	b.n	8000cf0 <RCC_GetClocksFreq+0xc8>
  default:
    RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	4a23      	ldr	r2, [pc, #140]	; (8000d78 <RCC_GetClocksFreq+0x150>)
 8000cec:	601a      	str	r2, [r3, #0]
    break;
 8000cee:	bf00      	nop
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8000cf0:	4b20      	ldr	r3, [pc, #128]	; (8000d74 <RCC_GetClocksFreq+0x14c>)
 8000cf2:	689b      	ldr	r3, [r3, #8]
 8000cf4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000cf8:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 4;
 8000cfa:	69bb      	ldr	r3, [r7, #24]
 8000cfc:	091b      	lsrs	r3, r3, #4
 8000cfe:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8000d00:	4a1f      	ldr	r2, [pc, #124]	; (8000d80 <RCC_GetClocksFreq+0x158>)
 8000d02:	69bb      	ldr	r3, [r7, #24]
 8000d04:	4413      	add	r3, r2
 8000d06:	781b      	ldrb	r3, [r3, #0]
 8000d08:	b2db      	uxtb	r3, r3
 8000d0a:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	681a      	ldr	r2, [r3, #0]
 8000d10:	697b      	ldr	r3, [r7, #20]
 8000d12:	40da      	lsrs	r2, r3
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 8000d18:	4b16      	ldr	r3, [pc, #88]	; (8000d74 <RCC_GetClocksFreq+0x14c>)
 8000d1a:	689b      	ldr	r3, [r3, #8]
 8000d1c:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8000d20:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 10;
 8000d22:	69bb      	ldr	r3, [r7, #24]
 8000d24:	0a9b      	lsrs	r3, r3, #10
 8000d26:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8000d28:	4a15      	ldr	r2, [pc, #84]	; (8000d80 <RCC_GetClocksFreq+0x158>)
 8000d2a:	69bb      	ldr	r3, [r7, #24]
 8000d2c:	4413      	add	r3, r2
 8000d2e:	781b      	ldrb	r3, [r3, #0]
 8000d30:	b2db      	uxtb	r3, r3
 8000d32:	617b      	str	r3, [r7, #20]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	685a      	ldr	r2, [r3, #4]
 8000d38:	697b      	ldr	r3, [r7, #20]
 8000d3a:	40da      	lsrs	r2, r3
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 8000d40:	4b0c      	ldr	r3, [pc, #48]	; (8000d74 <RCC_GetClocksFreq+0x14c>)
 8000d42:	689b      	ldr	r3, [r3, #8]
 8000d44:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8000d48:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 13;
 8000d4a:	69bb      	ldr	r3, [r7, #24]
 8000d4c:	0b5b      	lsrs	r3, r3, #13
 8000d4e:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8000d50:	4a0b      	ldr	r2, [pc, #44]	; (8000d80 <RCC_GetClocksFreq+0x158>)
 8000d52:	69bb      	ldr	r3, [r7, #24]
 8000d54:	4413      	add	r3, r2
 8000d56:	781b      	ldrb	r3, [r3, #0]
 8000d58:	b2db      	uxtb	r3, r3
 8000d5a:	617b      	str	r3, [r7, #20]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	685a      	ldr	r2, [r3, #4]
 8000d60:	697b      	ldr	r3, [r7, #20]
 8000d62:	40da      	lsrs	r2, r3
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	60da      	str	r2, [r3, #12]
}
 8000d68:	bf00      	nop
 8000d6a:	3724      	adds	r7, #36	; 0x24
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d72:	4770      	bx	lr
 8000d74:	40023800 	.word	0x40023800
 8000d78:	00f42400 	.word	0x00f42400
 8000d7c:	017d7840 	.word	0x017d7840
 8000d80:	20000000 	.word	0x20000000

08000d84 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8000d84:	b480      	push	{r7}
 8000d86:	b083      	sub	sp, #12
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
 8000d8c:	460b      	mov	r3, r1
 8000d8e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000d90:	78fb      	ldrb	r3, [r7, #3]
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d006      	beq.n	8000da4 <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 8000d96:	4b0a      	ldr	r3, [pc, #40]	; (8000dc0 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000d98:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000d9a:	4909      	ldr	r1, [pc, #36]	; (8000dc0 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	4313      	orrs	r3, r2
 8000da0:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 8000da2:	e006      	b.n	8000db2 <RCC_AHB1PeriphClockCmd+0x2e>
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 8000da4:	4b06      	ldr	r3, [pc, #24]	; (8000dc0 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000da6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	43db      	mvns	r3, r3
 8000dac:	4904      	ldr	r1, [pc, #16]	; (8000dc0 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000dae:	4013      	ands	r3, r2
 8000db0:	630b      	str	r3, [r1, #48]	; 0x30
}
 8000db2:	bf00      	nop
 8000db4:	370c      	adds	r7, #12
 8000db6:	46bd      	mov	sp, r7
 8000db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbc:	4770      	bx	lr
 8000dbe:	bf00      	nop
 8000dc0:	40023800 	.word	0x40023800

08000dc4 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	b083      	sub	sp, #12
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
 8000dcc:	460b      	mov	r3, r1
 8000dce:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000dd0:	78fb      	ldrb	r3, [r7, #3]
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d006      	beq.n	8000de4 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8000dd6:	4b0a      	ldr	r3, [pc, #40]	; (8000e00 <RCC_APB1PeriphClockCmd+0x3c>)
 8000dd8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000dda:	4909      	ldr	r1, [pc, #36]	; (8000e00 <RCC_APB1PeriphClockCmd+0x3c>)
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	4313      	orrs	r3, r2
 8000de0:	640b      	str	r3, [r1, #64]	; 0x40
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 8000de2:	e006      	b.n	8000df2 <RCC_APB1PeriphClockCmd+0x2e>
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8000de4:	4b06      	ldr	r3, [pc, #24]	; (8000e00 <RCC_APB1PeriphClockCmd+0x3c>)
 8000de6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	43db      	mvns	r3, r3
 8000dec:	4904      	ldr	r1, [pc, #16]	; (8000e00 <RCC_APB1PeriphClockCmd+0x3c>)
 8000dee:	4013      	ands	r3, r2
 8000df0:	640b      	str	r3, [r1, #64]	; 0x40
}
 8000df2:	bf00      	nop
 8000df4:	370c      	adds	r7, #12
 8000df6:	46bd      	mov	sp, r7
 8000df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfc:	4770      	bx	lr
 8000dfe:	bf00      	nop
 8000e00:	40023800 	.word	0x40023800

08000e04 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8000e04:	b480      	push	{r7}
 8000e06:	b083      	sub	sp, #12
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
 8000e0c:	460b      	mov	r3, r1
 8000e0e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000e10:	78fb      	ldrb	r3, [r7, #3]
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d006      	beq.n	8000e24 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8000e16:	4b0a      	ldr	r3, [pc, #40]	; (8000e40 <RCC_APB2PeriphClockCmd+0x3c>)
 8000e18:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000e1a:	4909      	ldr	r1, [pc, #36]	; (8000e40 <RCC_APB2PeriphClockCmd+0x3c>)
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	4313      	orrs	r3, r2
 8000e20:	644b      	str	r3, [r1, #68]	; 0x44
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 8000e22:	e006      	b.n	8000e32 <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8000e24:	4b06      	ldr	r3, [pc, #24]	; (8000e40 <RCC_APB2PeriphClockCmd+0x3c>)
 8000e26:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	43db      	mvns	r3, r3
 8000e2c:	4904      	ldr	r1, [pc, #16]	; (8000e40 <RCC_APB2PeriphClockCmd+0x3c>)
 8000e2e:	4013      	ands	r3, r2
 8000e30:	644b      	str	r3, [r1, #68]	; 0x44
}
 8000e32:	bf00      	nop
 8000e34:	370c      	adds	r7, #12
 8000e36:	46bd      	mov	sp, r7
 8000e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3c:	4770      	bx	lr
 8000e3e:	bf00      	nop
 8000e40:	40023800 	.word	0x40023800

08000e44 <RCC_APB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8000e44:	b480      	push	{r7}
 8000e46:	b083      	sub	sp, #12
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
 8000e4c:	460b      	mov	r3, r1
 8000e4e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000e50:	78fb      	ldrb	r3, [r7, #3]
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d006      	beq.n	8000e64 <RCC_APB2PeriphResetCmd+0x20>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 8000e56:	4b0a      	ldr	r3, [pc, #40]	; (8000e80 <RCC_APB2PeriphResetCmd+0x3c>)
 8000e58:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000e5a:	4909      	ldr	r1, [pc, #36]	; (8000e80 <RCC_APB2PeriphResetCmd+0x3c>)
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	4313      	orrs	r3, r2
 8000e60:	624b      	str	r3, [r1, #36]	; 0x24
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
  }
}
 8000e62:	e006      	b.n	8000e72 <RCC_APB2PeriphResetCmd+0x2e>
    RCC->APB2RSTR &= ~RCC_APB2Periph;
 8000e64:	4b06      	ldr	r3, [pc, #24]	; (8000e80 <RCC_APB2PeriphResetCmd+0x3c>)
 8000e66:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	43db      	mvns	r3, r3
 8000e6c:	4904      	ldr	r1, [pc, #16]	; (8000e80 <RCC_APB2PeriphResetCmd+0x3c>)
 8000e6e:	4013      	ands	r3, r2
 8000e70:	624b      	str	r3, [r1, #36]	; 0x24
}
 8000e72:	bf00      	nop
 8000e74:	370c      	adds	r7, #12
 8000e76:	46bd      	mov	sp, r7
 8000e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7c:	4770      	bx	lr
 8000e7e:	bf00      	nop
 8000e80:	40023800 	.word	0x40023800

08000e84 <Led_Init_red1>:
//static uint8_t temperature2, humidity2;
/* ----------------------------------modified 0604-----------------------------------------------*/
static uint16_t Kanman_light = 0;
uint16_t AdcValue = 0;
static uint16_t lightLevelAfterFilter = 0;
static void Led_Init_red1(void) {
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b082      	sub	sp, #8
 8000e88:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;
	RCC_AHB1PeriphClockCmd(LEDREDA1Control_SetClock, ENABLE);
 8000e8a:	2101      	movs	r1, #1
 8000e8c:	2001      	movs	r0, #1
 8000e8e:	f7ff ff79 	bl	8000d84 <RCC_AHB1PeriphClockCmd>
	GPIO_InitStructure.GPIO_Pin = LEDREDA1_GPIO_PIN;
 8000e92:	2302      	movs	r3, #2
 8000e94:	603b      	str	r3, [r7, #0]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8000e96:	2301      	movs	r3, #1
 8000e98:	713b      	strb	r3, [r7, #4]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8000e9a:	2302      	movs	r3, #2
 8000e9c:	717b      	strb	r3, [r7, #5]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	71bb      	strb	r3, [r7, #6]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_DOWN;
 8000ea2:	2302      	movs	r3, #2
 8000ea4:	71fb      	strb	r3, [r7, #7]
	GPIO_Init(LEDREDA1_GPIO_PORT, &GPIO_InitStructure);
 8000ea6:	463b      	mov	r3, r7
 8000ea8:	4619      	mov	r1, r3
 8000eaa:	4803      	ldr	r0, [pc, #12]	; (8000eb8 <Led_Init_red1+0x34>)
 8000eac:	f7ff fdcc 	bl	8000a48 <GPIO_Init>
}
 8000eb0:	bf00      	nop
 8000eb2:	3708      	adds	r7, #8
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd80      	pop	{r7, pc}
 8000eb8:	40020000 	.word	0x40020000

08000ebc <Led_Init_red2>:

static void Led_Init_red2(void) {
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b082      	sub	sp, #8
 8000ec0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;
	RCC_AHB1PeriphClockCmd(LEDREDB13Control_SetClock, ENABLE);
 8000ec2:	2101      	movs	r1, #1
 8000ec4:	2002      	movs	r0, #2
 8000ec6:	f7ff ff5d 	bl	8000d84 <RCC_AHB1PeriphClockCmd>
	GPIO_InitStructure.GPIO_Pin = LEDREDB13_GPIO_PIN;
 8000eca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ece:	603b      	str	r3, [r7, #0]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8000ed0:	2301      	movs	r3, #1
 8000ed2:	713b      	strb	r3, [r7, #4]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8000ed4:	2302      	movs	r3, #2
 8000ed6:	717b      	strb	r3, [r7, #5]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	71bb      	strb	r3, [r7, #6]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_DOWN;
 8000edc:	2302      	movs	r3, #2
 8000ede:	71fb      	strb	r3, [r7, #7]
	GPIO_Init(LEDREDB13_GPIO_PORT, &GPIO_InitStructure);
 8000ee0:	463b      	mov	r3, r7
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	4803      	ldr	r0, [pc, #12]	; (8000ef4 <Led_Init_red2+0x38>)
 8000ee6:	f7ff fdaf 	bl	8000a48 <GPIO_Init>
}
 8000eea:	bf00      	nop
 8000eec:	3708      	adds	r7, #8
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	40020400 	.word	0x40020400

08000ef8 <Led_Init_blue1>:

static void Led_Init_blue1(void) {
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b082      	sub	sp, #8
 8000efc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;
	RCC_AHB1PeriphClockCmd(LEDREDA3Control_SetClock, ENABLE);
 8000efe:	2101      	movs	r1, #1
 8000f00:	2001      	movs	r0, #1
 8000f02:	f7ff ff3f 	bl	8000d84 <RCC_AHB1PeriphClockCmd>
	GPIO_InitStructure.GPIO_Pin = LEDREDA3_GPIO_PIN;
 8000f06:	2308      	movs	r3, #8
 8000f08:	603b      	str	r3, [r7, #0]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8000f0a:	2301      	movs	r3, #1
 8000f0c:	713b      	strb	r3, [r7, #4]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8000f0e:	2302      	movs	r3, #2
 8000f10:	717b      	strb	r3, [r7, #5]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8000f12:	2300      	movs	r3, #0
 8000f14:	71bb      	strb	r3, [r7, #6]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_DOWN;
 8000f16:	2302      	movs	r3, #2
 8000f18:	71fb      	strb	r3, [r7, #7]
	GPIO_Init(LEDREDA3_GPIO_PORT, &GPIO_InitStructure);
 8000f1a:	463b      	mov	r3, r7
 8000f1c:	4619      	mov	r1, r3
 8000f1e:	4803      	ldr	r0, [pc, #12]	; (8000f2c <Led_Init_blue1+0x34>)
 8000f20:	f7ff fd92 	bl	8000a48 <GPIO_Init>
}
 8000f24:	bf00      	nop
 8000f26:	3708      	adds	r7, #8
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}
 8000f2c:	40020000 	.word	0x40020000

08000f30 <Led_Init_blue2>:

static void Led_Init_blue2(void) {
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b082      	sub	sp, #8
 8000f34:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;
	RCC_AHB1PeriphClockCmd(LEDREDA10Control_SetClock, ENABLE);
 8000f36:	2101      	movs	r1, #1
 8000f38:	2001      	movs	r0, #1
 8000f3a:	f7ff ff23 	bl	8000d84 <RCC_AHB1PeriphClockCmd>
	GPIO_InitStructure.GPIO_Pin = LEDREDA10_GPIO_PIN;
 8000f3e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f42:	603b      	str	r3, [r7, #0]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8000f44:	2301      	movs	r3, #1
 8000f46:	713b      	strb	r3, [r7, #4]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8000f48:	2302      	movs	r3, #2
 8000f4a:	717b      	strb	r3, [r7, #5]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	71bb      	strb	r3, [r7, #6]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_DOWN;
 8000f50:	2302      	movs	r3, #2
 8000f52:	71fb      	strb	r3, [r7, #7]
	GPIO_Init(LEDREDA10_GPIO_PORT, &GPIO_InitStructure);
 8000f54:	463b      	mov	r3, r7
 8000f56:	4619      	mov	r1, r3
 8000f58:	4803      	ldr	r0, [pc, #12]	; (8000f68 <Led_Init_blue2+0x38>)
 8000f5a:	f7ff fd75 	bl	8000a48 <GPIO_Init>
}
 8000f5e:	bf00      	nop
 8000f60:	3708      	adds	r7, #8
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	40020000 	.word	0x40020000

08000f6c <Button_Init>:

static void Button_Init(void) {
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b082      	sub	sp, #8
 8000f70:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;
	RCC_AHB1PeriphClockCmd(BUTTONControl_SetClock, ENABLE);
 8000f72:	2101      	movs	r1, #1
 8000f74:	2002      	movs	r0, #2
 8000f76:	f7ff ff05 	bl	8000d84 <RCC_AHB1PeriphClockCmd>
	GPIO_InitStructure.GPIO_Pin = BUTTON_GPIO_PIN;
 8000f7a:	2308      	movs	r3, #8
 8000f7c:	603b      	str	r3, [r7, #0]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	713b      	strb	r3, [r7, #4]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8000f82:	2302      	movs	r3, #2
 8000f84:	717b      	strb	r3, [r7, #5]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 8000f86:	2301      	movs	r3, #1
 8000f88:	71fb      	strb	r3, [r7, #7]
	GPIO_Init(BUTTON_GPIO_PORT, &GPIO_InitStructure);
 8000f8a:	463b      	mov	r3, r7
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	4803      	ldr	r0, [pc, #12]	; (8000f9c <Button_Init+0x30>)
 8000f90:	f7ff fd5a 	bl	8000a48 <GPIO_Init>
}
 8000f94:	bf00      	nop
 8000f96:	3708      	adds	r7, #8
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	40020400 	.word	0x40020400

08000fa0 <Button_Init_b3>:

static void Button_Init_b3(void) {
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b082      	sub	sp, #8
 8000fa4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;
	RCC_AHB1PeriphClockCmd(BUTTONA4Control_SetClock, ENABLE);
 8000fa6:	2101      	movs	r1, #1
 8000fa8:	2001      	movs	r0, #1
 8000faa:	f7ff feeb 	bl	8000d84 <RCC_AHB1PeriphClockCmd>
	GPIO_InitStructure.GPIO_Pin = BUTTONA4_GPIO_PIN;
 8000fae:	2310      	movs	r3, #16
 8000fb0:	603b      	str	r3, [r7, #0]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	713b      	strb	r3, [r7, #4]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8000fb6:	2302      	movs	r3, #2
 8000fb8:	717b      	strb	r3, [r7, #5]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 8000fba:	2301      	movs	r3, #1
 8000fbc:	71fb      	strb	r3, [r7, #7]
	GPIO_Init(BUTTONA4_GPIO_PORT, &GPIO_InitStructure);
 8000fbe:	463b      	mov	r3, r7
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	4803      	ldr	r0, [pc, #12]	; (8000fd0 <Button_Init_b3+0x30>)
 8000fc4:	f7ff fd40 	bl	8000a48 <GPIO_Init>
}
 8000fc8:	bf00      	nop
 8000fca:	3708      	adds	r7, #8
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	40020000 	.word	0x40020000

08000fd4 <Button_Init_b4>:

static void Button_Init_b4(void) {
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b082      	sub	sp, #8
 8000fd8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;
	RCC_AHB1PeriphClockCmd(BUTTONB0Control_SetClock, ENABLE);
 8000fda:	2101      	movs	r1, #1
 8000fdc:	2002      	movs	r0, #2
 8000fde:	f7ff fed1 	bl	8000d84 <RCC_AHB1PeriphClockCmd>
	GPIO_InitStructure.GPIO_Pin = BUTTONB0_GPIO_PIN;
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	603b      	str	r3, [r7, #0]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	713b      	strb	r3, [r7, #4]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8000fea:	2302      	movs	r3, #2
 8000fec:	717b      	strb	r3, [r7, #5]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 8000fee:	2301      	movs	r3, #1
 8000ff0:	71fb      	strb	r3, [r7, #7]
	GPIO_Init(BUTTONB0_GPIO_PORT, &GPIO_InitStructure);
 8000ff2:	463b      	mov	r3, r7
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	4803      	ldr	r0, [pc, #12]	; (8001004 <Button_Init_b4+0x30>)
 8000ff8:	f7ff fd26 	bl	8000a48 <GPIO_Init>
}
 8000ffc:	bf00      	nop
 8000ffe:	3708      	adds	r7, #8
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}
 8001004:	40020400 	.word	0x40020400

08001008 <Buzzer_Init>:

static void Buzzer_Init(void) {
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;
	RCC_AHB1PeriphClockCmd(BUZZERControl_SetClock, ENABLE);
 800100e:	2101      	movs	r1, #1
 8001010:	2004      	movs	r0, #4
 8001012:	f7ff feb7 	bl	8000d84 <RCC_AHB1PeriphClockCmd>
	GPIO_InitStructure.GPIO_Pin = BUZZER_GPIO_PIN;
 8001016:	f44f 7300 	mov.w	r3, #512	; 0x200
 800101a:	603b      	str	r3, [r7, #0]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 800101c:	2301      	movs	r3, #1
 800101e:	713b      	strb	r3, [r7, #4]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8001020:	2302      	movs	r3, #2
 8001022:	717b      	strb	r3, [r7, #5]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8001024:	2300      	movs	r3, #0
 8001026:	71bb      	strb	r3, [r7, #6]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_DOWN;
 8001028:	2302      	movs	r3, #2
 800102a:	71fb      	strb	r3, [r7, #7]
	GPIO_Init(BUZZER_GPIO_PORT, &GPIO_InitStructure);
 800102c:	463b      	mov	r3, r7
 800102e:	4619      	mov	r1, r3
 8001030:	4803      	ldr	r0, [pc, #12]	; (8001040 <Buzzer_Init+0x38>)
 8001032:	f7ff fd09 	bl	8000a48 <GPIO_Init>
}
 8001036:	bf00      	nop
 8001038:	3708      	adds	r7, #8
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	40020800 	.word	0x40020800

08001044 <LEDControl_SetStatus>:

static void LEDControl_SetStatus(GPIO_TypeDef *GPIOx, uint8_t GPIO_PIN,
		uint8_t Status) {
 8001044:	b480      	push	{r7}
 8001046:	b083      	sub	sp, #12
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
 800104c:	460b      	mov	r3, r1
 800104e:	70fb      	strb	r3, [r7, #3]
 8001050:	4613      	mov	r3, r2
 8001052:	70bb      	strb	r3, [r7, #2]
	if (Status == GPIO_PIN_SET) {
 8001054:	78bb      	ldrb	r3, [r7, #2]
 8001056:	2b01      	cmp	r3, #1
 8001058:	d10d      	bne.n	8001076 <LEDControl_SetStatus+0x32>
		GPIOx->BSRRL |= 1 << GPIO_PIN;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	8b1b      	ldrh	r3, [r3, #24]
 800105e:	b29b      	uxth	r3, r3
 8001060:	b21a      	sxth	r2, r3
 8001062:	78fb      	ldrb	r3, [r7, #3]
 8001064:	2101      	movs	r1, #1
 8001066:	fa01 f303 	lsl.w	r3, r1, r3
 800106a:	b21b      	sxth	r3, r3
 800106c:	4313      	orrs	r3, r2
 800106e:	b21b      	sxth	r3, r3
 8001070:	b29a      	uxth	r2, r3
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	831a      	strh	r2, [r3, #24]
	}
	if (Status == GPIO_PIN_RESET) {
 8001076:	78bb      	ldrb	r3, [r7, #2]
 8001078:	2b00      	cmp	r3, #0
 800107a:	d10d      	bne.n	8001098 <LEDControl_SetStatus+0x54>
		GPIOx->BSRRH |= 1 << GPIO_PIN;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	8b5b      	ldrh	r3, [r3, #26]
 8001080:	b29b      	uxth	r3, r3
 8001082:	b21a      	sxth	r2, r3
 8001084:	78fb      	ldrb	r3, [r7, #3]
 8001086:	2101      	movs	r1, #1
 8001088:	fa01 f303 	lsl.w	r3, r1, r3
 800108c:	b21b      	sxth	r3, r3
 800108e:	4313      	orrs	r3, r2
 8001090:	b21b      	sxth	r3, r3
 8001092:	b29a      	uxth	r2, r3
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	835a      	strh	r2, [r3, #26]
	}
}
 8001098:	bf00      	nop
 800109a:	370c      	adds	r7, #12
 800109c:	46bd      	mov	sp, r7
 800109e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a2:	4770      	bx	lr

080010a4 <ButtonRead_Status>:

static uint8_t ButtonRead_Status(GPIO_TypeDef *GPIOx, uint32_t GPIO_PIN) {
 80010a4:	b480      	push	{r7}
 80010a6:	b085      	sub	sp, #20
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
 80010ac:	6039      	str	r1, [r7, #0]
	uint32_t Read_Pin;
	Read_Pin = (GPIOx->IDR) >> GPIO_PIN;
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	691a      	ldr	r2, [r3, #16]
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	fa22 f303 	lsr.w	r3, r2, r3
 80010b8:	60fb      	str	r3, [r7, #12]
	Read_Pin = Read_Pin & 0x01;
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	f003 0301 	and.w	r3, r3, #1
 80010c0:	60fb      	str	r3, [r7, #12]

	return Read_Pin;
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	b2db      	uxtb	r3, r3
}
 80010c6:	4618      	mov	r0, r3
 80010c8:	3714      	adds	r7, #20
 80010ca:	46bd      	mov	sp, r7
 80010cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d0:	4770      	bx	lr

080010d2 <BuzzerControl_SetStatus>:

static void BuzzerControl_SetStatus(GPIO_TypeDef *GPIOx, uint8_t GPIO_PIN,
		uint8_t Status) {
 80010d2:	b480      	push	{r7}
 80010d4:	b083      	sub	sp, #12
 80010d6:	af00      	add	r7, sp, #0
 80010d8:	6078      	str	r0, [r7, #4]
 80010da:	460b      	mov	r3, r1
 80010dc:	70fb      	strb	r3, [r7, #3]
 80010de:	4613      	mov	r3, r2
 80010e0:	70bb      	strb	r3, [r7, #2]
	if (Status == GPIO_PIN_SET) {
 80010e2:	78bb      	ldrb	r3, [r7, #2]
 80010e4:	2b01      	cmp	r3, #1
 80010e6:	d10d      	bne.n	8001104 <BuzzerControl_SetStatus+0x32>
		GPIOx->BSRRL |= 1 << GPIO_PIN;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	8b1b      	ldrh	r3, [r3, #24]
 80010ec:	b29b      	uxth	r3, r3
 80010ee:	b21a      	sxth	r2, r3
 80010f0:	78fb      	ldrb	r3, [r7, #3]
 80010f2:	2101      	movs	r1, #1
 80010f4:	fa01 f303 	lsl.w	r3, r1, r3
 80010f8:	b21b      	sxth	r3, r3
 80010fa:	4313      	orrs	r3, r2
 80010fc:	b21b      	sxth	r3, r3
 80010fe:	b29a      	uxth	r2, r3
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	831a      	strh	r2, [r3, #24]
	}
	if (Status == GPIO_PIN_RESET) {
 8001104:	78bb      	ldrb	r3, [r7, #2]
 8001106:	2b00      	cmp	r3, #0
 8001108:	d10d      	bne.n	8001126 <BuzzerControl_SetStatus+0x54>
		GPIOx->BSRRH |= 1 << GPIO_PIN;
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	8b5b      	ldrh	r3, [r3, #26]
 800110e:	b29b      	uxth	r3, r3
 8001110:	b21a      	sxth	r2, r3
 8001112:	78fb      	ldrb	r3, [r7, #3]
 8001114:	2101      	movs	r1, #1
 8001116:	fa01 f303 	lsl.w	r3, r1, r3
 800111a:	b21b      	sxth	r3, r3
 800111c:	4313      	orrs	r3, r2
 800111e:	b21b      	sxth	r3, r3
 8001120:	b29a      	uxth	r2, r3
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	835a      	strh	r2, [r3, #26]
	}
}
 8001126:	bf00      	nop
 8001128:	370c      	adds	r7, #12
 800112a:	46bd      	mov	sp, r7
 800112c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001130:	4770      	bx	lr
	...

08001134 <main>:

int main(void) {
 8001134:	b580      	push	{r7, lr}
 8001136:	b086      	sub	sp, #24
 8001138:	af00      	add	r7, sp, #0
	AppInitCommon();
 800113a:	f000 fbf5 	bl	8001928 <AppInitCommon>

	Led_Init_red1();
 800113e:	f7ff fea1 	bl	8000e84 <Led_Init_red1>
	Led_Init_red2();
 8001142:	f7ff febb 	bl	8000ebc <Led_Init_red2>
	Led_Init_blue1();
 8001146:	f7ff fed7 	bl	8000ef8 <Led_Init_blue1>
	Led_Init_blue2();
 800114a:	f7ff fef1 	bl	8000f30 <Led_Init_blue2>
	Buzzer_Init();
 800114e:	f7ff ff5b 	bl	8001008 <Buzzer_Init>
	Button_Init();
 8001152:	f7ff ff0b 	bl	8000f6c <Button_Init>
	Button_Init_b3();
 8001156:	f7ff ff23 	bl	8000fa0 <Button_Init_b3>
	Button_Init_b4();
 800115a:	f7ff ff3b 	bl	8000fd4 <Button_Init_b4>
	int timeStart = 0; // Thời điểm bắt đầu nhấn nút
 800115e:	2300      	movs	r3, #0
 8001160:	60bb      	str	r3, [r7, #8]
	int isButtonPressed = 0; // Cờ kiểm tra xem nút đã được nhấn hay chưa
 8001162:	2300      	movs	r3, #0
 8001164:	607b      	str	r3, [r7, #4]
	int cnt = 0;
 8001166:	2300      	movs	r3, #0
 8001168:	617b      	str	r3, [r7, #20]
	int cnt1 = 0;
 800116a:	2300      	movs	r3, #0
 800116c:	613b      	str	r3, [r7, #16]
	while (1) {
		processGetValueSensor();
 800116e:	f000 fa9f 	bl	80016b0 <processGetValueSensor>
		processTimerScheduler();
 8001172:	f001 fd39 	bl	8002be8 <processTimerScheduler>
		ABL_Process();
 8001176:	f000 fd1b 	bl	8001bb0 <ABL_Process>
//		BuzzerControl_SetStatus(BUZZER_GPIO_PORT, BUZZER_PIN9, 0);
//		LEDControl_SetStatus(LEDREDA1_GPIO_PORT, LEDREDA1_PIN, 0);
//		LEDControl_SetStatus(LEDREDB13_GPIO_PORT, LEDREDB13_PIN, 0);

		// yeu cau 2
		if (ButtonRead_Status(BUTTON_GPIO_PORT, BUTTON_PIN3) == 0) {
 800117a:	2103      	movs	r1, #3
 800117c:	4840      	ldr	r0, [pc, #256]	; (8001280 <main+0x14c>)
 800117e:	f7ff ff91 	bl	80010a4 <ButtonRead_Status>
 8001182:	4603      	mov	r3, r0
 8001184:	2b00      	cmp	r3, #0
 8001186:	d139      	bne.n	80011fc <main+0xc8>
			for (int i = 0; i < 2; i++) {
 8001188:	2300      	movs	r3, #0
 800118a:	60fb      	str	r3, [r7, #12]
 800118c:	e028      	b.n	80011e0 <main+0xac>
				BuzzerControl_SetStatus(BUZZER_GPIO_PORT, BUZZER_PIN9, 1);
 800118e:	2201      	movs	r2, #1
 8001190:	2109      	movs	r1, #9
 8001192:	483c      	ldr	r0, [pc, #240]	; (8001284 <main+0x150>)
 8001194:	f7ff ff9d 	bl	80010d2 <BuzzerControl_SetStatus>
				LEDControl_SetStatus(LEDREDA1_GPIO_PORT, LEDREDA1_PIN, 1);
 8001198:	2201      	movs	r2, #1
 800119a:	2101      	movs	r1, #1
 800119c:	483a      	ldr	r0, [pc, #232]	; (8001288 <main+0x154>)
 800119e:	f7ff ff51 	bl	8001044 <LEDControl_SetStatus>
				LEDControl_SetStatus(LEDREDB13_GPIO_PORT, LEDREDB13_PIN, 1);
 80011a2:	2201      	movs	r2, #1
 80011a4:	210d      	movs	r1, #13
 80011a6:	4836      	ldr	r0, [pc, #216]	; (8001280 <main+0x14c>)
 80011a8:	f7ff ff4c 	bl	8001044 <LEDControl_SetStatus>
				delay_ms(500);
 80011ac:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80011b0:	f000 f86c 	bl	800128c <delay_ms>
				BuzzerControl_SetStatus(BUZZER_GPIO_PORT, BUZZER_PIN9, 0);
 80011b4:	2200      	movs	r2, #0
 80011b6:	2109      	movs	r1, #9
 80011b8:	4832      	ldr	r0, [pc, #200]	; (8001284 <main+0x150>)
 80011ba:	f7ff ff8a 	bl	80010d2 <BuzzerControl_SetStatus>
				LEDControl_SetStatus(LEDREDA1_GPIO_PORT, LEDREDA1_PIN, 0);
 80011be:	2200      	movs	r2, #0
 80011c0:	2101      	movs	r1, #1
 80011c2:	4831      	ldr	r0, [pc, #196]	; (8001288 <main+0x154>)
 80011c4:	f7ff ff3e 	bl	8001044 <LEDControl_SetStatus>
				LEDControl_SetStatus(LEDREDB13_GPIO_PORT, LEDREDB13_PIN, 0);
 80011c8:	2200      	movs	r2, #0
 80011ca:	210d      	movs	r1, #13
 80011cc:	482c      	ldr	r0, [pc, #176]	; (8001280 <main+0x14c>)
 80011ce:	f7ff ff39 	bl	8001044 <LEDControl_SetStatus>
				delay_ms(500);
 80011d2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80011d6:	f000 f859 	bl	800128c <delay_ms>
			for (int i = 0; i < 2; i++) {
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	3301      	adds	r3, #1
 80011de:	60fb      	str	r3, [r7, #12]
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	2b01      	cmp	r3, #1
 80011e4:	ddd3      	ble.n	800118e <main+0x5a>
//		 		        }
//		 		    } else {
//		 		        isButtonPressed = 1; // Nếu nút không được nhấn, reset cờ nhấn nút
//		 		    }
//	}
		while (ButtonRead_Status(BUTTONA4_GPIO_PORT, BUTTONA4_PIN) == 0) {
 80011e6:	e009      	b.n	80011fc <main+0xc8>
			delay_ms(1000);
 80011e8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80011ec:	f000 f84e 	bl	800128c <delay_ms>
			cnt++;
 80011f0:	697b      	ldr	r3, [r7, #20]
 80011f2:	3301      	adds	r3, #1
 80011f4:	617b      	str	r3, [r7, #20]
			if (cnt >= 3) {
 80011f6:	697b      	ldr	r3, [r7, #20]
 80011f8:	2b02      	cmp	r3, #2
 80011fa:	dc07      	bgt.n	800120c <main+0xd8>
		while (ButtonRead_Status(BUTTONA4_GPIO_PORT, BUTTONA4_PIN) == 0) {
 80011fc:	2104      	movs	r1, #4
 80011fe:	4822      	ldr	r0, [pc, #136]	; (8001288 <main+0x154>)
 8001200:	f7ff ff50 	bl	80010a4 <ButtonRead_Status>
 8001204:	4603      	mov	r3, r0
 8001206:	2b00      	cmp	r3, #0
 8001208:	d0ee      	beq.n	80011e8 <main+0xb4>
 800120a:	e000      	b.n	800120e <main+0xda>
				break;
 800120c:	bf00      	nop
			}
		}
		if (cnt >= 3) {
 800120e:	697b      	ldr	r3, [r7, #20]
 8001210:	2b02      	cmp	r3, #2
 8001212:	dd0c      	ble.n	800122e <main+0xfa>
			LEDControl_SetStatus(LEDREDA3_GPIO_PORT, LEDREDA3_PIN, 1);
 8001214:	2201      	movs	r2, #1
 8001216:	2103      	movs	r1, #3
 8001218:	481b      	ldr	r0, [pc, #108]	; (8001288 <main+0x154>)
 800121a:	f7ff ff13 	bl	8001044 <LEDControl_SetStatus>
			LEDControl_SetStatus(LEDREDA10_GPIO_PORT, LEDREDA10_PIN, 1);
 800121e:	2201      	movs	r2, #1
 8001220:	210a      	movs	r1, #10
 8001222:	4819      	ldr	r0, [pc, #100]	; (8001288 <main+0x154>)
 8001224:	f7ff ff0e 	bl	8001044 <LEDControl_SetStatus>
			cnt = 0;
 8001228:	2300      	movs	r3, #0
 800122a:	617b      	str	r3, [r7, #20]
 800122c:	e00c      	b.n	8001248 <main+0x114>
		} else {
			cnt = 0;
 800122e:	2300      	movs	r3, #0
 8001230:	617b      	str	r3, [r7, #20]
		}

		while (ButtonRead_Status(BUTTONB0_GPIO_PORT, BUTTONB0_PIN) == 0) {
 8001232:	e009      	b.n	8001248 <main+0x114>
			delay_ms(1000);
 8001234:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001238:	f000 f828 	bl	800128c <delay_ms>
			cnt1++;
 800123c:	693b      	ldr	r3, [r7, #16]
 800123e:	3301      	adds	r3, #1
 8001240:	613b      	str	r3, [r7, #16]
			if (cnt1 >= 3) {
 8001242:	693b      	ldr	r3, [r7, #16]
 8001244:	2b02      	cmp	r3, #2
 8001246:	dc07      	bgt.n	8001258 <main+0x124>
		while (ButtonRead_Status(BUTTONB0_GPIO_PORT, BUTTONB0_PIN) == 0) {
 8001248:	2100      	movs	r1, #0
 800124a:	480d      	ldr	r0, [pc, #52]	; (8001280 <main+0x14c>)
 800124c:	f7ff ff2a 	bl	80010a4 <ButtonRead_Status>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d0ee      	beq.n	8001234 <main+0x100>
 8001256:	e000      	b.n	800125a <main+0x126>
				break;
 8001258:	bf00      	nop
			}
		}
		if (cnt1 >= 3) {
 800125a:	693b      	ldr	r3, [r7, #16]
 800125c:	2b02      	cmp	r3, #2
 800125e:	dd0c      	ble.n	800127a <main+0x146>
			LEDControl_SetStatus(LEDREDA3_GPIO_PORT, LEDREDA3_PIN, 0);
 8001260:	2200      	movs	r2, #0
 8001262:	2103      	movs	r1, #3
 8001264:	4808      	ldr	r0, [pc, #32]	; (8001288 <main+0x154>)
 8001266:	f7ff feed 	bl	8001044 <LEDControl_SetStatus>
			LEDControl_SetStatus(LEDREDA10_GPIO_PORT, LEDREDA10_PIN, 0);
 800126a:	2200      	movs	r2, #0
 800126c:	210a      	movs	r1, #10
 800126e:	4806      	ldr	r0, [pc, #24]	; (8001288 <main+0x154>)
 8001270:	f7ff fee8 	bl	8001044 <LEDControl_SetStatus>
			cnt1 = 0;
 8001274:	2300      	movs	r3, #0
 8001276:	613b      	str	r3, [r7, #16]
 8001278:	e779      	b.n	800116e <main+0x3a>
		} else {
			cnt1 = 0;
 800127a:	2300      	movs	r3, #0
 800127c:	613b      	str	r3, [r7, #16]
		processGetValueSensor();
 800127e:	e776      	b.n	800116e <main+0x3a>
 8001280:	40020400 	.word	0x40020400
 8001284:	40020800 	.word	0x40020800
 8001288:	40020000 	.word	0x40020000

0800128c <delay_ms>:
 * @func   delay_ms
 * @brief  delay milisecon
 * @param  None
 * @retval None
 */
void delay_ms(uint32_t ms) {
 800128c:	b580      	push	{r7, lr}
 800128e:	b084      	sub	sp, #16
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]

	uint32_t startTime = GetMilSecTick(); //Lưu lại thời điểm hiện tại.
 8001294:	f001 fc9c 	bl	8002bd0 <GetMilSecTick>
 8001298:	60f8      	str	r0, [r7, #12]
	while (CalculatorTime(startTime, GetMilSecTick()) <= ms)
 800129a:	bf00      	nop
 800129c:	f001 fc98 	bl	8002bd0 <GetMilSecTick>
 80012a0:	4603      	mov	r3, r0
 80012a2:	4619      	mov	r1, r3
 80012a4:	68f8      	ldr	r0, [r7, #12]
 80012a6:	f000 f809 	bl	80012bc <CalculatorTime>
 80012aa:	4602      	mov	r2, r0
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	4293      	cmp	r3, r2
 80012b0:	d2f4      	bcs.n	800129c <delay_ms+0x10>
		;

//	Đợi cho đến khi hết khoảng time cài đặt

}
 80012b2:	bf00      	nop
 80012b4:	bf00      	nop
 80012b6:	3710      	adds	r7, #16
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}

080012bc <CalculatorTime>:
 * @func   CalculatorTime
 * @brief  Caculator time button
 * @param  None
 * @retval None
 */
uint32_t CalculatorTime(uint32_t dwTimeInit, uint32_t dwTimeCurrent) {
 80012bc:	b480      	push	{r7}
 80012be:	b085      	sub	sp, #20
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
 80012c4:	6039      	str	r1, [r7, #0]
	uint32_t dwTimeTotal;
	if (dwTimeCurrent >= dwTimeInit) {
 80012c6:	683a      	ldr	r2, [r7, #0]
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	429a      	cmp	r2, r3
 80012cc:	d304      	bcc.n	80012d8 <CalculatorTime+0x1c>
		dwTimeTotal = dwTimeCurrent - dwTimeInit;
 80012ce:	683a      	ldr	r2, [r7, #0]
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	1ad3      	subs	r3, r2, r3
 80012d4:	60fb      	str	r3, [r7, #12]
 80012d6:	e004      	b.n	80012e2 <CalculatorTime+0x26>
	} else {
		dwTimeTotal = 0xFFFFFFFFU + dwTimeCurrent - dwTimeInit;
 80012d8:	683a      	ldr	r2, [r7, #0]
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	1ad3      	subs	r3, r2, r3
 80012de:	3b01      	subs	r3, #1
 80012e0:	60fb      	str	r3, [r7, #12]
	}
	return dwTimeTotal;
 80012e2:	68fb      	ldr	r3, [r7, #12]

}
 80012e4:	4618      	mov	r0, r3
 80012e6:	3714      	adds	r7, #20
 80012e8:	46bd      	mov	sp, r7
 80012ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ee:	4770      	bx	lr

080012f0 <SPI1_Init>:
 * @func   SPI1_Init
 * @brief  Init SPI
 * @param  None
 * @retval None
 */
static void SPI1_Init(void) {
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b082      	sub	sp, #8
 80012f4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;

	/* GPIOA, GPIOB and GPIOC Clocks enable */
	RCC_AHB1PeriphClockCmd(
 80012f6:	2101      	movs	r1, #1
 80012f8:	2007      	movs	r0, #7
 80012fa:	f7ff fd43 	bl	8000d84 <RCC_AHB1PeriphClockCmd>
			RCC_AHB1Periph_GPIOA | RCC_AHB1Periph_GPIOB | RCC_AHB1Periph_GPIOC,
			ENABLE);

	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 80012fe:	2301      	movs	r3, #1
 8001300:	713b      	strb	r3, [r7, #4]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
 8001302:	2303      	movs	r3, #3
 8001304:	717b      	strb	r3, [r7, #5]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8001306:	2300      	movs	r3, #0
 8001308:	71bb      	strb	r3, [r7, #6]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 800130a:	2300      	movs	r3, #0
 800130c:	71fb      	strb	r3, [r7, #7]

	GPIO_InitStructure.GPIO_Pin = SPI1_SCK_PIN | SPI1_MOSI_PIN | SPI1_RS_PIN
 800130e:	f44f 7368 	mov.w	r3, #928	; 0x3a0
 8001312:	603b      	str	r3, [r7, #0]
			| SPI1_MODE_PIN;
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 8001314:	463b      	mov	r3, r7
 8001316:	4619      	mov	r1, r3
 8001318:	480a      	ldr	r0, [pc, #40]	; (8001344 <SPI1_Init+0x54>)
 800131a:	f7ff fb95 	bl	8000a48 <GPIO_Init>

	GPIO_InitStructure.GPIO_Pin = SPI1_CS_PIN | SPI1_ENABLE_PIN;
 800131e:	f44f 6388 	mov.w	r3, #1088	; 0x440
 8001322:	603b      	str	r3, [r7, #0]
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 8001324:	463b      	mov	r3, r7
 8001326:	4619      	mov	r1, r3
 8001328:	4807      	ldr	r0, [pc, #28]	; (8001348 <SPI1_Init+0x58>)
 800132a:	f7ff fb8d 	bl	8000a48 <GPIO_Init>

	GPIO_InitStructure.GPIO_Pin = SPI1_RST_PIN;
 800132e:	2380      	movs	r3, #128	; 0x80
 8001330:	603b      	str	r3, [r7, #0]
	GPIO_Init(GPIOC, &GPIO_InitStructure);
 8001332:	463b      	mov	r3, r7
 8001334:	4619      	mov	r1, r3
 8001336:	4805      	ldr	r0, [pc, #20]	; (800134c <SPI1_Init+0x5c>)
 8001338:	f7ff fb86 	bl	8000a48 <GPIO_Init>
}
 800133c:	bf00      	nop
 800133e:	3708      	adds	r7, #8
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}
 8001344:	40020000 	.word	0x40020000
 8001348:	40020400 	.word	0x40020400
 800134c:	40020800 	.word	0x40020800

08001350 <I2C_Init_temphumi>:
 * @func   I2C_Init_temphumi
 * @brief  Init I2C temp and humi
 * @param  None
 * @retval None
 */
static void I2C_Init_temphumi(void) {
 8001350:	b580      	push	{r7, lr}
 8001352:	b086      	sub	sp, #24
 8001354:	af00      	add	r7, sp, #0
// Initialization struct
	I2C_InitTypeDef I2C_InitStruct;
	GPIO_InitTypeDef GPIO_InitStruct;

	// Step 1: Initialize I2C
	RCC_APB1PeriphClockCmd(I2Cx_RCC, ENABLE);
 8001356:	2101      	movs	r1, #1
 8001358:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800135c:	f7ff fd32 	bl	8000dc4 <RCC_APB1PeriphClockCmd>
	I2C_InitStruct.I2C_ClockSpeed = 400000;
 8001360:	4b1d      	ldr	r3, [pc, #116]	; (80013d8 <I2C_Init_temphumi+0x88>)
 8001362:	60bb      	str	r3, [r7, #8]
	I2C_InitStruct.I2C_Mode = I2C_Mode_I2C;
 8001364:	2300      	movs	r3, #0
 8001366:	81bb      	strh	r3, [r7, #12]
	I2C_InitStruct.I2C_DutyCycle = I2C_DutyCycle_2;
 8001368:	f64b 73ff 	movw	r3, #49151	; 0xbfff
 800136c:	81fb      	strh	r3, [r7, #14]
	I2C_InitStruct.I2C_OwnAddress1 = 0x00;
 800136e:	2300      	movs	r3, #0
 8001370:	823b      	strh	r3, [r7, #16]
	I2C_InitStruct.I2C_Ack = I2C_Ack_Enable;
 8001372:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001376:	827b      	strh	r3, [r7, #18]
	I2C_InitStruct.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
 8001378:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800137c:	82bb      	strh	r3, [r7, #20]
	I2C_Init(I2Cx_SENSOR, &I2C_InitStruct);
 800137e:	f107 0308 	add.w	r3, r7, #8
 8001382:	4619      	mov	r1, r3
 8001384:	4815      	ldr	r0, [pc, #84]	; (80013dc <I2C_Init_temphumi+0x8c>)
 8001386:	f000 fff9 	bl	800237c <I2C_Init>
	I2C_Cmd(I2Cx_SENSOR, ENABLE);
 800138a:	2101      	movs	r1, #1
 800138c:	4813      	ldr	r0, [pc, #76]	; (80013dc <I2C_Init_temphumi+0x8c>)
 800138e:	f001 f8b7 	bl	8002500 <I2C_Cmd>

	// Step 2: Initialize GPIO as open drain alternate function
	RCC_AHB1PeriphClockCmd(I2C_GPIO_RCC, ENABLE);
 8001392:	2101      	movs	r1, #1
 8001394:	2002      	movs	r0, #2
 8001396:	f7ff fcf5 	bl	8000d84 <RCC_AHB1PeriphClockCmd>
	GPIO_InitStruct.GPIO_Pin = I2C_PIN_SCL | I2C_PIN_SDA;
 800139a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800139e:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_AF;
 80013a0:	2302      	movs	r3, #2
 80013a2:	713b      	strb	r3, [r7, #4]
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_50MHz;
 80013a4:	2302      	movs	r3, #2
 80013a6:	717b      	strb	r3, [r7, #5]
	GPIO_InitStruct.GPIO_OType = GPIO_OType_OD;
 80013a8:	2301      	movs	r3, #1
 80013aa:	71bb      	strb	r3, [r7, #6]
	GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_NOPULL;
 80013ac:	2300      	movs	r3, #0
 80013ae:	71fb      	strb	r3, [r7, #7]
	GPIO_Init(I2C_GPIO, &GPIO_InitStruct);
 80013b0:	463b      	mov	r3, r7
 80013b2:	4619      	mov	r1, r3
 80013b4:	480a      	ldr	r0, [pc, #40]	; (80013e0 <I2C_Init_temphumi+0x90>)
 80013b6:	f7ff fb47 	bl	8000a48 <GPIO_Init>

	/* Connect PXx to I2C_SCL */
	GPIO_PinAFConfig(I2C_GPIO, GPIO_PinSource8, GPIO_AF_I2C1);
 80013ba:	2204      	movs	r2, #4
 80013bc:	2108      	movs	r1, #8
 80013be:	4808      	ldr	r0, [pc, #32]	; (80013e0 <I2C_Init_temphumi+0x90>)
 80013c0:	f7ff fbe9 	bl	8000b96 <GPIO_PinAFConfig>

	/* Connect PXx to I2C_SDA */
	GPIO_PinAFConfig(I2C_GPIO, GPIO_PinSource9, GPIO_AF_I2C1);
 80013c4:	2204      	movs	r2, #4
 80013c6:	2109      	movs	r1, #9
 80013c8:	4805      	ldr	r0, [pc, #20]	; (80013e0 <I2C_Init_temphumi+0x90>)
 80013ca:	f7ff fbe4 	bl	8000b96 <GPIO_PinAFConfig>
}
 80013ce:	bf00      	nop
 80013d0:	3718      	adds	r7, #24
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	00061a80 	.word	0x00061a80
 80013dc:	40005400 	.word	0x40005400
 80013e0:	40020400 	.word	0x40020400

080013e4 <I2C_start>:
 * @func    I2C_start
 * @brief   Generate I2C start condition
 * @param   None
 * @retval  None
 */
void I2C_start(void) {
 80013e4:	b580      	push	{r7, lr}
 80013e6:	af00      	add	r7, sp, #0
	// Wait until I2Cx is not busy anymore
	while (I2C_GetFlagStatus(I2Cx_SENSOR, I2C_FLAG_BUSY))
 80013e8:	bf00      	nop
 80013ea:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 80013ee:	480a      	ldr	r0, [pc, #40]	; (8001418 <I2C_start+0x34>)
 80013f0:	f001 f972 	bl	80026d8 <I2C_GetFlagStatus>
 80013f4:	4603      	mov	r3, r0
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d1f7      	bne.n	80013ea <I2C_start+0x6>
		;

	// Generate start condition
	I2C_GenerateSTART(I2Cx_SENSOR, ENABLE);
 80013fa:	2101      	movs	r1, #1
 80013fc:	4806      	ldr	r0, [pc, #24]	; (8001418 <I2C_start+0x34>)
 80013fe:	f001 f89f 	bl	8002540 <I2C_GenerateSTART>

	// Wait for I2C EV5.
	// It means that the start condition has been correctly released
	// on the I2C bus (the bus is free, no other devices is communicating))
	while (!I2C_CheckEvent(I2Cx_SENSOR, I2C_EVENT_MASTER_MODE_SELECT))
 8001402:	bf00      	nop
 8001404:	4905      	ldr	r1, [pc, #20]	; (800141c <I2C_start+0x38>)
 8001406:	4804      	ldr	r0, [pc, #16]	; (8001418 <I2C_start+0x34>)
 8001408:	f001 f936 	bl	8002678 <I2C_CheckEvent>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	d0f8      	beq.n	8001404 <I2C_start+0x20>
		;
}
 8001412:	bf00      	nop
 8001414:	bf00      	nop
 8001416:	bd80      	pop	{r7, pc}
 8001418:	40005400 	.word	0x40005400
 800141c:	00030001 	.word	0x00030001

08001420 <I2C_address_direction>:
 * @func    I2C_address_direction
 * @brief   e
 * @param   None
 * @retval  None
 */
void I2C_address_direction(uint8_t address, uint8_t direction) {
 8001420:	b580      	push	{r7, lr}
 8001422:	b082      	sub	sp, #8
 8001424:	af00      	add	r7, sp, #0
 8001426:	4603      	mov	r3, r0
 8001428:	460a      	mov	r2, r1
 800142a:	71fb      	strb	r3, [r7, #7]
 800142c:	4613      	mov	r3, r2
 800142e:	71bb      	strb	r3, [r7, #6]
	// Send slave address
	I2C_Send7bitAddress(I2Cx_SENSOR, address, direction);
 8001430:	79ba      	ldrb	r2, [r7, #6]
 8001432:	79fb      	ldrb	r3, [r7, #7]
 8001434:	4619      	mov	r1, r3
 8001436:	480f      	ldr	r0, [pc, #60]	; (8001474 <I2C_address_direction+0x54>)
 8001438:	f001 f8c2 	bl	80025c0 <I2C_Send7bitAddress>

	// Wait for I2C EV6
	// It means that a slave acknowledges his address
	if (direction == I2C_Direction_Transmitter)		// truyền
 800143c:	79bb      	ldrb	r3, [r7, #6]
 800143e:	2b00      	cmp	r3, #0
 8001440:	d108      	bne.n	8001454 <I2C_address_direction+0x34>
	{
		while (!I2C_CheckEvent(I2Cx_SENSOR,
 8001442:	bf00      	nop
 8001444:	490c      	ldr	r1, [pc, #48]	; (8001478 <I2C_address_direction+0x58>)
 8001446:	480b      	ldr	r0, [pc, #44]	; (8001474 <I2C_address_direction+0x54>)
 8001448:	f001 f916 	bl	8002678 <I2C_CheckEvent>
 800144c:	4603      	mov	r3, r0
 800144e:	2b00      	cmp	r3, #0
 8001450:	d0f8      	beq.n	8001444 <I2C_address_direction+0x24>
	{
		while (!I2C_CheckEvent(I2Cx_SENSOR,
				I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED))
			;
	}
}
 8001452:	e00a      	b.n	800146a <I2C_address_direction+0x4a>
	} else if (direction == I2C_Direction_Receiver)  // nhận
 8001454:	79bb      	ldrb	r3, [r7, #6]
 8001456:	2b01      	cmp	r3, #1
 8001458:	d107      	bne.n	800146a <I2C_address_direction+0x4a>
		while (!I2C_CheckEvent(I2Cx_SENSOR,
 800145a:	bf00      	nop
 800145c:	4907      	ldr	r1, [pc, #28]	; (800147c <I2C_address_direction+0x5c>)
 800145e:	4805      	ldr	r0, [pc, #20]	; (8001474 <I2C_address_direction+0x54>)
 8001460:	f001 f90a 	bl	8002678 <I2C_CheckEvent>
 8001464:	4603      	mov	r3, r0
 8001466:	2b00      	cmp	r3, #0
 8001468:	d0f8      	beq.n	800145c <I2C_address_direction+0x3c>
}
 800146a:	bf00      	nop
 800146c:	3708      	adds	r7, #8
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	40005400 	.word	0x40005400
 8001478:	00070082 	.word	0x00070082
 800147c:	00030002 	.word	0x00030002

08001480 <I2C_transmit>:
 * @func    I2C_transmit
 * @brief   Transmit one byte to I2C bus
 * @param   None
 * @retval  None
 */
void I2C_transmit(uint8_t byte) {
 8001480:	b580      	push	{r7, lr}
 8001482:	b082      	sub	sp, #8
 8001484:	af00      	add	r7, sp, #0
 8001486:	4603      	mov	r3, r0
 8001488:	71fb      	strb	r3, [r7, #7]
	// Send data byte
	I2C_SendData(I2Cx_SENSOR, byte);
 800148a:	79fb      	ldrb	r3, [r7, #7]
 800148c:	4619      	mov	r1, r3
 800148e:	4808      	ldr	r0, [pc, #32]	; (80014b0 <I2C_transmit+0x30>)
 8001490:	f001 f8d4 	bl	800263c <I2C_SendData>
	// Wait for I2C EV8_2.
	// It means that the data has been physically shifted out and
	// output on the bus)
	while (!I2C_CheckEvent(I2Cx_SENSOR, I2C_EVENT_MASTER_BYTE_TRANSMITTED))
 8001494:	bf00      	nop
 8001496:	4907      	ldr	r1, [pc, #28]	; (80014b4 <I2C_transmit+0x34>)
 8001498:	4805      	ldr	r0, [pc, #20]	; (80014b0 <I2C_transmit+0x30>)
 800149a:	f001 f8ed 	bl	8002678 <I2C_CheckEvent>
 800149e:	4603      	mov	r3, r0
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d0f8      	beq.n	8001496 <I2C_transmit+0x16>
		;
}
 80014a4:	bf00      	nop
 80014a6:	bf00      	nop
 80014a8:	3708      	adds	r7, #8
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	40005400 	.word	0x40005400
 80014b4:	00070084 	.word	0x00070084

080014b8 <I2C_stop>:
 * @func    I2C_stop
 * @brief   Generate I2C stop condition
 * @param   None
 * @retval  None
 */
void I2C_stop(void) {
 80014b8:	b580      	push	{r7, lr}
 80014ba:	af00      	add	r7, sp, #0
	// Generate I2C stop condition
	I2C_GenerateSTOP(I2Cx_SENSOR, ENABLE);
 80014bc:	2101      	movs	r1, #1
 80014be:	4802      	ldr	r0, [pc, #8]	; (80014c8 <I2C_stop+0x10>)
 80014c0:	f001 f85e 	bl	8002580 <I2C_GenerateSTOP>
}
 80014c4:	bf00      	nop
 80014c6:	bd80      	pop	{r7, pc}
 80014c8:	40005400 	.word	0x40005400

080014cc <I2C_receive_nack>:
 * @func    I2C_receive_nack
 * @brief   receive data
 * @param   None
 * @retval  None
 */
uint8_t I2C_receive_nack(void) {
 80014cc:	b580      	push	{r7, lr}
 80014ce:	af00      	add	r7, sp, #0
	// Disable ACK of received data
	I2C_AcknowledgeConfig(I2Cx_SENSOR, DISABLE);
 80014d0:	2100      	movs	r1, #0
 80014d2:	4808      	ldr	r0, [pc, #32]	; (80014f4 <I2C_receive_nack+0x28>)
 80014d4:	f001 f892 	bl	80025fc <I2C_AcknowledgeConfig>
	// Wait for I2C EV7
	// It means that the data has been received in I2C data register
	while (!I2C_CheckEvent(I2Cx_SENSOR, I2C_EVENT_MASTER_BYTE_RECEIVED))
 80014d8:	bf00      	nop
 80014da:	4907      	ldr	r1, [pc, #28]	; (80014f8 <I2C_receive_nack+0x2c>)
 80014dc:	4805      	ldr	r0, [pc, #20]	; (80014f4 <I2C_receive_nack+0x28>)
 80014de:	f001 f8cb 	bl	8002678 <I2C_CheckEvent>
 80014e2:	4603      	mov	r3, r0
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d0f8      	beq.n	80014da <I2C_receive_nack+0xe>
		;

	// Read and return data byte from I2C data register
	return I2C_ReceiveData(I2Cx_SENSOR);
 80014e8:	4802      	ldr	r0, [pc, #8]	; (80014f4 <I2C_receive_nack+0x28>)
 80014ea:	f001 f8b7 	bl	800265c <I2C_ReceiveData>
 80014ee:	4603      	mov	r3, r0
}
 80014f0:	4618      	mov	r0, r3
 80014f2:	bd80      	pop	{r7, pc}
 80014f4:	40005400 	.word	0x40005400
 80014f8:	00030040 	.word	0x00030040

080014fc <I2C_receive_ack>:
 * @func    I2C_receive_ack
 * @brief   receive data
 * @param   None
 * @retval  None
 */
uint8_t I2C_receive_ack(void) {
 80014fc:	b580      	push	{r7, lr}
 80014fe:	af00      	add	r7, sp, #0
	// Enable ACK of received data
	I2C_AcknowledgeConfig(I2Cx_SENSOR, ENABLE);
 8001500:	2101      	movs	r1, #1
 8001502:	4808      	ldr	r0, [pc, #32]	; (8001524 <I2C_receive_ack+0x28>)
 8001504:	f001 f87a 	bl	80025fc <I2C_AcknowledgeConfig>
	// Wait for I2C EV7
	// It means that the data has been received in I2C data register
	while (!I2C_CheckEvent(I2Cx_SENSOR, I2C_EVENT_MASTER_BYTE_RECEIVED))
 8001508:	bf00      	nop
 800150a:	4907      	ldr	r1, [pc, #28]	; (8001528 <I2C_receive_ack+0x2c>)
 800150c:	4805      	ldr	r0, [pc, #20]	; (8001524 <I2C_receive_ack+0x28>)
 800150e:	f001 f8b3 	bl	8002678 <I2C_CheckEvent>
 8001512:	4603      	mov	r3, r0
 8001514:	2b00      	cmp	r3, #0
 8001516:	d0f8      	beq.n	800150a <I2C_receive_ack+0xe>
		;

	// Read and return data byte from I2C data register
	return I2C_ReceiveData(I2Cx_SENSOR);
 8001518:	4802      	ldr	r0, [pc, #8]	; (8001524 <I2C_receive_ack+0x28>)
 800151a:	f001 f89f 	bl	800265c <I2C_ReceiveData>
 800151e:	4603      	mov	r3, r0
}
 8001520:	4618      	mov	r0, r3
 8001522:	bd80      	pop	{r7, pc}
 8001524:	40005400 	.word	0x40005400
 8001528:	00030040 	.word	0x00030040

0800152c <TemHumSensor_readRegister>:
static void TemHumSensor_readRegister(uint8_t address,	// Địa chỉ cảm biến.
		uint8_t *pAddressRegister, // Địa chỉ của thanh ghi chứa dữ liệu nhiệt độ, độ ẩm.
		uint8_t *pDataRegister, // Dữ liệu đọc được từ thanh ghi tương ứng.
		uint8_t Length_Data, //Độ dài Dữ liệu đọc được từ thanh ghi tương ứng.
		uint16_t delay)	//Dữ liệu đọc được từ thanh ghi tương ứng.
{
 800152c:	b590      	push	{r4, r7, lr}
 800152e:	b087      	sub	sp, #28
 8001530:	af00      	add	r7, sp, #0
 8001532:	60b9      	str	r1, [r7, #8]
 8001534:	607a      	str	r2, [r7, #4]
 8001536:	461a      	mov	r2, r3
 8001538:	4603      	mov	r3, r0
 800153a:	73fb      	strb	r3, [r7, #15]
 800153c:	4613      	mov	r3, r2
 800153e:	73bb      	strb	r3, [r7, #14]
	uint8_t LengthCmd = pAddressRegister[0];
 8001540:	68bb      	ldr	r3, [r7, #8]
 8001542:	781b      	ldrb	r3, [r3, #0]
 8001544:	757b      	strb	r3, [r7, #21]

	I2C_start();	// conditon start
 8001546:	f7ff ff4d 	bl	80013e4 <I2C_start>
	I2C_address_direction(address << 1, I2C_Direction_Transmitter); // send slave address - Transmit
 800154a:	7bfb      	ldrb	r3, [r7, #15]
 800154c:	005b      	lsls	r3, r3, #1
 800154e:	b2db      	uxtb	r3, r3
 8001550:	2100      	movs	r1, #0
 8001552:	4618      	mov	r0, r3
 8001554:	f7ff ff64 	bl	8001420 <I2C_address_direction>

	for (uint8_t i = 1; i < LengthCmd; i++) {
 8001558:	2301      	movs	r3, #1
 800155a:	75fb      	strb	r3, [r7, #23]
 800155c:	e009      	b.n	8001572 <TemHumSensor_readRegister+0x46>
		I2C_transmit(pAddressRegister[i]);		// Send Data from register
 800155e:	7dfb      	ldrb	r3, [r7, #23]
 8001560:	68ba      	ldr	r2, [r7, #8]
 8001562:	4413      	add	r3, r2
 8001564:	781b      	ldrb	r3, [r3, #0]
 8001566:	4618      	mov	r0, r3
 8001568:	f7ff ff8a 	bl	8001480 <I2C_transmit>
	for (uint8_t i = 1; i < LengthCmd; i++) {
 800156c:	7dfb      	ldrb	r3, [r7, #23]
 800156e:	3301      	adds	r3, #1
 8001570:	75fb      	strb	r3, [r7, #23]
 8001572:	7dfa      	ldrb	r2, [r7, #23]
 8001574:	7d7b      	ldrb	r3, [r7, #21]
 8001576:	429a      	cmp	r2, r3
 8001578:	d3f1      	bcc.n	800155e <TemHumSensor_readRegister+0x32>
	}

	if (delay > 0) {
 800157a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800157c:	2b00      	cmp	r3, #0
 800157e:	d003      	beq.n	8001588 <TemHumSensor_readRegister+0x5c>
		delay_ms(delay);
 8001580:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001582:	4618      	mov	r0, r3
 8001584:	f7ff fe82 	bl	800128c <delay_ms>
	}

	I2C_stop();		// condition stop
 8001588:	f7ff ff96 	bl	80014b8 <I2C_stop>

	I2C_start(); // condition start
 800158c:	f7ff ff2a 	bl	80013e4 <I2C_start>
	I2C_address_direction(address << 1, I2C_Direction_Receiver); // send slave address - Received
 8001590:	7bfb      	ldrb	r3, [r7, #15]
 8001592:	005b      	lsls	r3, r3, #1
 8001594:	b2db      	uxtb	r3, r3
 8001596:	2101      	movs	r1, #1
 8001598:	4618      	mov	r0, r3
 800159a:	f7ff ff41 	bl	8001420 <I2C_address_direction>

	for (uint8_t i = 0; i < Length_Data; i++) {
 800159e:	2300      	movs	r3, #0
 80015a0:	75bb      	strb	r3, [r7, #22]
 80015a2:	e016      	b.n	80015d2 <TemHumSensor_readRegister+0xa6>
		if (i == (Length_Data - 1)) {
 80015a4:	7dba      	ldrb	r2, [r7, #22]
 80015a6:	7bbb      	ldrb	r3, [r7, #14]
 80015a8:	3b01      	subs	r3, #1
 80015aa:	429a      	cmp	r2, r3
 80015ac:	d107      	bne.n	80015be <TemHumSensor_readRegister+0x92>
			pDataRegister[i] = I2C_receive_nack();  // 	NA
 80015ae:	7dbb      	ldrb	r3, [r7, #22]
 80015b0:	687a      	ldr	r2, [r7, #4]
 80015b2:	18d4      	adds	r4, r2, r3
 80015b4:	f7ff ff8a 	bl	80014cc <I2C_receive_nack>
 80015b8:	4603      	mov	r3, r0
 80015ba:	7023      	strb	r3, [r4, #0]
 80015bc:	e006      	b.n	80015cc <TemHumSensor_readRegister+0xa0>
		} else {
			pDataRegister[i] = I2C_receive_ack();   // A
 80015be:	7dbb      	ldrb	r3, [r7, #22]
 80015c0:	687a      	ldr	r2, [r7, #4]
 80015c2:	18d4      	adds	r4, r2, r3
 80015c4:	f7ff ff9a 	bl	80014fc <I2C_receive_ack>
 80015c8:	4603      	mov	r3, r0
 80015ca:	7023      	strb	r3, [r4, #0]
	for (uint8_t i = 0; i < Length_Data; i++) {
 80015cc:	7dbb      	ldrb	r3, [r7, #22]
 80015ce:	3301      	adds	r3, #1
 80015d0:	75bb      	strb	r3, [r7, #22]
 80015d2:	7dba      	ldrb	r2, [r7, #22]
 80015d4:	7bbb      	ldrb	r3, [r7, #14]
 80015d6:	429a      	cmp	r2, r3
 80015d8:	d3e4      	bcc.n	80015a4 <TemHumSensor_readRegister+0x78>
		}
	}
	I2C_stop();
 80015da:	f7ff ff6d 	bl	80014b8 <I2C_stop>

}
 80015de:	bf00      	nop
 80015e0:	371c      	adds	r7, #28
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd90      	pop	{r4, r7, pc}
	...

080015e8 <GetTemp_Sensor>:
 * @func    GetTemp_Sensor
 * @brief   Get value temperature
 * @param   None
 * @retval  Temperature
 */
uint32_t GetTemp_Sensor(void) {
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b086      	sub	sp, #24
 80015ec:	af02      	add	r7, sp, #8
	uint32_t RT;
	uint8_t pRT[3] = { 0 };	// pRT[0]: MSB		pRT[1]: LSB
 80015ee:	4b15      	ldr	r3, [pc, #84]	; (8001644 <GetTemp_Sensor+0x5c>)
 80015f0:	881b      	ldrh	r3, [r3, #0]
 80015f2:	813b      	strh	r3, [r7, #8]
 80015f4:	2300      	movs	r3, #0
 80015f6:	72bb      	strb	r3, [r7, #10]

	uint8_t CMD_MEASURE_TEMP[2] = { 2, 0xE3 }; // gửi độ dài byte cần truyền và CMD_MEASURE chế độ HOLD MASTER MODE
 80015f8:	f24e 3302 	movw	r3, #58114	; 0xe302
 80015fc:	80bb      	strh	r3, [r7, #4]

	TemHumSensor_readRegister(SI7020_ADDR, CMD_MEASURE_TEMP, pRT, 3, 4);
 80015fe:	f107 0208 	add.w	r2, r7, #8
 8001602:	1d39      	adds	r1, r7, #4
 8001604:	2304      	movs	r3, #4
 8001606:	9300      	str	r3, [sp, #0]
 8001608:	2303      	movs	r3, #3
 800160a:	2040      	movs	r0, #64	; 0x40
 800160c:	f7ff ff8e 	bl	800152c <TemHumSensor_readRegister>

	RT = (pRT[0] << 8) + pRT[1];// RT_CODE (MSB << 8) + LSB		// Temp = ((17572* RT)/(0xFFu +1) - 4685)/100
 8001610:	7a3b      	ldrb	r3, [r7, #8]
 8001612:	021b      	lsls	r3, r3, #8
 8001614:	7a7a      	ldrb	r2, [r7, #9]
 8001616:	4413      	add	r3, r2
 8001618:	60fb      	str	r3, [r7, #12]
	RT = ((RT * 17572) >> 16) - 4685;
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	f244 42a4 	movw	r2, #17572	; 0x44a4
 8001620:	fb02 f303 	mul.w	r3, r2, r3
 8001624:	0c1b      	lsrs	r3, r3, #16
 8001626:	f5a3 5392 	sub.w	r3, r3, #4672	; 0x1240
 800162a:	3b0d      	subs	r3, #13
 800162c:	60fb      	str	r3, [r7, #12]
	RT = RT / 100;
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	4a05      	ldr	r2, [pc, #20]	; (8001648 <GetTemp_Sensor+0x60>)
 8001632:	fba2 2303 	umull	r2, r3, r2, r3
 8001636:	095b      	lsrs	r3, r3, #5
 8001638:	60fb      	str	r3, [r7, #12]
	return RT;
 800163a:	68fb      	ldr	r3, [r7, #12]
}
 800163c:	4618      	mov	r0, r3
 800163e:	3710      	adds	r7, #16
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}
 8001644:	08005ec8 	.word	0x08005ec8
 8001648:	51eb851f 	.word	0x51eb851f

0800164c <GetHumi_Sensor>:
 * @func    GetHumi_Sensor
 * @brief   Get value humidity
 * @param   None
 * @retval  Humidity
 */
uint32_t GetHumi_Sensor(void) {
 800164c:	b580      	push	{r7, lr}
 800164e:	b086      	sub	sp, #24
 8001650:	af02      	add	r7, sp, #8
	uint32_t RH;
	uint8_t pRH[3] = { 0 };
 8001652:	4b15      	ldr	r3, [pc, #84]	; (80016a8 <GetHumi_Sensor+0x5c>)
 8001654:	881b      	ldrh	r3, [r3, #0]
 8001656:	813b      	strh	r3, [r7, #8]
 8001658:	2300      	movs	r3, #0
 800165a:	72bb      	strb	r3, [r7, #10]

	uint8_t CMD_MEASURE_HUMI[2] = { 2, 0xE5 }; // gửi độ dài byte cần truyền và CMD_MEASURE chế độ HOLD MASTER MODE
 800165c:	f24e 5302 	movw	r3, #58626	; 0xe502
 8001660:	80bb      	strh	r3, [r7, #4]

	TemHumSensor_readRegister(SI7020_ADDR, CMD_MEASURE_HUMI, pRH, 3, 8);
 8001662:	f107 0208 	add.w	r2, r7, #8
 8001666:	1d39      	adds	r1, r7, #4
 8001668:	2308      	movs	r3, #8
 800166a:	9300      	str	r3, [sp, #0]
 800166c:	2303      	movs	r3, #3
 800166e:	2040      	movs	r0, #64	; 0x40
 8001670:	f7ff ff5c 	bl	800152c <TemHumSensor_readRegister>

	RH = (pRH[0] << 8) + pRH[1]; // RH_CODE (MSB << 8) + LSB
 8001674:	7a3b      	ldrb	r3, [r7, #8]
 8001676:	021b      	lsls	r3, r3, #8
 8001678:	7a7a      	ldrb	r2, [r7, #9]
 800167a:	4413      	add	r3, r2
 800167c:	60fb      	str	r3, [r7, #12]
	RH = ((RH * 12500) >> 16) - 600;
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	f243 02d4 	movw	r2, #12500	; 0x30d4
 8001684:	fb02 f303 	mul.w	r3, r2, r3
 8001688:	0c1b      	lsrs	r3, r3, #16
 800168a:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800168e:	60fb      	str	r3, [r7, #12]
	RH = RH / 100;
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	4a06      	ldr	r2, [pc, #24]	; (80016ac <GetHumi_Sensor+0x60>)
 8001694:	fba2 2303 	umull	r2, r3, r2, r3
 8001698:	095b      	lsrs	r3, r3, #5
 800169a:	60fb      	str	r3, [r7, #12]

	return RH;
 800169c:	68fb      	ldr	r3, [r7, #12]
}
 800169e:	4618      	mov	r0, r3
 80016a0:	3710      	adds	r7, #16
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	08005ec8 	.word	0x08005ec8
 80016ac:	51eb851f 	.word	0x51eb851f

080016b0 <processGetValueSensor>:
 * @func 	processGetValueSensor
 * @brief	Get value sensor
 * @param	None
 * @retval	None
 */
void processGetValueSensor(void) {
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b082      	sub	sp, #8
 80016b4:	af02      	add	r7, sp, #8
	// Get timer
	time_current = GetMilSecTick();
 80016b6:	f001 fa8b 	bl	8002bd0 <GetMilSecTick>
 80016ba:	4603      	mov	r3, r0
 80016bc:	4a58      	ldr	r2, [pc, #352]	; (8001820 <processGetValueSensor+0x170>)
 80016be:	6013      	str	r3, [r2, #0]

	if (time_current >= time_initial) {
 80016c0:	4b57      	ldr	r3, [pc, #348]	; (8001820 <processGetValueSensor+0x170>)
 80016c2:	681a      	ldr	r2, [r3, #0]
 80016c4:	4b57      	ldr	r3, [pc, #348]	; (8001824 <processGetValueSensor+0x174>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	429a      	cmp	r2, r3
 80016ca:	d30a      	bcc.n	80016e2 <processGetValueSensor+0x32>
		time_total += time_current - time_initial;
 80016cc:	4b54      	ldr	r3, [pc, #336]	; (8001820 <processGetValueSensor+0x170>)
 80016ce:	681a      	ldr	r2, [r3, #0]
 80016d0:	4b54      	ldr	r3, [pc, #336]	; (8001824 <processGetValueSensor+0x174>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	1ad2      	subs	r2, r2, r3
 80016d6:	4b54      	ldr	r3, [pc, #336]	; (8001828 <processGetValueSensor+0x178>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	4413      	add	r3, r2
 80016dc:	4a52      	ldr	r2, [pc, #328]	; (8001828 <processGetValueSensor+0x178>)
 80016de:	6013      	str	r3, [r2, #0]
 80016e0:	e00a      	b.n	80016f8 <processGetValueSensor+0x48>
	} else {
		time_total += 0xFFFFFFFFU - time_current + time_initial;
 80016e2:	4b50      	ldr	r3, [pc, #320]	; (8001824 <processGetValueSensor+0x174>)
 80016e4:	681a      	ldr	r2, [r3, #0]
 80016e6:	4b4e      	ldr	r3, [pc, #312]	; (8001820 <processGetValueSensor+0x170>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	1ad2      	subs	r2, r2, r3
 80016ec:	4b4e      	ldr	r3, [pc, #312]	; (8001828 <processGetValueSensor+0x178>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4413      	add	r3, r2
 80016f2:	3b01      	subs	r3, #1
 80016f4:	4a4c      	ldr	r2, [pc, #304]	; (8001828 <processGetValueSensor+0x178>)
 80016f6:	6013      	str	r3, [r2, #0]
	}
	if (time_total == CYCLE_SEND_DATA_1) {
 80016f8:	4b4b      	ldr	r3, [pc, #300]	; (8001828 <processGetValueSensor+0x178>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001700:	d10b      	bne.n	800171a <processGetValueSensor+0x6a>
		//Dùng để đọc giá trị nhiệt độ trả về từ cảm biến thông qua giao tiếp I2C.
		temperature = (uint8_t) (GetTemp_Sensor());
 8001702:	f7ff ff71 	bl	80015e8 <GetTemp_Sensor>
 8001706:	4603      	mov	r3, r0
 8001708:	b2da      	uxtb	r2, r3
 800170a:	4b48      	ldr	r3, [pc, #288]	; (800182c <processGetValueSensor+0x17c>)
 800170c:	701a      	strb	r2, [r3, #0]

		//Dùng để đọc giá trị độ ẩm trả về từ cảm biến thông qua giao tiếp I2C.
		humidity = (uint8_t) (GetHumi_Sensor());
 800170e:	f7ff ff9d 	bl	800164c <GetHumi_Sensor>
 8001712:	4603      	mov	r3, r0
 8001714:	b2da      	uxtb	r2, r3
 8001716:	4b46      	ldr	r3, [pc, #280]	; (8001830 <processGetValueSensor+0x180>)
 8001718:	701a      	strb	r2, [r3, #0]

	}
	if (time_total >= CYCLE_SEND_DATA_2) {
 800171a:	4b43      	ldr	r3, [pc, #268]	; (8001828 <processGetValueSensor+0x178>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001722:	d376      	bcc.n	8001812 <processGetValueSensor+0x162>
		temperature1 = (uint8_t) (GetTemp_Sensor());
 8001724:	f7ff ff60 	bl	80015e8 <GetTemp_Sensor>
 8001728:	4603      	mov	r3, r0
 800172a:	b2da      	uxtb	r2, r3
 800172c:	4b41      	ldr	r3, [pc, #260]	; (8001834 <processGetValueSensor+0x184>)
 800172e:	701a      	strb	r2, [r3, #0]

		humidity1 = (uint8_t) (GetHumi_Sensor());
 8001730:	f7ff ff8c 	bl	800164c <GetHumi_Sensor>
 8001734:	4603      	mov	r3, r0
 8001736:	b2da      	uxtb	r2, r3
 8001738:	4b3f      	ldr	r3, [pc, #252]	; (8001838 <processGetValueSensor+0x188>)
 800173a:	701a      	strb	r2, [r3, #0]

		// nếu thời gian chênh lệch giữa lần đo 1 và lần đo 2 là 2 thì sẽ cập nhật giá trị sensor
		if (((temperature1 > temperature) && (temperature1 - temperature >= 2))
 800173c:	4b3d      	ldr	r3, [pc, #244]	; (8001834 <processGetValueSensor+0x184>)
 800173e:	781a      	ldrb	r2, [r3, #0]
 8001740:	4b3a      	ldr	r3, [pc, #232]	; (800182c <processGetValueSensor+0x17c>)
 8001742:	781b      	ldrb	r3, [r3, #0]
 8001744:	429a      	cmp	r2, r3
 8001746:	d907      	bls.n	8001758 <processGetValueSensor+0xa8>
 8001748:	4b3a      	ldr	r3, [pc, #232]	; (8001834 <processGetValueSensor+0x184>)
 800174a:	781b      	ldrb	r3, [r3, #0]
 800174c:	461a      	mov	r2, r3
 800174e:	4b37      	ldr	r3, [pc, #220]	; (800182c <processGetValueSensor+0x17c>)
 8001750:	781b      	ldrb	r3, [r3, #0]
 8001752:	1ad3      	subs	r3, r2, r3
 8001754:	2b01      	cmp	r3, #1
 8001756:	dc29      	bgt.n	80017ac <processGetValueSensor+0xfc>
				|| ((temperature1 < temperature)
 8001758:	4b36      	ldr	r3, [pc, #216]	; (8001834 <processGetValueSensor+0x184>)
 800175a:	781a      	ldrb	r2, [r3, #0]
 800175c:	4b33      	ldr	r3, [pc, #204]	; (800182c <processGetValueSensor+0x17c>)
 800175e:	781b      	ldrb	r3, [r3, #0]
 8001760:	429a      	cmp	r2, r3
 8001762:	d207      	bcs.n	8001774 <processGetValueSensor+0xc4>
						&& (temperature1 - temperature <= 2))
 8001764:	4b33      	ldr	r3, [pc, #204]	; (8001834 <processGetValueSensor+0x184>)
 8001766:	781b      	ldrb	r3, [r3, #0]
 8001768:	461a      	mov	r2, r3
 800176a:	4b30      	ldr	r3, [pc, #192]	; (800182c <processGetValueSensor+0x17c>)
 800176c:	781b      	ldrb	r3, [r3, #0]
 800176e:	1ad3      	subs	r3, r2, r3
 8001770:	2b02      	cmp	r3, #2
 8001772:	dd1b      	ble.n	80017ac <processGetValueSensor+0xfc>
				|| ((humidity1 > humidity) && (humidity1 - humidity >= 2))
 8001774:	4b30      	ldr	r3, [pc, #192]	; (8001838 <processGetValueSensor+0x188>)
 8001776:	781a      	ldrb	r2, [r3, #0]
 8001778:	4b2d      	ldr	r3, [pc, #180]	; (8001830 <processGetValueSensor+0x180>)
 800177a:	781b      	ldrb	r3, [r3, #0]
 800177c:	429a      	cmp	r2, r3
 800177e:	d907      	bls.n	8001790 <processGetValueSensor+0xe0>
 8001780:	4b2d      	ldr	r3, [pc, #180]	; (8001838 <processGetValueSensor+0x188>)
 8001782:	781b      	ldrb	r3, [r3, #0]
 8001784:	461a      	mov	r2, r3
 8001786:	4b2a      	ldr	r3, [pc, #168]	; (8001830 <processGetValueSensor+0x180>)
 8001788:	781b      	ldrb	r3, [r3, #0]
 800178a:	1ad3      	subs	r3, r2, r3
 800178c:	2b01      	cmp	r3, #1
 800178e:	dc0d      	bgt.n	80017ac <processGetValueSensor+0xfc>
				|| ((humidity1 < humidity) && (humidity1 - humidity <= 2))) {
 8001790:	4b29      	ldr	r3, [pc, #164]	; (8001838 <processGetValueSensor+0x188>)
 8001792:	781a      	ldrb	r2, [r3, #0]
 8001794:	4b26      	ldr	r3, [pc, #152]	; (8001830 <processGetValueSensor+0x180>)
 8001796:	781b      	ldrb	r3, [r3, #0]
 8001798:	429a      	cmp	r2, r3
 800179a:	d237      	bcs.n	800180c <processGetValueSensor+0x15c>
 800179c:	4b26      	ldr	r3, [pc, #152]	; (8001838 <processGetValueSensor+0x188>)
 800179e:	781b      	ldrb	r3, [r3, #0]
 80017a0:	461a      	mov	r2, r3
 80017a2:	4b23      	ldr	r3, [pc, #140]	; (8001830 <processGetValueSensor+0x180>)
 80017a4:	781b      	ldrb	r3, [r3, #0]
 80017a6:	1ad3      	subs	r3, r2, r3
 80017a8:	2b02      	cmp	r3, #2
 80017aa:	dc2f      	bgt.n	800180c <processGetValueSensor+0x15c>
			ucg_DrawString(&ucg, 0, 32, 0, "Nhom 2");
 80017ac:	4b23      	ldr	r3, [pc, #140]	; (800183c <processGetValueSensor+0x18c>)
 80017ae:	9300      	str	r3, [sp, #0]
 80017b0:	2300      	movs	r3, #0
 80017b2:	2220      	movs	r2, #32
 80017b4:	2100      	movs	r1, #0
 80017b6:	4822      	ldr	r0, [pc, #136]	; (8001840 <processGetValueSensor+0x190>)
 80017b8:	f002 fd80 	bl	80042bc <ucg_DrawString>
			memset(src1, 0, sizeof(src1));
 80017bc:	2214      	movs	r2, #20
 80017be:	2100      	movs	r1, #0
 80017c0:	4820      	ldr	r0, [pc, #128]	; (8001844 <processGetValueSensor+0x194>)
 80017c2:	f003 fef1 	bl	80055a8 <memset>
			sprintf(src1, " Temp = %d oC  ", temperature1);
 80017c6:	4b1b      	ldr	r3, [pc, #108]	; (8001834 <processGetValueSensor+0x184>)
 80017c8:	781b      	ldrb	r3, [r3, #0]
 80017ca:	461a      	mov	r2, r3
 80017cc:	491e      	ldr	r1, [pc, #120]	; (8001848 <processGetValueSensor+0x198>)
 80017ce:	481d      	ldr	r0, [pc, #116]	; (8001844 <processGetValueSensor+0x194>)
 80017d0:	f003 feca 	bl	8005568 <siprintf>
			ucg_DrawString(&ucg, 0, 52, 0, src1);
 80017d4:	4b1b      	ldr	r3, [pc, #108]	; (8001844 <processGetValueSensor+0x194>)
 80017d6:	9300      	str	r3, [sp, #0]
 80017d8:	2300      	movs	r3, #0
 80017da:	2234      	movs	r2, #52	; 0x34
 80017dc:	2100      	movs	r1, #0
 80017de:	4818      	ldr	r0, [pc, #96]	; (8001840 <processGetValueSensor+0x190>)
 80017e0:	f002 fd6c 	bl	80042bc <ucg_DrawString>

			memset(src2, 0, sizeof(src2));
 80017e4:	2214      	movs	r2, #20
 80017e6:	2100      	movs	r1, #0
 80017e8:	4818      	ldr	r0, [pc, #96]	; (800184c <processGetValueSensor+0x19c>)
 80017ea:	f003 fedd 	bl	80055a8 <memset>
			sprintf(src2, " Humi = %3d %%   ", humidity1);
 80017ee:	4b12      	ldr	r3, [pc, #72]	; (8001838 <processGetValueSensor+0x188>)
 80017f0:	781b      	ldrb	r3, [r3, #0]
 80017f2:	461a      	mov	r2, r3
 80017f4:	4916      	ldr	r1, [pc, #88]	; (8001850 <processGetValueSensor+0x1a0>)
 80017f6:	4815      	ldr	r0, [pc, #84]	; (800184c <processGetValueSensor+0x19c>)
 80017f8:	f003 feb6 	bl	8005568 <siprintf>
			ucg_DrawString(&ucg, 0, 72, 0, src2);
 80017fc:	4b13      	ldr	r3, [pc, #76]	; (800184c <processGetValueSensor+0x19c>)
 80017fe:	9300      	str	r3, [sp, #0]
 8001800:	2300      	movs	r3, #0
 8001802:	2248      	movs	r2, #72	; 0x48
 8001804:	2100      	movs	r1, #0
 8001806:	480e      	ldr	r0, [pc, #56]	; (8001840 <processGetValueSensor+0x190>)
 8001808:	f002 fd58 	bl	80042bc <ucg_DrawString>
		}

		time_total = 0;
 800180c:	4b06      	ldr	r3, [pc, #24]	; (8001828 <processGetValueSensor+0x178>)
 800180e:	2200      	movs	r2, #0
 8001810:	601a      	str	r2, [r3, #0]
		// Reset lại biến thời gian sau quá trình đọc giá trị nhiệt độ - độ ẩm.

	}
	time_initial = time_current;
 8001812:	4b03      	ldr	r3, [pc, #12]	; (8001820 <processGetValueSensor+0x170>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	4a03      	ldr	r2, [pc, #12]	; (8001824 <processGetValueSensor+0x174>)
 8001818:	6013      	str	r3, [r2, #0]
}
 800181a:	bf00      	nop
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}
 8001820:	20000164 	.word	0x20000164
 8001824:	20000160 	.word	0x20000160
 8001828:	200001d0 	.word	0x200001d0
 800182c:	200001d4 	.word	0x200001d4
 8001830:	200001d5 	.word	0x200001d5
 8001834:	200001d6 	.word	0x200001d6
 8001838:	200001d7 	.word	0x200001d7
 800183c:	08005ecc 	.word	0x08005ecc
 8001840:	200000ac 	.word	0x200000ac
 8001844:	2000016c 	.word	0x2000016c
 8001848:	08005ed4 	.word	0x08005ed4
 800184c:	20000180 	.word	0x20000180
 8001850:	08005ee4 	.word	0x08005ee4

08001854 <Scan_SensorLCD>:
 * @func 	Scan_SensorLCD
 * @brief	Scan display value sensor
 * @param	None
 * @retval	None
 */
void Scan_SensorLCD(void) {
 8001854:	b580      	push	{r7, lr}
 8001856:	b082      	sub	sp, #8
 8001858:	af02      	add	r7, sp, #8
	ucg_DrawString(&ucg, 0, 32, 0, "Nhom 2");
 800185a:	4b19      	ldr	r3, [pc, #100]	; (80018c0 <Scan_SensorLCD+0x6c>)
 800185c:	9300      	str	r3, [sp, #0]
 800185e:	2300      	movs	r3, #0
 8001860:	2220      	movs	r2, #32
 8001862:	2100      	movs	r1, #0
 8001864:	4817      	ldr	r0, [pc, #92]	; (80018c4 <Scan_SensorLCD+0x70>)
 8001866:	f002 fd29 	bl	80042bc <ucg_DrawString>
	memset(src3, 0, sizeof(src3));
 800186a:	2214      	movs	r2, #20
 800186c:	2100      	movs	r1, #0
 800186e:	4816      	ldr	r0, [pc, #88]	; (80018c8 <Scan_SensorLCD+0x74>)
 8001870:	f003 fe9a 	bl	80055a8 <memset>
	sprintf(src3, " Nhiet do = %d oC  ", temperature);
 8001874:	4b15      	ldr	r3, [pc, #84]	; (80018cc <Scan_SensorLCD+0x78>)
 8001876:	781b      	ldrb	r3, [r3, #0]
 8001878:	461a      	mov	r2, r3
 800187a:	4915      	ldr	r1, [pc, #84]	; (80018d0 <Scan_SensorLCD+0x7c>)
 800187c:	4812      	ldr	r0, [pc, #72]	; (80018c8 <Scan_SensorLCD+0x74>)
 800187e:	f003 fe73 	bl	8005568 <siprintf>
	ucg_DrawString(&ucg, 0, 52, 0, src3);
 8001882:	4b11      	ldr	r3, [pc, #68]	; (80018c8 <Scan_SensorLCD+0x74>)
 8001884:	9300      	str	r3, [sp, #0]
 8001886:	2300      	movs	r3, #0
 8001888:	2234      	movs	r2, #52	; 0x34
 800188a:	2100      	movs	r1, #0
 800188c:	480d      	ldr	r0, [pc, #52]	; (80018c4 <Scan_SensorLCD+0x70>)
 800188e:	f002 fd15 	bl	80042bc <ucg_DrawString>

	memset(src4, 0, sizeof(src4));
 8001892:	2214      	movs	r2, #20
 8001894:	2100      	movs	r1, #0
 8001896:	480f      	ldr	r0, [pc, #60]	; (80018d4 <Scan_SensorLCD+0x80>)
 8001898:	f003 fe86 	bl	80055a8 <memset>
	sprintf(src4, " Do am = %3d %%   ", humidity);
 800189c:	4b0e      	ldr	r3, [pc, #56]	; (80018d8 <Scan_SensorLCD+0x84>)
 800189e:	781b      	ldrb	r3, [r3, #0]
 80018a0:	461a      	mov	r2, r3
 80018a2:	490e      	ldr	r1, [pc, #56]	; (80018dc <Scan_SensorLCD+0x88>)
 80018a4:	480b      	ldr	r0, [pc, #44]	; (80018d4 <Scan_SensorLCD+0x80>)
 80018a6:	f003 fe5f 	bl	8005568 <siprintf>
	ucg_DrawString(&ucg, 0, 72, 0, src4);
 80018aa:	4b0a      	ldr	r3, [pc, #40]	; (80018d4 <Scan_SensorLCD+0x80>)
 80018ac:	9300      	str	r3, [sp, #0]
 80018ae:	2300      	movs	r3, #0
 80018b0:	2248      	movs	r2, #72	; 0x48
 80018b2:	2100      	movs	r1, #0
 80018b4:	4803      	ldr	r0, [pc, #12]	; (80018c4 <Scan_SensorLCD+0x70>)
 80018b6:	f002 fd01 	bl	80042bc <ucg_DrawString>
}
 80018ba:	bf00      	nop
 80018bc:	46bd      	mov	sp, r7
 80018be:	bd80      	pop	{r7, pc}
 80018c0:	08005ecc 	.word	0x08005ecc
 80018c4:	200000ac 	.word	0x200000ac
 80018c8:	20000194 	.word	0x20000194
 80018cc:	200001d4 	.word	0x200001d4
 80018d0:	08005ef8 	.word	0x08005ef8
 80018d4:	200001a8 	.word	0x200001a8
 80018d8:	200001d5 	.word	0x200001d5
 80018dc:	08005f0c 	.word	0x08005f0c

080018e0 <Scan_TimeSensor>:
 * @func 	Scan_1s
 * @brief	Scan period 1s
 * @param	None
 * @retval	None
 */
void Scan_TimeSensor(uint32_t byRepeats) {
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b084      	sub	sp, #16
 80018e4:	af02      	add	r7, sp, #8
 80018e6:	6078      	str	r0, [r7, #4]
	if (idTimer != NO_TIMER) {
 80018e8:	4b0c      	ldr	r3, [pc, #48]	; (800191c <Scan_TimeSensor+0x3c>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	2bff      	cmp	r3, #255	; 0xff
 80018ee:	d005      	beq.n	80018fc <Scan_TimeSensor+0x1c>
		TimerStop(idTimer);
 80018f0:	4b0a      	ldr	r3, [pc, #40]	; (800191c <Scan_TimeSensor+0x3c>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	b2db      	uxtb	r3, r3
 80018f6:	4618      	mov	r0, r3
 80018f8:	f001 f91a 	bl	8002b30 <TimerStop>
	}
	idTimer = TimerStart("Scan_sensor", byRepeats, TIMER_REPEAT_FOREVER,
 80018fc:	2300      	movs	r3, #0
 80018fe:	9300      	str	r3, [sp, #0]
 8001900:	4b07      	ldr	r3, [pc, #28]	; (8001920 <Scan_TimeSensor+0x40>)
 8001902:	22ff      	movs	r2, #255	; 0xff
 8001904:	6879      	ldr	r1, [r7, #4]
 8001906:	4807      	ldr	r0, [pc, #28]	; (8001924 <Scan_TimeSensor+0x44>)
 8001908:	f001 f8b0 	bl	8002a6c <TimerStart>
 800190c:	4603      	mov	r3, r0
 800190e:	461a      	mov	r2, r3
 8001910:	4b02      	ldr	r3, [pc, #8]	; (800191c <Scan_TimeSensor+0x3c>)
 8001912:	601a      	str	r2, [r3, #0]
			(void*) Scan_SensorLCD, NULL);
}
 8001914:	bf00      	nop
 8001916:	3708      	adds	r7, #8
 8001918:	46bd      	mov	sp, r7
 800191a:	bd80      	pop	{r7, pc}
 800191c:	20000168 	.word	0x20000168
 8001920:	08001855 	.word	0x08001855
 8001924:	08005f20 	.word	0x08005f20

08001928 <AppInitCommon>:
 * @func   AppInitCommon
 * @brief  Application initializer
 * @param  None
 * @retval None
 */
static void AppInitCommon(void) {
 8001928:	b580      	push	{r7, lr}
 800192a:	b082      	sub	sp, #8
 800192c:	af02      	add	r7, sp, #8
	SystemCoreClockUpdate(); 	// Cấp nguồn clock cho vi điều khiển 84 Mhz.
 800192e:	f000 fa39 	bl	8001da4 <SystemCoreClockUpdate>
	TimerInit();
 8001932:	f001 f879 	bl	8002a28 <TimerInit>
	SPI1_Init();// Khởi tạo TIMER sử dụng system tick.
 8001936:	f7ff fcdb 	bl	80012f0 <SPI1_Init>
	I2C_Init_temphumi();
 800193a:	f7ff fd09 	bl	8001350 <I2C_Init_temphumi>
	TemHumSensor_Init();
 800193e:	f001 fa3f 	bl	8002dc0 <TemHumSensor_Init>
	LightSensor_AdcInit();		// Khởi tạo ngoại vi ADC ở chế độ Polling
 8001942:	f000 f83d 	bl	80019c0 <LightSensor_AdcInit>
	LedControl_TimerOCInit(); // Khởi tạo ngoại vi TIMER ở chế độ pawm xung output compare
 8001946:	f000 f897 	bl	8001a78 <LedControl_TimerOCInit>

	KalmanFilterInit(2, 2, 0.001); // Khởi tạo bộ lọc Kalman
 800194a:	ed9f 1a19 	vldr	s2, [pc, #100]	; 80019b0 <AppInitCommon+0x88>
 800194e:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8001952:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8001956:	f7fe ffc9 	bl	80008ec <KalmanFilterInit>

	Ucglib4WireSWSPI_begin(&ucg, UCG_FONT_MODE_SOLID);
 800195a:	2100      	movs	r1, #0
 800195c:	4815      	ldr	r0, [pc, #84]	; (80019b4 <AppInitCommon+0x8c>)
 800195e:	f001 fc11 	bl	8003184 <Ucglib4WireSWSPI_begin>
	ucg_SetFont(&ucg, ucg_font_ncenR10_hf);
 8001962:	4915      	ldr	r1, [pc, #84]	; (80019b8 <AppInitCommon+0x90>)
 8001964:	4813      	ldr	r0, [pc, #76]	; (80019b4 <AppInitCommon+0x8c>)
 8001966:	f002 fd6d 	bl	8004444 <ucg_SetFont>
	ucg_ClearScreen(&ucg);
 800196a:	4812      	ldr	r0, [pc, #72]	; (80019b4 <AppInitCommon+0x8c>)
 800196c:	f001 fc51 	bl	8003212 <ucg_ClearScreen>
	ucg_SetColor(&ucg, 0, 255, 255, 255);
 8001970:	23ff      	movs	r3, #255	; 0xff
 8001972:	9300      	str	r3, [sp, #0]
 8001974:	23ff      	movs	r3, #255	; 0xff
 8001976:	22ff      	movs	r2, #255	; 0xff
 8001978:	2100      	movs	r1, #0
 800197a:	480e      	ldr	r0, [pc, #56]	; (80019b4 <AppInitCommon+0x8c>)
 800197c:	f002 fe41 	bl	8004602 <ucg_SetColor>
	ucg_SetColor(&ucg, 1, 0, 0, 0);
 8001980:	2300      	movs	r3, #0
 8001982:	9300      	str	r3, [sp, #0]
 8001984:	2300      	movs	r3, #0
 8001986:	2200      	movs	r2, #0
 8001988:	2101      	movs	r1, #1
 800198a:	480a      	ldr	r0, [pc, #40]	; (80019b4 <AppInitCommon+0x8c>)
 800198c:	f002 fe39 	bl	8004602 <ucg_SetColor>
	ucg_SetRotate180(&ucg);
 8001990:	4808      	ldr	r0, [pc, #32]	; (80019b4 <AppInitCommon+0x8c>)
 8001992:	f002 ff31 	bl	80047f8 <ucg_SetRotate180>
	Scan_TimeSensor(5000);
 8001996:	f241 3088 	movw	r0, #5000	; 0x1388
 800199a:	f7ff ffa1 	bl	80018e0 <Scan_TimeSensor>
	time_initial = GetMilSecTick();
 800199e:	f001 f917 	bl	8002bd0 <GetMilSecTick>
 80019a2:	4603      	mov	r3, r0
 80019a4:	4a05      	ldr	r2, [pc, #20]	; (80019bc <AppInitCommon+0x94>)
 80019a6:	6013      	str	r3, [r2, #0]
}
 80019a8:	bf00      	nop
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	bf00      	nop
 80019b0:	3a83126f 	.word	0x3a83126f
 80019b4:	200000ac 	.word	0x200000ac
 80019b8:	08006030 	.word	0x08006030
 80019bc:	20000160 	.word	0x20000160

080019c0 <LightSensor_AdcInit>:
 * @func   LightSensor_AdcInit
 * @brief  Light Sensor ADC Polling initialize
 * @param  None
 * @retval None
 */
static void LightSensor_AdcInit(void) {
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b08c      	sub	sp, #48	; 0x30
 80019c4:	af00      	add	r7, sp, #0
	ADC_CommonInitTypeDef ADC_CommonInitStructure;
	ADC_InitTypeDef ADC_InitStructure;
	GPIO_InitTypeDef GPIO_InitStructure;

	/* Enable peripheral clocks ***********************************************/
	RCC_APB2PeriphClockCmd(ADCx_CLK, ENABLE);
 80019c6:	2101      	movs	r1, #1
 80019c8:	f44f 7080 	mov.w	r0, #256	; 0x100
 80019cc:	f7ff fa1a 	bl	8000e04 <RCC_APB2PeriphClockCmd>
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);
 80019d0:	2101      	movs	r1, #1
 80019d2:	2004      	movs	r0, #4
 80019d4:	f7ff f9d6 	bl	8000d84 <RCC_AHB1PeriphClockCmd>

	GPIO_InitStructure.GPIO_Pin = ADC_PIN;
 80019d8:	2320      	movs	r3, #32
 80019da:	603b      	str	r3, [r7, #0]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AN;
 80019dc:	2303      	movs	r3, #3
 80019de:	713b      	strb	r3, [r7, #4]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 80019e0:	2300      	movs	r3, #0
 80019e2:	71fb      	strb	r3, [r7, #7]
	GPIO_Init(ADC_PORT, &GPIO_InitStructure);
 80019e4:	463b      	mov	r3, r7
 80019e6:	4619      	mov	r1, r3
 80019e8:	4821      	ldr	r0, [pc, #132]	; (8001a70 <LightSensor_AdcInit+0xb0>)
 80019ea:	f7ff f82d 	bl	8000a48 <GPIO_Init>

	/* ADC Deinit ***************************************************/
	ADC_DeInit();
 80019ee:	f000 faa5 	bl	8001f3c <ADC_DeInit>

	/* ADC Common Init ********************************************************/
	ADC_CommonInitStructure.ADC_Mode = ADC_Mode_Independent;
 80019f2:	2300      	movs	r3, #0
 80019f4:	623b      	str	r3, [r7, #32]
	ADC_CommonInitStructure.ADC_Prescaler = ADC_Prescaler_Div2;
 80019f6:	2300      	movs	r3, #0
 80019f8:	627b      	str	r3, [r7, #36]	; 0x24
	ADC_CommonInitStructure.ADC_DMAAccessMode = ADC_DMAAccessMode_Disabled;
 80019fa:	2300      	movs	r3, #0
 80019fc:	62bb      	str	r3, [r7, #40]	; 0x28
	ADC_CommonInitStructure.ADC_TwoSamplingDelay = ADC_TwoSamplingDelay_5Cycles;
 80019fe:	2300      	movs	r3, #0
 8001a00:	62fb      	str	r3, [r7, #44]	; 0x2c
	ADC_CommonInit(&ADC_CommonInitStructure);
 8001a02:	f107 0320 	add.w	r3, r7, #32
 8001a06:	4618      	mov	r0, r3
 8001a08:	f000 fafc 	bl	8002004 <ADC_CommonInit>

	/* ADC1 Init **************************************************************/
	ADC_InitStructure.ADC_Resolution = ADC_Resolution_12b;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	60bb      	str	r3, [r7, #8]
	ADC_InitStructure.ADC_ScanConvMode = DISABLE;
 8001a10:	2300      	movs	r3, #0
 8001a12:	733b      	strb	r3, [r7, #12]
	ADC_InitStructure.ADC_ContinuousConvMode = ENABLE;
 8001a14:	2301      	movs	r3, #1
 8001a16:	737b      	strb	r3, [r7, #13]
	ADC_InitStructure.ADC_ExternalTrigConvEdge = ADC_ExternalTrigConvEdge_None;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	613b      	str	r3, [r7, #16]
	ADC_InitStructure.ADC_ExternalTrigConv = ADC_ExternalTrigConv_T1_CC1;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	617b      	str	r3, [r7, #20]
	ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;
 8001a20:	2300      	movs	r3, #0
 8001a22:	61bb      	str	r3, [r7, #24]
	ADC_InitStructure.ADC_NbrOfConversion = 1;
 8001a24:	2301      	movs	r3, #1
 8001a26:	773b      	strb	r3, [r7, #28]
	ADC_Init(ADC1, &ADC_InitStructure);
 8001a28:	f107 0308 	add.w	r3, r7, #8
 8001a2c:	4619      	mov	r1, r3
 8001a2e:	4811      	ldr	r0, [pc, #68]	; (8001a74 <LightSensor_AdcInit+0xb4>)
 8001a30:	f000 fa92 	bl	8001f58 <ADC_Init>

	//Polling Configure
	ADC_EOCOnEachRegularChannelCmd(ADC1, ENABLE);
 8001a34:	2101      	movs	r1, #1
 8001a36:	480f      	ldr	r0, [pc, #60]	; (8001a74 <LightSensor_AdcInit+0xb4>)
 8001a38:	f000 fc02 	bl	8002240 <ADC_EOCOnEachRegularChannelCmd>
	ADC_ContinuousModeCmd(ADC1, DISABLE);
 8001a3c:	2100      	movs	r1, #0
 8001a3e:	480d      	ldr	r0, [pc, #52]	; (8001a74 <LightSensor_AdcInit+0xb4>)
 8001a40:	f000 fc1a 	bl	8002278 <ADC_ContinuousModeCmd>
	ADC_DiscModeChannelCountConfig(ADC1, 1);
 8001a44:	2101      	movs	r1, #1
 8001a46:	480b      	ldr	r0, [pc, #44]	; (8001a74 <LightSensor_AdcInit+0xb4>)
 8001a48:	f000 fc32 	bl	80022b0 <ADC_DiscModeChannelCountConfig>
	ADC_DiscModeCmd(ADC1, ENABLE);
 8001a4c:	2101      	movs	r1, #1
 8001a4e:	4809      	ldr	r0, [pc, #36]	; (8001a74 <LightSensor_AdcInit+0xb4>)
 8001a50:	f000 fc50 	bl	80022f4 <ADC_DiscModeCmd>

	/* ADC1 regular channel15 configuration ************************************/
	ADC_RegularChannelConfig(ADC1, ADC_Channel_15, 1, ADC_SampleTime_15Cycles);
 8001a54:	2301      	movs	r3, #1
 8001a56:	2201      	movs	r2, #1
 8001a58:	210f      	movs	r1, #15
 8001a5a:	4806      	ldr	r0, [pc, #24]	; (8001a74 <LightSensor_AdcInit+0xb4>)
 8001a5c:	f000 fb16 	bl	800208c <ADC_RegularChannelConfig>

	/* Enable ADC1 */
	ADC_Cmd(ADC1, ENABLE);
 8001a60:	2101      	movs	r1, #1
 8001a62:	4804      	ldr	r0, [pc, #16]	; (8001a74 <LightSensor_AdcInit+0xb4>)
 8001a64:	f000 faf6 	bl	8002054 <ADC_Cmd>
}
 8001a68:	bf00      	nop
 8001a6a:	3730      	adds	r7, #48	; 0x30
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bd80      	pop	{r7, pc}
 8001a70:	40020800 	.word	0x40020800
 8001a74:	40012000 	.word	0x40012000

08001a78 <LedControl_TimerOCInit>:
 * @func   LedControl_TimerOCInit
 * @brief  Control Led with Timer Output Capture
 * @param  None
 * @retval None
 */
static void LedControl_TimerOCInit(void) {
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b08a      	sub	sp, #40	; 0x28
 8001a7c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct;
	TIM_TimeBaseInitTypeDef TIM_TimeBaseInitStruct;
	TIM_OCInitTypeDef TIM_OC_InitStruct;

	// GPIO Configure
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 8001a7e:	2101      	movs	r1, #1
 8001a80:	2001      	movs	r0, #1
 8001a82:	f7ff f97f 	bl	8000d84 <RCC_AHB1PeriphClockCmd>

	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_AF;
 8001a86:	2302      	movs	r3, #2
 8001a88:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8001a92:	2300      	movs	r3, #0
 8001a94:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_50MHz;
 8001a98:	2302      	movs	r3, #2
 8001a9a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

	GPIO_InitStruct.GPIO_Pin = GPIO_Pin_11;
 8001a9e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001aa2:	623b      	str	r3, [r7, #32]
	GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001aa4:	f107 0320 	add.w	r3, r7, #32
 8001aa8:	4619      	mov	r1, r3
 8001aaa:	481a      	ldr	r0, [pc, #104]	; (8001b14 <LedControl_TimerOCInit+0x9c>)
 8001aac:	f7fe ffcc 	bl	8000a48 <GPIO_Init>

	GPIO_PinAFConfig(GPIOA, GPIO_PinSource11, GPIO_AF_TIM1);
 8001ab0:	2201      	movs	r2, #1
 8001ab2:	210b      	movs	r1, #11
 8001ab4:	4817      	ldr	r0, [pc, #92]	; (8001b14 <LedControl_TimerOCInit+0x9c>)
 8001ab6:	f7ff f86e 	bl	8000b96 <GPIO_PinAFConfig>

	//TimeBase Configure

	RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM1, ENABLE);
 8001aba:	2101      	movs	r1, #1
 8001abc:	2001      	movs	r0, #1
 8001abe:	f7ff f9a1 	bl	8000e04 <RCC_APB2PeriphClockCmd>

	TIM_TimeBaseInitStruct.TIM_CounterMode = TIM_CounterMode_Up;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	82fb      	strh	r3, [r7, #22]
	TIM_TimeBaseInitStruct.TIM_Prescaler = 0;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	82bb      	strh	r3, [r7, #20]

	/************************************************************************
	 * 	FPwm = Fclk / (ARR+1) * (PSC + 1)																	*
	 ************************************************************************/
	TIM_TimeBaseInitStruct.TIM_Period = 8399; // ARR = 8399
 8001aca:	f242 03cf 	movw	r3, #8399	; 0x20cf
 8001ace:	61bb      	str	r3, [r7, #24]
	TIM_TimeBaseInitStruct.TIM_ClockDivision = 0;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	83bb      	strh	r3, [r7, #28]
	TIM_TimeBaseInit(TIM1, &TIM_TimeBaseInitStruct);
 8001ad4:	f107 0314 	add.w	r3, r7, #20
 8001ad8:	4619      	mov	r1, r3
 8001ada:	480f      	ldr	r0, [pc, #60]	; (8001b18 <LedControl_TimerOCInit+0xa0>)
 8001adc:	f000 fe30 	bl	8002740 <TIM_TimeBaseInit>

	//TimeIC Configure
	TIM_OC_InitStruct.TIM_OCMode = TIM_OCMode_PWM2;
 8001ae0:	2370      	movs	r3, #112	; 0x70
 8001ae2:	803b      	strh	r3, [r7, #0]
	TIM_OC_InitStruct.TIM_OutputState = TIM_OutputState_Enable;
 8001ae4:	2301      	movs	r3, #1
 8001ae6:	807b      	strh	r3, [r7, #2]
	TIM_OC_InitStruct.TIM_Pulse = 0;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	60bb      	str	r3, [r7, #8]
	TIM_OC_InitStruct.TIM_OCPolarity = TIM_OCPolarity_Low;
 8001aec:	2302      	movs	r3, #2
 8001aee:	81bb      	strh	r3, [r7, #12]

	TIM_OC4Init(TIM1, &TIM_OC_InitStruct);
 8001af0:	463b      	mov	r3, r7
 8001af2:	4619      	mov	r1, r3
 8001af4:	4808      	ldr	r0, [pc, #32]	; (8001b18 <LedControl_TimerOCInit+0xa0>)
 8001af6:	f000 feaf 	bl	8002858 <TIM_OC4Init>

	TIM_Cmd(TIM1, ENABLE);
 8001afa:	2101      	movs	r1, #1
 8001afc:	4806      	ldr	r0, [pc, #24]	; (8001b18 <LedControl_TimerOCInit+0xa0>)
 8001afe:	f000 fe8b 	bl	8002818 <TIM_Cmd>

	TIM_CtrlPWMOutputs(TIM1, ENABLE);
 8001b02:	2101      	movs	r1, #1
 8001b04:	4804      	ldr	r0, [pc, #16]	; (8001b18 <LedControl_TimerOCInit+0xa0>)
 8001b06:	f000 ff1d 	bl	8002944 <TIM_CtrlPWMOutputs>
}
 8001b0a:	bf00      	nop
 8001b0c:	3728      	adds	r7, #40	; 0x28
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}
 8001b12:	bf00      	nop
 8001b14:	40020000 	.word	0x40020000
 8001b18:	40010000 	.word	0x40010000

08001b1c <LightSensor_AdcPollingRead>:
 * @func   LightSensor_AdcPollingRead
 * @brief  Read value from ADC
 * @param  None
 * @retval None
 */
uint16_t LightSensor_AdcPollingRead(void) {
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b082      	sub	sp, #8
 8001b20:	af00      	add	r7, sp, #0
	uint16_t result = 0;
 8001b22:	2300      	movs	r3, #0
 8001b24:	80fb      	strh	r3, [r7, #6]

	// Bắt đầu quá trình chuyển đổi ADC
	ADC_SoftwareStartConv(ADCx_SENSOR);
 8001b26:	480a      	ldr	r0, [pc, #40]	; (8001b50 <LightSensor_AdcPollingRead+0x34>)
 8001b28:	f000 fb7a 	bl	8002220 <ADC_SoftwareStartConv>

	// Đợi quá trình chuyển đổi được hoàn thành để đọc dữ liệu
	while (ADC_GetFlagStatus(ADCx_SENSOR, ADC_FLAG_EOC) == RESET)
 8001b2c:	bf00      	nop
 8001b2e:	2102      	movs	r1, #2
 8001b30:	4807      	ldr	r0, [pc, #28]	; (8001b50 <LightSensor_AdcPollingRead+0x34>)
 8001b32:	f000 fc08 	bl	8002346 <ADC_GetFlagStatus>
 8001b36:	4603      	mov	r3, r0
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d0f8      	beq.n	8001b2e <LightSensor_AdcPollingRead+0x12>
		;

	// Read value
	result = ADC_GetConversionValue(ADCx_SENSOR);
 8001b3c:	4804      	ldr	r0, [pc, #16]	; (8001b50 <LightSensor_AdcPollingRead+0x34>)
 8001b3e:	f000 fbf5 	bl	800232c <ADC_GetConversionValue>
 8001b42:	4603      	mov	r3, r0
 8001b44:	80fb      	strh	r3, [r7, #6]

	return result;
 8001b46:	88fb      	ldrh	r3, [r7, #6]
}
 8001b48:	4618      	mov	r0, r3
 8001b4a:	3708      	adds	r7, #8
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bd80      	pop	{r7, pc}
 8001b50:	40012000 	.word	0x40012000

08001b54 <Kanman_Light>:
 * @func   Kanman_Light
 * @brief  Use Kanman filter for Light Sensor
 * @param  None
 * @retval None
 */
uint16_t Kanman_Light(uint16_t lightLevel) {
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b082      	sub	sp, #8
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	80fb      	strh	r3, [r7, #6]
	lightLevelAfterFilter = KalmanFilter_updateEstimate(lightLevel);
 8001b5e:	88fb      	ldrh	r3, [r7, #6]
 8001b60:	ee07 3a90 	vmov	s15, r3
 8001b64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b68:	eeb0 0a67 	vmov.f32	s0, s15
 8001b6c:	f7fe fedc 	bl	8000928 <KalmanFilter_updateEstimate>
 8001b70:	eef0 7a40 	vmov.f32	s15, s0
 8001b74:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001b78:	ee17 3a90 	vmov	r3, s15
 8001b7c:	b29a      	uxth	r2, r3
 8001b7e:	4b04      	ldr	r3, [pc, #16]	; (8001b90 <Kanman_Light+0x3c>)
 8001b80:	801a      	strh	r2, [r3, #0]

	return lightLevelAfterFilter;
 8001b82:	4b03      	ldr	r3, [pc, #12]	; (8001b90 <Kanman_Light+0x3c>)
 8001b84:	881b      	ldrh	r3, [r3, #0]
}
 8001b86:	4618      	mov	r0, r3
 8001b88:	3708      	adds	r7, #8
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}
 8001b8e:	bf00      	nop
 8001b90:	200001dc 	.word	0x200001dc

08001b94 <LedControl_TimerOCSetPwm>:
 * @func   LedControl_TimerOCSetPwm
 * @brief  Control Led with PWM
 * @param  None
 * @retval None
 */
static void LedControl_TimerOCSetPwm(uint32_t Compare) {
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b082      	sub	sp, #8
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
	TIM_SetCompare4(TIM1, Compare);
 8001b9c:	6879      	ldr	r1, [r7, #4]
 8001b9e:	4803      	ldr	r0, [pc, #12]	; (8001bac <LedControl_TimerOCSetPwm+0x18>)
 8001ba0:	f000 fec2 	bl	8002928 <TIM_SetCompare4>
}
 8001ba4:	bf00      	nop
 8001ba6:	3708      	adds	r7, #8
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd80      	pop	{r7, pc}
 8001bac:	40010000 	.word	0x40010000

08001bb0 <ABL_Process>:
 * @func   ABL_Process
 * @brief  AutoBrightness use Light Sensor
 * @param  None
 * @retval None
 */
static void ABL_Process(void) {
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b084      	sub	sp, #16
 8001bb4:	af02      	add	r7, sp, #8
	uint32_t dwTimeCurrent;
	static uint32_t dwTimeTotal, dwTimeInit;

	dwTimeCurrent = GetMilSecTick();
 8001bb6:	f001 f80b 	bl	8002bd0 <GetMilSecTick>
 8001bba:	6078      	str	r0, [r7, #4]

	if (dwTimeCurrent >= dwTimeInit) {
 8001bbc:	4b27      	ldr	r3, [pc, #156]	; (8001c5c <ABL_Process+0xac>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	687a      	ldr	r2, [r7, #4]
 8001bc2:	429a      	cmp	r2, r3
 8001bc4:	d309      	bcc.n	8001bda <ABL_Process+0x2a>
		dwTimeTotal += dwTimeCurrent - dwTimeInit;
 8001bc6:	4b25      	ldr	r3, [pc, #148]	; (8001c5c <ABL_Process+0xac>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	687a      	ldr	r2, [r7, #4]
 8001bcc:	1ad2      	subs	r2, r2, r3
 8001bce:	4b24      	ldr	r3, [pc, #144]	; (8001c60 <ABL_Process+0xb0>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4413      	add	r3, r2
 8001bd4:	4a22      	ldr	r2, [pc, #136]	; (8001c60 <ABL_Process+0xb0>)
 8001bd6:	6013      	str	r3, [r2, #0]
 8001bd8:	e009      	b.n	8001bee <ABL_Process+0x3e>
	} else {
		dwTimeTotal += 0xFFFFFFFFU - dwTimeCurrent + dwTimeInit;
 8001bda:	4b20      	ldr	r3, [pc, #128]	; (8001c5c <ABL_Process+0xac>)
 8001bdc:	681a      	ldr	r2, [r3, #0]
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	1ad2      	subs	r2, r2, r3
 8001be2:	4b1f      	ldr	r3, [pc, #124]	; (8001c60 <ABL_Process+0xb0>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4413      	add	r3, r2
 8001be8:	3b01      	subs	r3, #1
 8001bea:	4a1d      	ldr	r2, [pc, #116]	; (8001c60 <ABL_Process+0xb0>)
 8001bec:	6013      	str	r3, [r2, #0]
	}

	if (dwTimeTotal >= 100) {
 8001bee:	4b1c      	ldr	r3, [pc, #112]	; (8001c60 <ABL_Process+0xb0>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	2b63      	cmp	r3, #99	; 0x63
 8001bf4:	d92a      	bls.n	8001c4c <ABL_Process+0x9c>
		dwTimeTotal = 0;
 8001bf6:	4b1a      	ldr	r3, [pc, #104]	; (8001c60 <ABL_Process+0xb0>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	601a      	str	r2, [r3, #0]
		AdcValue = LightSensor_AdcPollingRead(); // Đọc giá trị ADC đo được từ cảm biến ánh sáng
 8001bfc:	f7ff ff8e 	bl	8001b1c <LightSensor_AdcPollingRead>
 8001c00:	4603      	mov	r3, r0
 8001c02:	461a      	mov	r2, r3
 8001c04:	4b17      	ldr	r3, [pc, #92]	; (8001c64 <ABL_Process+0xb4>)
 8001c06:	801a      	strh	r2, [r3, #0]
		Kanman_light = Kanman_Light(AdcValue);
 8001c08:	4b16      	ldr	r3, [pc, #88]	; (8001c64 <ABL_Process+0xb4>)
 8001c0a:	881b      	ldrh	r3, [r3, #0]
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	f7ff ffa1 	bl	8001b54 <Kanman_Light>
 8001c12:	4603      	mov	r3, r0
 8001c14:	461a      	mov	r2, r3
 8001c16:	4b14      	ldr	r3, [pc, #80]	; (8001c68 <ABL_Process+0xb8>)
 8001c18:	801a      	strh	r2, [r3, #0]

		LedControl_TimerOCSetPwm(Kanman_light);
 8001c1a:	4b13      	ldr	r3, [pc, #76]	; (8001c68 <ABL_Process+0xb8>)
 8001c1c:	881b      	ldrh	r3, [r3, #0]
 8001c1e:	4618      	mov	r0, r3
 8001c20:	f7ff ffb8 	bl	8001b94 <LedControl_TimerOCSetPwm>
		memset(src5, 0, sizeof(src3));
 8001c24:	2214      	movs	r2, #20
 8001c26:	2100      	movs	r1, #0
 8001c28:	4810      	ldr	r0, [pc, #64]	; (8001c6c <ABL_Process+0xbc>)
 8001c2a:	f003 fcbd 	bl	80055a8 <memset>
		sprintf(src5, " Light = %d lux  ", Kanman_light);
 8001c2e:	4b0e      	ldr	r3, [pc, #56]	; (8001c68 <ABL_Process+0xb8>)
 8001c30:	881b      	ldrh	r3, [r3, #0]
 8001c32:	461a      	mov	r2, r3
 8001c34:	490e      	ldr	r1, [pc, #56]	; (8001c70 <ABL_Process+0xc0>)
 8001c36:	480d      	ldr	r0, [pc, #52]	; (8001c6c <ABL_Process+0xbc>)
 8001c38:	f003 fc96 	bl	8005568 <siprintf>
		ucg_DrawString(&ucg, 0, 72, 0, src5);
 8001c3c:	4b0b      	ldr	r3, [pc, #44]	; (8001c6c <ABL_Process+0xbc>)
 8001c3e:	9300      	str	r3, [sp, #0]
 8001c40:	2300      	movs	r3, #0
 8001c42:	2248      	movs	r2, #72	; 0x48
 8001c44:	2100      	movs	r1, #0
 8001c46:	480b      	ldr	r0, [pc, #44]	; (8001c74 <ABL_Process+0xc4>)
 8001c48:	f002 fb38 	bl	80042bc <ucg_DrawString>
	}
	dwTimeInit = dwTimeCurrent;
 8001c4c:	4a03      	ldr	r2, [pc, #12]	; (8001c5c <ABL_Process+0xac>)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	6013      	str	r3, [r2, #0]
}
 8001c52:	bf00      	nop
 8001c54:	3708      	adds	r7, #8
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}
 8001c5a:	bf00      	nop
 8001c5c:	200001e0 	.word	0x200001e0
 8001c60:	200001e4 	.word	0x200001e4
 8001c64:	200001da 	.word	0x200001da
 8001c68:	200001d8 	.word	0x200001d8
 8001c6c:	200001bc 	.word	0x200001bc
 8001c70:	08005f2c 	.word	0x08005f2c
 8001c74:	200000ac 	.word	0x200000ac

08001c78 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b086      	sub	sp, #24
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c80:	4a14      	ldr	r2, [pc, #80]	; (8001cd4 <_sbrk+0x5c>)
 8001c82:	4b15      	ldr	r3, [pc, #84]	; (8001cd8 <_sbrk+0x60>)
 8001c84:	1ad3      	subs	r3, r2, r3
 8001c86:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c88:	697b      	ldr	r3, [r7, #20]
 8001c8a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c8c:	4b13      	ldr	r3, [pc, #76]	; (8001cdc <_sbrk+0x64>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d102      	bne.n	8001c9a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c94:	4b11      	ldr	r3, [pc, #68]	; (8001cdc <_sbrk+0x64>)
 8001c96:	4a12      	ldr	r2, [pc, #72]	; (8001ce0 <_sbrk+0x68>)
 8001c98:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c9a:	4b10      	ldr	r3, [pc, #64]	; (8001cdc <_sbrk+0x64>)
 8001c9c:	681a      	ldr	r2, [r3, #0]
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	4413      	add	r3, r2
 8001ca2:	693a      	ldr	r2, [r7, #16]
 8001ca4:	429a      	cmp	r2, r3
 8001ca6:	d207      	bcs.n	8001cb8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ca8:	f003 fc86 	bl	80055b8 <__errno>
 8001cac:	4603      	mov	r3, r0
 8001cae:	220c      	movs	r2, #12
 8001cb0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001cb2:	f04f 33ff 	mov.w	r3, #4294967295
 8001cb6:	e009      	b.n	8001ccc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001cb8:	4b08      	ldr	r3, [pc, #32]	; (8001cdc <_sbrk+0x64>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001cbe:	4b07      	ldr	r3, [pc, #28]	; (8001cdc <_sbrk+0x64>)
 8001cc0:	681a      	ldr	r2, [r3, #0]
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	4413      	add	r3, r2
 8001cc6:	4a05      	ldr	r2, [pc, #20]	; (8001cdc <_sbrk+0x64>)
 8001cc8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001cca:	68fb      	ldr	r3, [r7, #12]
}
 8001ccc:	4618      	mov	r0, r3
 8001cce:	3718      	adds	r7, #24
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bd80      	pop	{r7, pc}
 8001cd4:	20018000 	.word	0x20018000
 8001cd8:	00000400 	.word	0x00000400
 8001cdc:	200001e8 	.word	0x200001e8
 8001ce0:	200014e0 	.word	0x200014e0

08001ce4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001ce4:	480d      	ldr	r0, [pc, #52]	; (8001d1c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001ce6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001ce8:	f000 f826 	bl	8001d38 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001cec:	480c      	ldr	r0, [pc, #48]	; (8001d20 <LoopForever+0x6>)
  ldr r1, =_edata
 8001cee:	490d      	ldr	r1, [pc, #52]	; (8001d24 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001cf0:	4a0d      	ldr	r2, [pc, #52]	; (8001d28 <LoopForever+0xe>)
  movs r3, #0
 8001cf2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001cf4:	e002      	b.n	8001cfc <LoopCopyDataInit>

08001cf6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001cf6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001cf8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001cfa:	3304      	adds	r3, #4

08001cfc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001cfc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001cfe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d00:	d3f9      	bcc.n	8001cf6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d02:	4a0a      	ldr	r2, [pc, #40]	; (8001d2c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001d04:	4c0a      	ldr	r4, [pc, #40]	; (8001d30 <LoopForever+0x16>)
  movs r3, #0
 8001d06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d08:	e001      	b.n	8001d0e <LoopFillZerobss>

08001d0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d0c:	3204      	adds	r2, #4

08001d0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d10:	d3fb      	bcc.n	8001d0a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001d12:	f003 fc57 	bl	80055c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001d16:	f7ff fa0d 	bl	8001134 <main>

08001d1a <LoopForever>:

LoopForever:
  b LoopForever
 8001d1a:	e7fe      	b.n	8001d1a <LoopForever>
  ldr   r0, =_estack
 8001d1c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001d20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d24:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8001d28:	08006fe0 	.word	0x08006fe0
  ldr r2, =_sbss
 8001d2c:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8001d30:	200014e0 	.word	0x200014e0

08001d34 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001d34:	e7fe      	b.n	8001d34 <ADC_IRQHandler>
	...

08001d38 <SystemInit>:
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	af00      	add	r7, sp, #0
 8001d3c:	4b16      	ldr	r3, [pc, #88]	; (8001d98 <SystemInit+0x60>)
 8001d3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d42:	4a15      	ldr	r2, [pc, #84]	; (8001d98 <SystemInit+0x60>)
 8001d44:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d48:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8001d4c:	4b13      	ldr	r3, [pc, #76]	; (8001d9c <SystemInit+0x64>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4a12      	ldr	r2, [pc, #72]	; (8001d9c <SystemInit+0x64>)
 8001d52:	f043 0301 	orr.w	r3, r3, #1
 8001d56:	6013      	str	r3, [r2, #0]
 8001d58:	4b10      	ldr	r3, [pc, #64]	; (8001d9c <SystemInit+0x64>)
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	609a      	str	r2, [r3, #8]
 8001d5e:	4b0f      	ldr	r3, [pc, #60]	; (8001d9c <SystemInit+0x64>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4a0e      	ldr	r2, [pc, #56]	; (8001d9c <SystemInit+0x64>)
 8001d64:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001d68:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d6c:	6013      	str	r3, [r2, #0]
 8001d6e:	4b0b      	ldr	r3, [pc, #44]	; (8001d9c <SystemInit+0x64>)
 8001d70:	4a0b      	ldr	r2, [pc, #44]	; (8001da0 <SystemInit+0x68>)
 8001d72:	605a      	str	r2, [r3, #4]
 8001d74:	4b09      	ldr	r3, [pc, #36]	; (8001d9c <SystemInit+0x64>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4a08      	ldr	r2, [pc, #32]	; (8001d9c <SystemInit+0x64>)
 8001d7a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d7e:	6013      	str	r3, [r2, #0]
 8001d80:	4b06      	ldr	r3, [pc, #24]	; (8001d9c <SystemInit+0x64>)
 8001d82:	2200      	movs	r2, #0
 8001d84:	60da      	str	r2, [r3, #12]
 8001d86:	f000 f889 	bl	8001e9c <SetSysClock>
 8001d8a:	4b03      	ldr	r3, [pc, #12]	; (8001d98 <SystemInit+0x60>)
 8001d8c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001d90:	609a      	str	r2, [r3, #8]
 8001d92:	bf00      	nop
 8001d94:	bd80      	pop	{r7, pc}
 8001d96:	bf00      	nop
 8001d98:	e000ed00 	.word	0xe000ed00
 8001d9c:	40023800 	.word	0x40023800
 8001da0:	24003010 	.word	0x24003010

08001da4 <SystemCoreClockUpdate>:
 8001da4:	b480      	push	{r7}
 8001da6:	b087      	sub	sp, #28
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	2300      	movs	r3, #0
 8001dac:	613b      	str	r3, [r7, #16]
 8001dae:	2300      	movs	r3, #0
 8001db0:	617b      	str	r3, [r7, #20]
 8001db2:	2302      	movs	r3, #2
 8001db4:	60fb      	str	r3, [r7, #12]
 8001db6:	2300      	movs	r3, #0
 8001db8:	60bb      	str	r3, [r7, #8]
 8001dba:	2302      	movs	r3, #2
 8001dbc:	607b      	str	r3, [r7, #4]
 8001dbe:	4b32      	ldr	r3, [pc, #200]	; (8001e88 <SystemCoreClockUpdate+0xe4>)
 8001dc0:	689b      	ldr	r3, [r3, #8]
 8001dc2:	f003 030c 	and.w	r3, r3, #12
 8001dc6:	613b      	str	r3, [r7, #16]
 8001dc8:	693b      	ldr	r3, [r7, #16]
 8001dca:	2b04      	cmp	r3, #4
 8001dcc:	d007      	beq.n	8001dde <SystemCoreClockUpdate+0x3a>
 8001dce:	2b08      	cmp	r3, #8
 8001dd0:	d009      	beq.n	8001de6 <SystemCoreClockUpdate+0x42>
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d13d      	bne.n	8001e52 <SystemCoreClockUpdate+0xae>
 8001dd6:	4b2d      	ldr	r3, [pc, #180]	; (8001e8c <SystemCoreClockUpdate+0xe8>)
 8001dd8:	4a2d      	ldr	r2, [pc, #180]	; (8001e90 <SystemCoreClockUpdate+0xec>)
 8001dda:	601a      	str	r2, [r3, #0]
 8001ddc:	e03d      	b.n	8001e5a <SystemCoreClockUpdate+0xb6>
 8001dde:	4b2b      	ldr	r3, [pc, #172]	; (8001e8c <SystemCoreClockUpdate+0xe8>)
 8001de0:	4a2c      	ldr	r2, [pc, #176]	; (8001e94 <SystemCoreClockUpdate+0xf0>)
 8001de2:	601a      	str	r2, [r3, #0]
 8001de4:	e039      	b.n	8001e5a <SystemCoreClockUpdate+0xb6>
 8001de6:	4b28      	ldr	r3, [pc, #160]	; (8001e88 <SystemCoreClockUpdate+0xe4>)
 8001de8:	685b      	ldr	r3, [r3, #4]
 8001dea:	0d9b      	lsrs	r3, r3, #22
 8001dec:	f003 0301 	and.w	r3, r3, #1
 8001df0:	60bb      	str	r3, [r7, #8]
 8001df2:	4b25      	ldr	r3, [pc, #148]	; (8001e88 <SystemCoreClockUpdate+0xe4>)
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001dfa:	607b      	str	r3, [r7, #4]
 8001dfc:	68bb      	ldr	r3, [r7, #8]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d00c      	beq.n	8001e1c <SystemCoreClockUpdate+0x78>
 8001e02:	4a24      	ldr	r2, [pc, #144]	; (8001e94 <SystemCoreClockUpdate+0xf0>)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e0a:	4a1f      	ldr	r2, [pc, #124]	; (8001e88 <SystemCoreClockUpdate+0xe4>)
 8001e0c:	6852      	ldr	r2, [r2, #4]
 8001e0e:	0992      	lsrs	r2, r2, #6
 8001e10:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001e14:	fb02 f303 	mul.w	r3, r2, r3
 8001e18:	617b      	str	r3, [r7, #20]
 8001e1a:	e00b      	b.n	8001e34 <SystemCoreClockUpdate+0x90>
 8001e1c:	4a1c      	ldr	r2, [pc, #112]	; (8001e90 <SystemCoreClockUpdate+0xec>)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e24:	4a18      	ldr	r2, [pc, #96]	; (8001e88 <SystemCoreClockUpdate+0xe4>)
 8001e26:	6852      	ldr	r2, [r2, #4]
 8001e28:	0992      	lsrs	r2, r2, #6
 8001e2a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001e2e:	fb02 f303 	mul.w	r3, r2, r3
 8001e32:	617b      	str	r3, [r7, #20]
 8001e34:	4b14      	ldr	r3, [pc, #80]	; (8001e88 <SystemCoreClockUpdate+0xe4>)
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	0c1b      	lsrs	r3, r3, #16
 8001e3a:	f003 0303 	and.w	r3, r3, #3
 8001e3e:	3301      	adds	r3, #1
 8001e40:	005b      	lsls	r3, r3, #1
 8001e42:	60fb      	str	r3, [r7, #12]
 8001e44:	697a      	ldr	r2, [r7, #20]
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e4c:	4a0f      	ldr	r2, [pc, #60]	; (8001e8c <SystemCoreClockUpdate+0xe8>)
 8001e4e:	6013      	str	r3, [r2, #0]
 8001e50:	e003      	b.n	8001e5a <SystemCoreClockUpdate+0xb6>
 8001e52:	4b0e      	ldr	r3, [pc, #56]	; (8001e8c <SystemCoreClockUpdate+0xe8>)
 8001e54:	4a0e      	ldr	r2, [pc, #56]	; (8001e90 <SystemCoreClockUpdate+0xec>)
 8001e56:	601a      	str	r2, [r3, #0]
 8001e58:	bf00      	nop
 8001e5a:	4b0b      	ldr	r3, [pc, #44]	; (8001e88 <SystemCoreClockUpdate+0xe4>)
 8001e5c:	689b      	ldr	r3, [r3, #8]
 8001e5e:	091b      	lsrs	r3, r3, #4
 8001e60:	f003 030f 	and.w	r3, r3, #15
 8001e64:	4a0c      	ldr	r2, [pc, #48]	; (8001e98 <SystemCoreClockUpdate+0xf4>)
 8001e66:	5cd3      	ldrb	r3, [r2, r3]
 8001e68:	b2db      	uxtb	r3, r3
 8001e6a:	613b      	str	r3, [r7, #16]
 8001e6c:	4b07      	ldr	r3, [pc, #28]	; (8001e8c <SystemCoreClockUpdate+0xe8>)
 8001e6e:	681a      	ldr	r2, [r3, #0]
 8001e70:	693b      	ldr	r3, [r7, #16]
 8001e72:	fa22 f303 	lsr.w	r3, r2, r3
 8001e76:	4a05      	ldr	r2, [pc, #20]	; (8001e8c <SystemCoreClockUpdate+0xe8>)
 8001e78:	6013      	str	r3, [r2, #0]
 8001e7a:	bf00      	nop
 8001e7c:	371c      	adds	r7, #28
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e84:	4770      	bx	lr
 8001e86:	bf00      	nop
 8001e88:	40023800 	.word	0x40023800
 8001e8c:	20000010 	.word	0x20000010
 8001e90:	00f42400 	.word	0x00f42400
 8001e94:	017d7840 	.word	0x017d7840
 8001e98:	20000014 	.word	0x20000014

08001e9c <SetSysClock>:
 8001e9c:	b480      	push	{r7}
 8001e9e:	af00      	add	r7, sp, #0
 8001ea0:	4b22      	ldr	r3, [pc, #136]	; (8001f2c <SetSysClock+0x90>)
 8001ea2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea4:	4a21      	ldr	r2, [pc, #132]	; (8001f2c <SetSysClock+0x90>)
 8001ea6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001eaa:	6413      	str	r3, [r2, #64]	; 0x40
 8001eac:	4b20      	ldr	r3, [pc, #128]	; (8001f30 <SetSysClock+0x94>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4a1f      	ldr	r2, [pc, #124]	; (8001f30 <SetSysClock+0x94>)
 8001eb2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001eb6:	6013      	str	r3, [r2, #0]
 8001eb8:	4b1c      	ldr	r3, [pc, #112]	; (8001f2c <SetSysClock+0x90>)
 8001eba:	4a1c      	ldr	r2, [pc, #112]	; (8001f2c <SetSysClock+0x90>)
 8001ebc:	689b      	ldr	r3, [r3, #8]
 8001ebe:	6093      	str	r3, [r2, #8]
 8001ec0:	4b1a      	ldr	r3, [pc, #104]	; (8001f2c <SetSysClock+0x90>)
 8001ec2:	4a1a      	ldr	r2, [pc, #104]	; (8001f2c <SetSysClock+0x90>)
 8001ec4:	689b      	ldr	r3, [r3, #8]
 8001ec6:	6093      	str	r3, [r2, #8]
 8001ec8:	4b18      	ldr	r3, [pc, #96]	; (8001f2c <SetSysClock+0x90>)
 8001eca:	689b      	ldr	r3, [r3, #8]
 8001ecc:	4a17      	ldr	r2, [pc, #92]	; (8001f2c <SetSysClock+0x90>)
 8001ece:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001ed2:	6093      	str	r3, [r2, #8]
 8001ed4:	4b15      	ldr	r3, [pc, #84]	; (8001f2c <SetSysClock+0x90>)
 8001ed6:	4a17      	ldr	r2, [pc, #92]	; (8001f34 <SetSysClock+0x98>)
 8001ed8:	605a      	str	r2, [r3, #4]
 8001eda:	4b14      	ldr	r3, [pc, #80]	; (8001f2c <SetSysClock+0x90>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4a13      	ldr	r2, [pc, #76]	; (8001f2c <SetSysClock+0x90>)
 8001ee0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ee4:	6013      	str	r3, [r2, #0]
 8001ee6:	bf00      	nop
 8001ee8:	4b10      	ldr	r3, [pc, #64]	; (8001f2c <SetSysClock+0x90>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d0f9      	beq.n	8001ee8 <SetSysClock+0x4c>
 8001ef4:	4b10      	ldr	r3, [pc, #64]	; (8001f38 <SetSysClock+0x9c>)
 8001ef6:	f240 6202 	movw	r2, #1538	; 0x602
 8001efa:	601a      	str	r2, [r3, #0]
 8001efc:	4b0b      	ldr	r3, [pc, #44]	; (8001f2c <SetSysClock+0x90>)
 8001efe:	689b      	ldr	r3, [r3, #8]
 8001f00:	4a0a      	ldr	r2, [pc, #40]	; (8001f2c <SetSysClock+0x90>)
 8001f02:	f023 0303 	bic.w	r3, r3, #3
 8001f06:	6093      	str	r3, [r2, #8]
 8001f08:	4b08      	ldr	r3, [pc, #32]	; (8001f2c <SetSysClock+0x90>)
 8001f0a:	689b      	ldr	r3, [r3, #8]
 8001f0c:	4a07      	ldr	r2, [pc, #28]	; (8001f2c <SetSysClock+0x90>)
 8001f0e:	f043 0302 	orr.w	r3, r3, #2
 8001f12:	6093      	str	r3, [r2, #8]
 8001f14:	bf00      	nop
 8001f16:	4b05      	ldr	r3, [pc, #20]	; (8001f2c <SetSysClock+0x90>)
 8001f18:	689b      	ldr	r3, [r3, #8]
 8001f1a:	f003 030c 	and.w	r3, r3, #12
 8001f1e:	2b08      	cmp	r3, #8
 8001f20:	d1f9      	bne.n	8001f16 <SetSysClock+0x7a>
 8001f22:	bf00      	nop
 8001f24:	46bd      	mov	sp, r7
 8001f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2a:	4770      	bx	lr
 8001f2c:	40023800 	.word	0x40023800
 8001f30:	40007000 	.word	0x40007000
 8001f34:	08015410 	.word	0x08015410
 8001f38:	40023c00 	.word	0x40023c00

08001f3c <ADC_DeInit>:
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	af00      	add	r7, sp, #0
 8001f40:	2101      	movs	r1, #1
 8001f42:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001f46:	f7fe ff7d 	bl	8000e44 <RCC_APB2PeriphResetCmd>
 8001f4a:	2100      	movs	r1, #0
 8001f4c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001f50:	f7fe ff78 	bl	8000e44 <RCC_APB2PeriphResetCmd>
 8001f54:	bf00      	nop
 8001f56:	bd80      	pop	{r7, pc}

08001f58 <ADC_Init>:
 8001f58:	b480      	push	{r7}
 8001f5a:	b085      	sub	sp, #20
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
 8001f60:	6039      	str	r1, [r7, #0]
 8001f62:	2300      	movs	r3, #0
 8001f64:	60fb      	str	r3, [r7, #12]
 8001f66:	2300      	movs	r3, #0
 8001f68:	72fb      	strb	r3, [r7, #11]
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	60fb      	str	r3, [r7, #12]
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8001f76:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001f7a:	60fb      	str	r3, [r7, #12]
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	791b      	ldrb	r3, [r3, #4]
 8001f80:	021a      	lsls	r2, r3, #8
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	4313      	orrs	r3, r2
 8001f88:	68fa      	ldr	r2, [r7, #12]
 8001f8a:	4313      	orrs	r3, r2
 8001f8c:	60fb      	str	r3, [r7, #12]
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	68fa      	ldr	r2, [r7, #12]
 8001f92:	605a      	str	r2, [r3, #4]
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	689b      	ldr	r3, [r3, #8]
 8001f98:	60fb      	str	r3, [r7, #12]
 8001f9a:	68fa      	ldr	r2, [r7, #12]
 8001f9c:	4b18      	ldr	r3, [pc, #96]	; (8002000 <ADC_Init+0xa8>)
 8001f9e:	4013      	ands	r3, r2
 8001fa0:	60fb      	str	r3, [r7, #12]
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	691a      	ldr	r2, [r3, #16]
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	68db      	ldr	r3, [r3, #12]
 8001faa:	431a      	orrs	r2, r3
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	689b      	ldr	r3, [r3, #8]
 8001fb0:	431a      	orrs	r2, r3
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	795b      	ldrb	r3, [r3, #5]
 8001fb6:	005b      	lsls	r3, r3, #1
 8001fb8:	4313      	orrs	r3, r2
 8001fba:	68fa      	ldr	r2, [r7, #12]
 8001fbc:	4313      	orrs	r3, r2
 8001fbe:	60fb      	str	r3, [r7, #12]
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	68fa      	ldr	r2, [r7, #12]
 8001fc4:	609a      	str	r2, [r3, #8]
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fca:	60fb      	str	r3, [r7, #12]
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8001fd2:	60fb      	str	r3, [r7, #12]
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	7d1b      	ldrb	r3, [r3, #20]
 8001fd8:	3b01      	subs	r3, #1
 8001fda:	b2da      	uxtb	r2, r3
 8001fdc:	7afb      	ldrb	r3, [r7, #11]
 8001fde:	4313      	orrs	r3, r2
 8001fe0:	72fb      	strb	r3, [r7, #11]
 8001fe2:	7afb      	ldrb	r3, [r7, #11]
 8001fe4:	051b      	lsls	r3, r3, #20
 8001fe6:	68fa      	ldr	r2, [r7, #12]
 8001fe8:	4313      	orrs	r3, r2
 8001fea:	60fb      	str	r3, [r7, #12]
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	68fa      	ldr	r2, [r7, #12]
 8001ff0:	62da      	str	r2, [r3, #44]	; 0x2c
 8001ff2:	bf00      	nop
 8001ff4:	3714      	adds	r7, #20
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffc:	4770      	bx	lr
 8001ffe:	bf00      	nop
 8002000:	c0fff7fd 	.word	0xc0fff7fd

08002004 <ADC_CommonInit>:
 8002004:	b480      	push	{r7}
 8002006:	b085      	sub	sp, #20
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
 800200c:	2300      	movs	r3, #0
 800200e:	60fb      	str	r3, [r7, #12]
 8002010:	4b0e      	ldr	r3, [pc, #56]	; (800204c <ADC_CommonInit+0x48>)
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	60fb      	str	r3, [r7, #12]
 8002016:	68fa      	ldr	r2, [r7, #12]
 8002018:	4b0d      	ldr	r3, [pc, #52]	; (8002050 <ADC_CommonInit+0x4c>)
 800201a:	4013      	ands	r3, r2
 800201c:	60fb      	str	r3, [r7, #12]
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681a      	ldr	r2, [r3, #0]
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	431a      	orrs	r2, r3
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	689b      	ldr	r3, [r3, #8]
 800202c:	431a      	orrs	r2, r3
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	68db      	ldr	r3, [r3, #12]
 8002032:	4313      	orrs	r3, r2
 8002034:	68fa      	ldr	r2, [r7, #12]
 8002036:	4313      	orrs	r3, r2
 8002038:	60fb      	str	r3, [r7, #12]
 800203a:	4a04      	ldr	r2, [pc, #16]	; (800204c <ADC_CommonInit+0x48>)
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	6053      	str	r3, [r2, #4]
 8002040:	bf00      	nop
 8002042:	3714      	adds	r7, #20
 8002044:	46bd      	mov	sp, r7
 8002046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204a:	4770      	bx	lr
 800204c:	40012300 	.word	0x40012300
 8002050:	fffc30e0 	.word	0xfffc30e0

08002054 <ADC_Cmd>:
 8002054:	b480      	push	{r7}
 8002056:	b083      	sub	sp, #12
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
 800205c:	460b      	mov	r3, r1
 800205e:	70fb      	strb	r3, [r7, #3]
 8002060:	78fb      	ldrb	r3, [r7, #3]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d006      	beq.n	8002074 <ADC_Cmd+0x20>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	689b      	ldr	r3, [r3, #8]
 800206a:	f043 0201 	orr.w	r2, r3, #1
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	609a      	str	r2, [r3, #8]
 8002072:	e005      	b.n	8002080 <ADC_Cmd+0x2c>
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	689b      	ldr	r3, [r3, #8]
 8002078:	f023 0201 	bic.w	r2, r3, #1
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	609a      	str	r2, [r3, #8]
 8002080:	bf00      	nop
 8002082:	370c      	adds	r7, #12
 8002084:	46bd      	mov	sp, r7
 8002086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208a:	4770      	bx	lr

0800208c <ADC_RegularChannelConfig>:
 800208c:	b480      	push	{r7}
 800208e:	b085      	sub	sp, #20
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
 8002094:	4608      	mov	r0, r1
 8002096:	4611      	mov	r1, r2
 8002098:	461a      	mov	r2, r3
 800209a:	4603      	mov	r3, r0
 800209c:	70fb      	strb	r3, [r7, #3]
 800209e:	460b      	mov	r3, r1
 80020a0:	70bb      	strb	r3, [r7, #2]
 80020a2:	4613      	mov	r3, r2
 80020a4:	707b      	strb	r3, [r7, #1]
 80020a6:	2300      	movs	r3, #0
 80020a8:	60fb      	str	r3, [r7, #12]
 80020aa:	2300      	movs	r3, #0
 80020ac:	60bb      	str	r3, [r7, #8]
 80020ae:	78fb      	ldrb	r3, [r7, #3]
 80020b0:	2b09      	cmp	r3, #9
 80020b2:	d923      	bls.n	80020fc <ADC_RegularChannelConfig+0x70>
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	68db      	ldr	r3, [r3, #12]
 80020b8:	60fb      	str	r3, [r7, #12]
 80020ba:	78fb      	ldrb	r3, [r7, #3]
 80020bc:	f1a3 020a 	sub.w	r2, r3, #10
 80020c0:	4613      	mov	r3, r2
 80020c2:	005b      	lsls	r3, r3, #1
 80020c4:	4413      	add	r3, r2
 80020c6:	2207      	movs	r2, #7
 80020c8:	fa02 f303 	lsl.w	r3, r2, r3
 80020cc:	60bb      	str	r3, [r7, #8]
 80020ce:	68bb      	ldr	r3, [r7, #8]
 80020d0:	43db      	mvns	r3, r3
 80020d2:	68fa      	ldr	r2, [r7, #12]
 80020d4:	4013      	ands	r3, r2
 80020d6:	60fb      	str	r3, [r7, #12]
 80020d8:	7879      	ldrb	r1, [r7, #1]
 80020da:	78fb      	ldrb	r3, [r7, #3]
 80020dc:	f1a3 020a 	sub.w	r2, r3, #10
 80020e0:	4613      	mov	r3, r2
 80020e2:	005b      	lsls	r3, r3, #1
 80020e4:	4413      	add	r3, r2
 80020e6:	fa01 f303 	lsl.w	r3, r1, r3
 80020ea:	60bb      	str	r3, [r7, #8]
 80020ec:	68fa      	ldr	r2, [r7, #12]
 80020ee:	68bb      	ldr	r3, [r7, #8]
 80020f0:	4313      	orrs	r3, r2
 80020f2:	60fb      	str	r3, [r7, #12]
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	68fa      	ldr	r2, [r7, #12]
 80020f8:	60da      	str	r2, [r3, #12]
 80020fa:	e01e      	b.n	800213a <ADC_RegularChannelConfig+0xae>
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	691b      	ldr	r3, [r3, #16]
 8002100:	60fb      	str	r3, [r7, #12]
 8002102:	78fa      	ldrb	r2, [r7, #3]
 8002104:	4613      	mov	r3, r2
 8002106:	005b      	lsls	r3, r3, #1
 8002108:	4413      	add	r3, r2
 800210a:	2207      	movs	r2, #7
 800210c:	fa02 f303 	lsl.w	r3, r2, r3
 8002110:	60bb      	str	r3, [r7, #8]
 8002112:	68bb      	ldr	r3, [r7, #8]
 8002114:	43db      	mvns	r3, r3
 8002116:	68fa      	ldr	r2, [r7, #12]
 8002118:	4013      	ands	r3, r2
 800211a:	60fb      	str	r3, [r7, #12]
 800211c:	7879      	ldrb	r1, [r7, #1]
 800211e:	78fa      	ldrb	r2, [r7, #3]
 8002120:	4613      	mov	r3, r2
 8002122:	005b      	lsls	r3, r3, #1
 8002124:	4413      	add	r3, r2
 8002126:	fa01 f303 	lsl.w	r3, r1, r3
 800212a:	60bb      	str	r3, [r7, #8]
 800212c:	68fa      	ldr	r2, [r7, #12]
 800212e:	68bb      	ldr	r3, [r7, #8]
 8002130:	4313      	orrs	r3, r2
 8002132:	60fb      	str	r3, [r7, #12]
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	68fa      	ldr	r2, [r7, #12]
 8002138:	611a      	str	r2, [r3, #16]
 800213a:	78bb      	ldrb	r3, [r7, #2]
 800213c:	2b06      	cmp	r3, #6
 800213e:	d821      	bhi.n	8002184 <ADC_RegularChannelConfig+0xf8>
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002144:	60fb      	str	r3, [r7, #12]
 8002146:	78bb      	ldrb	r3, [r7, #2]
 8002148:	1e5a      	subs	r2, r3, #1
 800214a:	4613      	mov	r3, r2
 800214c:	009b      	lsls	r3, r3, #2
 800214e:	4413      	add	r3, r2
 8002150:	221f      	movs	r2, #31
 8002152:	fa02 f303 	lsl.w	r3, r2, r3
 8002156:	60bb      	str	r3, [r7, #8]
 8002158:	68bb      	ldr	r3, [r7, #8]
 800215a:	43db      	mvns	r3, r3
 800215c:	68fa      	ldr	r2, [r7, #12]
 800215e:	4013      	ands	r3, r2
 8002160:	60fb      	str	r3, [r7, #12]
 8002162:	78f9      	ldrb	r1, [r7, #3]
 8002164:	78bb      	ldrb	r3, [r7, #2]
 8002166:	1e5a      	subs	r2, r3, #1
 8002168:	4613      	mov	r3, r2
 800216a:	009b      	lsls	r3, r3, #2
 800216c:	4413      	add	r3, r2
 800216e:	fa01 f303 	lsl.w	r3, r1, r3
 8002172:	60bb      	str	r3, [r7, #8]
 8002174:	68fa      	ldr	r2, [r7, #12]
 8002176:	68bb      	ldr	r3, [r7, #8]
 8002178:	4313      	orrs	r3, r2
 800217a:	60fb      	str	r3, [r7, #12]
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	68fa      	ldr	r2, [r7, #12]
 8002180:	635a      	str	r2, [r3, #52]	; 0x34
 8002182:	e047      	b.n	8002214 <ADC_RegularChannelConfig+0x188>
 8002184:	78bb      	ldrb	r3, [r7, #2]
 8002186:	2b0c      	cmp	r3, #12
 8002188:	d821      	bhi.n	80021ce <ADC_RegularChannelConfig+0x142>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800218e:	60fb      	str	r3, [r7, #12]
 8002190:	78bb      	ldrb	r3, [r7, #2]
 8002192:	1fda      	subs	r2, r3, #7
 8002194:	4613      	mov	r3, r2
 8002196:	009b      	lsls	r3, r3, #2
 8002198:	4413      	add	r3, r2
 800219a:	221f      	movs	r2, #31
 800219c:	fa02 f303 	lsl.w	r3, r2, r3
 80021a0:	60bb      	str	r3, [r7, #8]
 80021a2:	68bb      	ldr	r3, [r7, #8]
 80021a4:	43db      	mvns	r3, r3
 80021a6:	68fa      	ldr	r2, [r7, #12]
 80021a8:	4013      	ands	r3, r2
 80021aa:	60fb      	str	r3, [r7, #12]
 80021ac:	78f9      	ldrb	r1, [r7, #3]
 80021ae:	78bb      	ldrb	r3, [r7, #2]
 80021b0:	1fda      	subs	r2, r3, #7
 80021b2:	4613      	mov	r3, r2
 80021b4:	009b      	lsls	r3, r3, #2
 80021b6:	4413      	add	r3, r2
 80021b8:	fa01 f303 	lsl.w	r3, r1, r3
 80021bc:	60bb      	str	r3, [r7, #8]
 80021be:	68fa      	ldr	r2, [r7, #12]
 80021c0:	68bb      	ldr	r3, [r7, #8]
 80021c2:	4313      	orrs	r3, r2
 80021c4:	60fb      	str	r3, [r7, #12]
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	68fa      	ldr	r2, [r7, #12]
 80021ca:	631a      	str	r2, [r3, #48]	; 0x30
 80021cc:	e022      	b.n	8002214 <ADC_RegularChannelConfig+0x188>
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021d2:	60fb      	str	r3, [r7, #12]
 80021d4:	78bb      	ldrb	r3, [r7, #2]
 80021d6:	f1a3 020d 	sub.w	r2, r3, #13
 80021da:	4613      	mov	r3, r2
 80021dc:	009b      	lsls	r3, r3, #2
 80021de:	4413      	add	r3, r2
 80021e0:	221f      	movs	r2, #31
 80021e2:	fa02 f303 	lsl.w	r3, r2, r3
 80021e6:	60bb      	str	r3, [r7, #8]
 80021e8:	68bb      	ldr	r3, [r7, #8]
 80021ea:	43db      	mvns	r3, r3
 80021ec:	68fa      	ldr	r2, [r7, #12]
 80021ee:	4013      	ands	r3, r2
 80021f0:	60fb      	str	r3, [r7, #12]
 80021f2:	78f9      	ldrb	r1, [r7, #3]
 80021f4:	78bb      	ldrb	r3, [r7, #2]
 80021f6:	f1a3 020d 	sub.w	r2, r3, #13
 80021fa:	4613      	mov	r3, r2
 80021fc:	009b      	lsls	r3, r3, #2
 80021fe:	4413      	add	r3, r2
 8002200:	fa01 f303 	lsl.w	r3, r1, r3
 8002204:	60bb      	str	r3, [r7, #8]
 8002206:	68fa      	ldr	r2, [r7, #12]
 8002208:	68bb      	ldr	r3, [r7, #8]
 800220a:	4313      	orrs	r3, r2
 800220c:	60fb      	str	r3, [r7, #12]
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	68fa      	ldr	r2, [r7, #12]
 8002212:	62da      	str	r2, [r3, #44]	; 0x2c
 8002214:	bf00      	nop
 8002216:	3714      	adds	r7, #20
 8002218:	46bd      	mov	sp, r7
 800221a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221e:	4770      	bx	lr

08002220 <ADC_SoftwareStartConv>:
 8002220:	b480      	push	{r7}
 8002222:	b083      	sub	sp, #12
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	689b      	ldr	r3, [r3, #8]
 800222c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	609a      	str	r2, [r3, #8]
 8002234:	bf00      	nop
 8002236:	370c      	adds	r7, #12
 8002238:	46bd      	mov	sp, r7
 800223a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223e:	4770      	bx	lr

08002240 <ADC_EOCOnEachRegularChannelCmd>:
 8002240:	b480      	push	{r7}
 8002242:	b083      	sub	sp, #12
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
 8002248:	460b      	mov	r3, r1
 800224a:	70fb      	strb	r3, [r7, #3]
 800224c:	78fb      	ldrb	r3, [r7, #3]
 800224e:	2b00      	cmp	r3, #0
 8002250:	d006      	beq.n	8002260 <ADC_EOCOnEachRegularChannelCmd+0x20>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	689b      	ldr	r3, [r3, #8]
 8002256:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	609a      	str	r2, [r3, #8]
 800225e:	e005      	b.n	800226c <ADC_EOCOnEachRegularChannelCmd+0x2c>
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	689b      	ldr	r3, [r3, #8]
 8002264:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	609a      	str	r2, [r3, #8]
 800226c:	bf00      	nop
 800226e:	370c      	adds	r7, #12
 8002270:	46bd      	mov	sp, r7
 8002272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002276:	4770      	bx	lr

08002278 <ADC_ContinuousModeCmd>:
 8002278:	b480      	push	{r7}
 800227a:	b083      	sub	sp, #12
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
 8002280:	460b      	mov	r3, r1
 8002282:	70fb      	strb	r3, [r7, #3]
 8002284:	78fb      	ldrb	r3, [r7, #3]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d006      	beq.n	8002298 <ADC_ContinuousModeCmd+0x20>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	689b      	ldr	r3, [r3, #8]
 800228e:	f043 0202 	orr.w	r2, r3, #2
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	609a      	str	r2, [r3, #8]
 8002296:	e005      	b.n	80022a4 <ADC_ContinuousModeCmd+0x2c>
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	689b      	ldr	r3, [r3, #8]
 800229c:	f023 0202 	bic.w	r2, r3, #2
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	609a      	str	r2, [r3, #8]
 80022a4:	bf00      	nop
 80022a6:	370c      	adds	r7, #12
 80022a8:	46bd      	mov	sp, r7
 80022aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ae:	4770      	bx	lr

080022b0 <ADC_DiscModeChannelCountConfig>:
 80022b0:	b480      	push	{r7}
 80022b2:	b085      	sub	sp, #20
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
 80022b8:	460b      	mov	r3, r1
 80022ba:	70fb      	strb	r3, [r7, #3]
 80022bc:	2300      	movs	r3, #0
 80022be:	60fb      	str	r3, [r7, #12]
 80022c0:	2300      	movs	r3, #0
 80022c2:	60bb      	str	r3, [r7, #8]
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	60fb      	str	r3, [r7, #12]
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80022d0:	60fb      	str	r3, [r7, #12]
 80022d2:	78fb      	ldrb	r3, [r7, #3]
 80022d4:	3b01      	subs	r3, #1
 80022d6:	60bb      	str	r3, [r7, #8]
 80022d8:	68bb      	ldr	r3, [r7, #8]
 80022da:	035b      	lsls	r3, r3, #13
 80022dc:	68fa      	ldr	r2, [r7, #12]
 80022de:	4313      	orrs	r3, r2
 80022e0:	60fb      	str	r3, [r7, #12]
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	68fa      	ldr	r2, [r7, #12]
 80022e6:	605a      	str	r2, [r3, #4]
 80022e8:	bf00      	nop
 80022ea:	3714      	adds	r7, #20
 80022ec:	46bd      	mov	sp, r7
 80022ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f2:	4770      	bx	lr

080022f4 <ADC_DiscModeCmd>:
 80022f4:	b480      	push	{r7}
 80022f6:	b083      	sub	sp, #12
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
 80022fc:	460b      	mov	r3, r1
 80022fe:	70fb      	strb	r3, [r7, #3]
 8002300:	78fb      	ldrb	r3, [r7, #3]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d006      	beq.n	8002314 <ADC_DiscModeCmd+0x20>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	605a      	str	r2, [r3, #4]
 8002312:	e005      	b.n	8002320 <ADC_DiscModeCmd+0x2c>
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	605a      	str	r2, [r3, #4]
 8002320:	bf00      	nop
 8002322:	370c      	adds	r7, #12
 8002324:	46bd      	mov	sp, r7
 8002326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232a:	4770      	bx	lr

0800232c <ADC_GetConversionValue>:
 800232c:	b480      	push	{r7}
 800232e:	b083      	sub	sp, #12
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002338:	b29b      	uxth	r3, r3
 800233a:	4618      	mov	r0, r3
 800233c:	370c      	adds	r7, #12
 800233e:	46bd      	mov	sp, r7
 8002340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002344:	4770      	bx	lr

08002346 <ADC_GetFlagStatus>:
 8002346:	b480      	push	{r7}
 8002348:	b085      	sub	sp, #20
 800234a:	af00      	add	r7, sp, #0
 800234c:	6078      	str	r0, [r7, #4]
 800234e:	460b      	mov	r3, r1
 8002350:	70fb      	strb	r3, [r7, #3]
 8002352:	2300      	movs	r3, #0
 8002354:	73fb      	strb	r3, [r7, #15]
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681a      	ldr	r2, [r3, #0]
 800235a:	78fb      	ldrb	r3, [r7, #3]
 800235c:	4013      	ands	r3, r2
 800235e:	2b00      	cmp	r3, #0
 8002360:	d002      	beq.n	8002368 <ADC_GetFlagStatus+0x22>
 8002362:	2301      	movs	r3, #1
 8002364:	73fb      	strb	r3, [r7, #15]
 8002366:	e001      	b.n	800236c <ADC_GetFlagStatus+0x26>
 8002368:	2300      	movs	r3, #0
 800236a:	73fb      	strb	r3, [r7, #15]
 800236c:	7bfb      	ldrb	r3, [r7, #15]
 800236e:	4618      	mov	r0, r3
 8002370:	3714      	adds	r7, #20
 8002372:	46bd      	mov	sp, r7
 8002374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002378:	4770      	bx	lr
	...

0800237c <I2C_Init>:
 800237c:	b580      	push	{r7, lr}
 800237e:	b08a      	sub	sp, #40	; 0x28
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
 8002384:	6039      	str	r1, [r7, #0]
 8002386:	2300      	movs	r3, #0
 8002388:	84fb      	strh	r3, [r7, #38]	; 0x26
 800238a:	2300      	movs	r3, #0
 800238c:	847b      	strh	r3, [r7, #34]	; 0x22
 800238e:	2304      	movs	r3, #4
 8002390:	84bb      	strh	r3, [r7, #36]	; 0x24
 8002392:	4b57      	ldr	r3, [pc, #348]	; (80024f0 <I2C_Init+0x174>)
 8002394:	61fb      	str	r3, [r7, #28]
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	889b      	ldrh	r3, [r3, #4]
 800239a:	84fb      	strh	r3, [r7, #38]	; 0x26
 800239c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800239e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80023a2:	84fb      	strh	r3, [r7, #38]	; 0x26
 80023a4:	f107 030c 	add.w	r3, r7, #12
 80023a8:	4618      	mov	r0, r3
 80023aa:	f7fe fc3d 	bl	8000c28 <RCC_GetClocksFreq>
 80023ae:	697b      	ldr	r3, [r7, #20]
 80023b0:	61fb      	str	r3, [r7, #28]
 80023b2:	69fb      	ldr	r3, [r7, #28]
 80023b4:	4a4f      	ldr	r2, [pc, #316]	; (80024f4 <I2C_Init+0x178>)
 80023b6:	fba2 2303 	umull	r2, r3, r2, r3
 80023ba:	0c9b      	lsrs	r3, r3, #18
 80023bc:	847b      	strh	r3, [r7, #34]	; 0x22
 80023be:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80023c0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80023c2:	4313      	orrs	r3, r2
 80023c4:	84fb      	strh	r3, [r7, #38]	; 0x26
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80023ca:	809a      	strh	r2, [r3, #4]
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	881b      	ldrh	r3, [r3, #0]
 80023d0:	b29b      	uxth	r3, r3
 80023d2:	f023 0301 	bic.w	r3, r3, #1
 80023d6:	b29a      	uxth	r2, r3
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	801a      	strh	r2, [r3, #0]
 80023dc:	2300      	movs	r3, #0
 80023de:	84fb      	strh	r3, [r7, #38]	; 0x26
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4a44      	ldr	r2, [pc, #272]	; (80024f8 <I2C_Init+0x17c>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d815      	bhi.n	8002416 <I2C_Init+0x9a>
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	005b      	lsls	r3, r3, #1
 80023f0:	69fa      	ldr	r2, [r7, #28]
 80023f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80023f6:	84bb      	strh	r3, [r7, #36]	; 0x24
 80023f8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80023fa:	2b03      	cmp	r3, #3
 80023fc:	d801      	bhi.n	8002402 <I2C_Init+0x86>
 80023fe:	2304      	movs	r3, #4
 8002400:	84bb      	strh	r3, [r7, #36]	; 0x24
 8002402:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8002404:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002406:	4313      	orrs	r3, r2
 8002408:	84fb      	strh	r3, [r7, #38]	; 0x26
 800240a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800240c:	3301      	adds	r3, #1
 800240e:	b29a      	uxth	r2, r3
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	841a      	strh	r2, [r3, #32]
 8002414:	e040      	b.n	8002498 <I2C_Init+0x11c>
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	88db      	ldrh	r3, [r3, #6]
 800241a:	f64b 72ff 	movw	r2, #49151	; 0xbfff
 800241e:	4293      	cmp	r3, r2
 8002420:	d109      	bne.n	8002436 <I2C_Init+0xba>
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	681a      	ldr	r2, [r3, #0]
 8002426:	4613      	mov	r3, r2
 8002428:	005b      	lsls	r3, r3, #1
 800242a:	4413      	add	r3, r2
 800242c:	69fa      	ldr	r2, [r7, #28]
 800242e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002432:	84bb      	strh	r3, [r7, #36]	; 0x24
 8002434:	e00e      	b.n	8002454 <I2C_Init+0xd8>
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	681a      	ldr	r2, [r3, #0]
 800243a:	4613      	mov	r3, r2
 800243c:	009b      	lsls	r3, r3, #2
 800243e:	4413      	add	r3, r2
 8002440:	009a      	lsls	r2, r3, #2
 8002442:	4413      	add	r3, r2
 8002444:	69fa      	ldr	r2, [r7, #28]
 8002446:	fbb2 f3f3 	udiv	r3, r2, r3
 800244a:	84bb      	strh	r3, [r7, #36]	; 0x24
 800244c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800244e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002452:	84bb      	strh	r3, [r7, #36]	; 0x24
 8002454:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002456:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800245a:	2b00      	cmp	r3, #0
 800245c:	d103      	bne.n	8002466 <I2C_Init+0xea>
 800245e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002460:	f043 0301 	orr.w	r3, r3, #1
 8002464:	84bb      	strh	r3, [r7, #36]	; 0x24
 8002466:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002468:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800246a:	4313      	orrs	r3, r2
 800246c:	b29b      	uxth	r3, r3
 800246e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002472:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002476:	84fb      	strh	r3, [r7, #38]	; 0x26
 8002478:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800247a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800247e:	fb02 f303 	mul.w	r3, r2, r3
 8002482:	4a1e      	ldr	r2, [pc, #120]	; (80024fc <I2C_Init+0x180>)
 8002484:	fb82 1203 	smull	r1, r2, r2, r3
 8002488:	1192      	asrs	r2, r2, #6
 800248a:	17db      	asrs	r3, r3, #31
 800248c:	1ad3      	subs	r3, r2, r3
 800248e:	b29b      	uxth	r3, r3
 8002490:	3301      	adds	r3, #1
 8002492:	b29a      	uxth	r2, r3
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	841a      	strh	r2, [r3, #32]
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800249c:	839a      	strh	r2, [r3, #28]
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	881b      	ldrh	r3, [r3, #0]
 80024a2:	b29b      	uxth	r3, r3
 80024a4:	f043 0301 	orr.w	r3, r3, #1
 80024a8:	b29a      	uxth	r2, r3
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	801a      	strh	r2, [r3, #0]
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	881b      	ldrh	r3, [r3, #0]
 80024b2:	84fb      	strh	r3, [r7, #38]	; 0x26
 80024b4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80024b6:	f423 6381 	bic.w	r3, r3, #1032	; 0x408
 80024ba:	f023 0302 	bic.w	r3, r3, #2
 80024be:	84fb      	strh	r3, [r7, #38]	; 0x26
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	889a      	ldrh	r2, [r3, #4]
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	895b      	ldrh	r3, [r3, #10]
 80024c8:	4313      	orrs	r3, r2
 80024ca:	b29a      	uxth	r2, r3
 80024cc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80024ce:	4313      	orrs	r3, r2
 80024d0:	84fb      	strh	r3, [r7, #38]	; 0x26
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80024d6:	801a      	strh	r2, [r3, #0]
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	899a      	ldrh	r2, [r3, #12]
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	891b      	ldrh	r3, [r3, #8]
 80024e0:	4313      	orrs	r3, r2
 80024e2:	b29a      	uxth	r2, r3
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	811a      	strh	r2, [r3, #8]
 80024e8:	bf00      	nop
 80024ea:	3728      	adds	r7, #40	; 0x28
 80024ec:	46bd      	mov	sp, r7
 80024ee:	bd80      	pop	{r7, pc}
 80024f0:	007a1200 	.word	0x007a1200
 80024f4:	431bde83 	.word	0x431bde83
 80024f8:	000186a0 	.word	0x000186a0
 80024fc:	10624dd3 	.word	0x10624dd3

08002500 <I2C_Cmd>:
 8002500:	b480      	push	{r7}
 8002502:	b083      	sub	sp, #12
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
 8002508:	460b      	mov	r3, r1
 800250a:	70fb      	strb	r3, [r7, #3]
 800250c:	78fb      	ldrb	r3, [r7, #3]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d008      	beq.n	8002524 <I2C_Cmd+0x24>
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	881b      	ldrh	r3, [r3, #0]
 8002516:	b29b      	uxth	r3, r3
 8002518:	f043 0301 	orr.w	r3, r3, #1
 800251c:	b29a      	uxth	r2, r3
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	801a      	strh	r2, [r3, #0]
 8002522:	e007      	b.n	8002534 <I2C_Cmd+0x34>
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	881b      	ldrh	r3, [r3, #0]
 8002528:	b29b      	uxth	r3, r3
 800252a:	f023 0301 	bic.w	r3, r3, #1
 800252e:	b29a      	uxth	r2, r3
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	801a      	strh	r2, [r3, #0]
 8002534:	bf00      	nop
 8002536:	370c      	adds	r7, #12
 8002538:	46bd      	mov	sp, r7
 800253a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253e:	4770      	bx	lr

08002540 <I2C_GenerateSTART>:
 8002540:	b480      	push	{r7}
 8002542:	b083      	sub	sp, #12
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
 8002548:	460b      	mov	r3, r1
 800254a:	70fb      	strb	r3, [r7, #3]
 800254c:	78fb      	ldrb	r3, [r7, #3]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d008      	beq.n	8002564 <I2C_GenerateSTART+0x24>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	881b      	ldrh	r3, [r3, #0]
 8002556:	b29b      	uxth	r3, r3
 8002558:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800255c:	b29a      	uxth	r2, r3
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	801a      	strh	r2, [r3, #0]
 8002562:	e007      	b.n	8002574 <I2C_GenerateSTART+0x34>
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	881b      	ldrh	r3, [r3, #0]
 8002568:	b29b      	uxth	r3, r3
 800256a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800256e:	b29a      	uxth	r2, r3
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	801a      	strh	r2, [r3, #0]
 8002574:	bf00      	nop
 8002576:	370c      	adds	r7, #12
 8002578:	46bd      	mov	sp, r7
 800257a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257e:	4770      	bx	lr

08002580 <I2C_GenerateSTOP>:
 8002580:	b480      	push	{r7}
 8002582:	b083      	sub	sp, #12
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
 8002588:	460b      	mov	r3, r1
 800258a:	70fb      	strb	r3, [r7, #3]
 800258c:	78fb      	ldrb	r3, [r7, #3]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d008      	beq.n	80025a4 <I2C_GenerateSTOP+0x24>
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	881b      	ldrh	r3, [r3, #0]
 8002596:	b29b      	uxth	r3, r3
 8002598:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800259c:	b29a      	uxth	r2, r3
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	801a      	strh	r2, [r3, #0]
 80025a2:	e007      	b.n	80025b4 <I2C_GenerateSTOP+0x34>
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	881b      	ldrh	r3, [r3, #0]
 80025a8:	b29b      	uxth	r3, r3
 80025aa:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80025ae:	b29a      	uxth	r2, r3
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	801a      	strh	r2, [r3, #0]
 80025b4:	bf00      	nop
 80025b6:	370c      	adds	r7, #12
 80025b8:	46bd      	mov	sp, r7
 80025ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025be:	4770      	bx	lr

080025c0 <I2C_Send7bitAddress>:
 80025c0:	b480      	push	{r7}
 80025c2:	b083      	sub	sp, #12
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
 80025c8:	460b      	mov	r3, r1
 80025ca:	70fb      	strb	r3, [r7, #3]
 80025cc:	4613      	mov	r3, r2
 80025ce:	70bb      	strb	r3, [r7, #2]
 80025d0:	78bb      	ldrb	r3, [r7, #2]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d004      	beq.n	80025e0 <I2C_Send7bitAddress+0x20>
 80025d6:	78fb      	ldrb	r3, [r7, #3]
 80025d8:	f043 0301 	orr.w	r3, r3, #1
 80025dc:	70fb      	strb	r3, [r7, #3]
 80025de:	e003      	b.n	80025e8 <I2C_Send7bitAddress+0x28>
 80025e0:	78fb      	ldrb	r3, [r7, #3]
 80025e2:	f023 0301 	bic.w	r3, r3, #1
 80025e6:	70fb      	strb	r3, [r7, #3]
 80025e8:	78fb      	ldrb	r3, [r7, #3]
 80025ea:	b29a      	uxth	r2, r3
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	821a      	strh	r2, [r3, #16]
 80025f0:	bf00      	nop
 80025f2:	370c      	adds	r7, #12
 80025f4:	46bd      	mov	sp, r7
 80025f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fa:	4770      	bx	lr

080025fc <I2C_AcknowledgeConfig>:
 80025fc:	b480      	push	{r7}
 80025fe:	b083      	sub	sp, #12
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
 8002604:	460b      	mov	r3, r1
 8002606:	70fb      	strb	r3, [r7, #3]
 8002608:	78fb      	ldrb	r3, [r7, #3]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d008      	beq.n	8002620 <I2C_AcknowledgeConfig+0x24>
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	881b      	ldrh	r3, [r3, #0]
 8002612:	b29b      	uxth	r3, r3
 8002614:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002618:	b29a      	uxth	r2, r3
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	801a      	strh	r2, [r3, #0]
 800261e:	e007      	b.n	8002630 <I2C_AcknowledgeConfig+0x34>
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	881b      	ldrh	r3, [r3, #0]
 8002624:	b29b      	uxth	r3, r3
 8002626:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800262a:	b29a      	uxth	r2, r3
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	801a      	strh	r2, [r3, #0]
 8002630:	bf00      	nop
 8002632:	370c      	adds	r7, #12
 8002634:	46bd      	mov	sp, r7
 8002636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263a:	4770      	bx	lr

0800263c <I2C_SendData>:
 800263c:	b480      	push	{r7}
 800263e:	b083      	sub	sp, #12
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
 8002644:	460b      	mov	r3, r1
 8002646:	70fb      	strb	r3, [r7, #3]
 8002648:	78fb      	ldrb	r3, [r7, #3]
 800264a:	b29a      	uxth	r2, r3
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	821a      	strh	r2, [r3, #16]
 8002650:	bf00      	nop
 8002652:	370c      	adds	r7, #12
 8002654:	46bd      	mov	sp, r7
 8002656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265a:	4770      	bx	lr

0800265c <I2C_ReceiveData>:
 800265c:	b480      	push	{r7}
 800265e:	b083      	sub	sp, #12
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	8a1b      	ldrh	r3, [r3, #16]
 8002668:	b29b      	uxth	r3, r3
 800266a:	b2db      	uxtb	r3, r3
 800266c:	4618      	mov	r0, r3
 800266e:	370c      	adds	r7, #12
 8002670:	46bd      	mov	sp, r7
 8002672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002676:	4770      	bx	lr

08002678 <I2C_CheckEvent>:
 8002678:	b480      	push	{r7}
 800267a:	b087      	sub	sp, #28
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
 8002680:	6039      	str	r1, [r7, #0]
 8002682:	2300      	movs	r3, #0
 8002684:	613b      	str	r3, [r7, #16]
 8002686:	2300      	movs	r3, #0
 8002688:	60fb      	str	r3, [r7, #12]
 800268a:	2300      	movs	r3, #0
 800268c:	60bb      	str	r3, [r7, #8]
 800268e:	2300      	movs	r3, #0
 8002690:	75fb      	strb	r3, [r7, #23]
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	8a9b      	ldrh	r3, [r3, #20]
 8002696:	b29b      	uxth	r3, r3
 8002698:	60fb      	str	r3, [r7, #12]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	8b1b      	ldrh	r3, [r3, #24]
 800269e:	b29b      	uxth	r3, r3
 80026a0:	60bb      	str	r3, [r7, #8]
 80026a2:	68bb      	ldr	r3, [r7, #8]
 80026a4:	041b      	lsls	r3, r3, #16
 80026a6:	60bb      	str	r3, [r7, #8]
 80026a8:	68fa      	ldr	r2, [r7, #12]
 80026aa:	68bb      	ldr	r3, [r7, #8]
 80026ac:	4313      	orrs	r3, r2
 80026ae:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80026b2:	613b      	str	r3, [r7, #16]
 80026b4:	693a      	ldr	r2, [r7, #16]
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	4013      	ands	r3, r2
 80026ba:	683a      	ldr	r2, [r7, #0]
 80026bc:	429a      	cmp	r2, r3
 80026be:	d102      	bne.n	80026c6 <I2C_CheckEvent+0x4e>
 80026c0:	2301      	movs	r3, #1
 80026c2:	75fb      	strb	r3, [r7, #23]
 80026c4:	e001      	b.n	80026ca <I2C_CheckEvent+0x52>
 80026c6:	2300      	movs	r3, #0
 80026c8:	75fb      	strb	r3, [r7, #23]
 80026ca:	7dfb      	ldrb	r3, [r7, #23]
 80026cc:	4618      	mov	r0, r3
 80026ce:	371c      	adds	r7, #28
 80026d0:	46bd      	mov	sp, r7
 80026d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d6:	4770      	bx	lr

080026d8 <I2C_GetFlagStatus>:
 80026d8:	b480      	push	{r7}
 80026da:	b087      	sub	sp, #28
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
 80026e0:	6039      	str	r1, [r7, #0]
 80026e2:	2300      	movs	r3, #0
 80026e4:	75fb      	strb	r3, [r7, #23]
 80026e6:	2300      	movs	r3, #0
 80026e8:	613b      	str	r3, [r7, #16]
 80026ea:	2300      	movs	r3, #0
 80026ec:	60fb      	str	r3, [r7, #12]
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	60fb      	str	r3, [r7, #12]
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	0f1b      	lsrs	r3, r3, #28
 80026f6:	613b      	str	r3, [r7, #16]
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80026fe:	603b      	str	r3, [r7, #0]
 8002700:	693b      	ldr	r3, [r7, #16]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d003      	beq.n	800270e <I2C_GetFlagStatus+0x36>
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	3314      	adds	r3, #20
 800270a:	60fb      	str	r3, [r7, #12]
 800270c:	e005      	b.n	800271a <I2C_GetFlagStatus+0x42>
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	0c1b      	lsrs	r3, r3, #16
 8002712:	603b      	str	r3, [r7, #0]
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	3318      	adds	r3, #24
 8002718:	60fb      	str	r3, [r7, #12]
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681a      	ldr	r2, [r3, #0]
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	4013      	ands	r3, r2
 8002722:	2b00      	cmp	r3, #0
 8002724:	d002      	beq.n	800272c <I2C_GetFlagStatus+0x54>
 8002726:	2301      	movs	r3, #1
 8002728:	75fb      	strb	r3, [r7, #23]
 800272a:	e001      	b.n	8002730 <I2C_GetFlagStatus+0x58>
 800272c:	2300      	movs	r3, #0
 800272e:	75fb      	strb	r3, [r7, #23]
 8002730:	7dfb      	ldrb	r3, [r7, #23]
 8002732:	4618      	mov	r0, r3
 8002734:	371c      	adds	r7, #28
 8002736:	46bd      	mov	sp, r7
 8002738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273c:	4770      	bx	lr
	...

08002740 <TIM_TimeBaseInit>:
 8002740:	b480      	push	{r7}
 8002742:	b085      	sub	sp, #20
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
 8002748:	6039      	str	r1, [r7, #0]
 800274a:	2300      	movs	r3, #0
 800274c:	81fb      	strh	r3, [r7, #14]
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	881b      	ldrh	r3, [r3, #0]
 8002752:	81fb      	strh	r3, [r7, #14]
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	4a29      	ldr	r2, [pc, #164]	; (80027fc <TIM_TimeBaseInit+0xbc>)
 8002758:	4293      	cmp	r3, r2
 800275a:	d013      	beq.n	8002784 <TIM_TimeBaseInit+0x44>
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	4a28      	ldr	r2, [pc, #160]	; (8002800 <TIM_TimeBaseInit+0xc0>)
 8002760:	4293      	cmp	r3, r2
 8002762:	d00f      	beq.n	8002784 <TIM_TimeBaseInit+0x44>
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800276a:	d00b      	beq.n	8002784 <TIM_TimeBaseInit+0x44>
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	4a25      	ldr	r2, [pc, #148]	; (8002804 <TIM_TimeBaseInit+0xc4>)
 8002770:	4293      	cmp	r3, r2
 8002772:	d007      	beq.n	8002784 <TIM_TimeBaseInit+0x44>
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	4a24      	ldr	r2, [pc, #144]	; (8002808 <TIM_TimeBaseInit+0xc8>)
 8002778:	4293      	cmp	r3, r2
 800277a:	d003      	beq.n	8002784 <TIM_TimeBaseInit+0x44>
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	4a23      	ldr	r2, [pc, #140]	; (800280c <TIM_TimeBaseInit+0xcc>)
 8002780:	4293      	cmp	r3, r2
 8002782:	d108      	bne.n	8002796 <TIM_TimeBaseInit+0x56>
 8002784:	89fb      	ldrh	r3, [r7, #14]
 8002786:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800278a:	81fb      	strh	r3, [r7, #14]
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	885a      	ldrh	r2, [r3, #2]
 8002790:	89fb      	ldrh	r3, [r7, #14]
 8002792:	4313      	orrs	r3, r2
 8002794:	81fb      	strh	r3, [r7, #14]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	4a1d      	ldr	r2, [pc, #116]	; (8002810 <TIM_TimeBaseInit+0xd0>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d00c      	beq.n	80027b8 <TIM_TimeBaseInit+0x78>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	4a1c      	ldr	r2, [pc, #112]	; (8002814 <TIM_TimeBaseInit+0xd4>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d008      	beq.n	80027b8 <TIM_TimeBaseInit+0x78>
 80027a6:	89fb      	ldrh	r3, [r7, #14]
 80027a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027ac:	81fb      	strh	r3, [r7, #14]
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	891a      	ldrh	r2, [r3, #8]
 80027b2:	89fb      	ldrh	r3, [r7, #14]
 80027b4:	4313      	orrs	r3, r2
 80027b6:	81fb      	strh	r3, [r7, #14]
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	89fa      	ldrh	r2, [r7, #14]
 80027bc:	801a      	strh	r2, [r3, #0]
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	685a      	ldr	r2, [r3, #4]
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	62da      	str	r2, [r3, #44]	; 0x2c
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	881a      	ldrh	r2, [r3, #0]
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	851a      	strh	r2, [r3, #40]	; 0x28
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	4a0a      	ldr	r2, [pc, #40]	; (80027fc <TIM_TimeBaseInit+0xbc>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d003      	beq.n	80027de <TIM_TimeBaseInit+0x9e>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	4a09      	ldr	r2, [pc, #36]	; (8002800 <TIM_TimeBaseInit+0xc0>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d104      	bne.n	80027e8 <TIM_TimeBaseInit+0xa8>
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	7a9b      	ldrb	r3, [r3, #10]
 80027e2:	b29a      	uxth	r2, r3
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	861a      	strh	r2, [r3, #48]	; 0x30
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2201      	movs	r2, #1
 80027ec:	829a      	strh	r2, [r3, #20]
 80027ee:	bf00      	nop
 80027f0:	3714      	adds	r7, #20
 80027f2:	46bd      	mov	sp, r7
 80027f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f8:	4770      	bx	lr
 80027fa:	bf00      	nop
 80027fc:	40010000 	.word	0x40010000
 8002800:	40010400 	.word	0x40010400
 8002804:	40000400 	.word	0x40000400
 8002808:	40000800 	.word	0x40000800
 800280c:	40000c00 	.word	0x40000c00
 8002810:	40001000 	.word	0x40001000
 8002814:	40001400 	.word	0x40001400

08002818 <TIM_Cmd>:
 8002818:	b480      	push	{r7}
 800281a:	b083      	sub	sp, #12
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
 8002820:	460b      	mov	r3, r1
 8002822:	70fb      	strb	r3, [r7, #3]
 8002824:	78fb      	ldrb	r3, [r7, #3]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d008      	beq.n	800283c <TIM_Cmd+0x24>
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	881b      	ldrh	r3, [r3, #0]
 800282e:	b29b      	uxth	r3, r3
 8002830:	f043 0301 	orr.w	r3, r3, #1
 8002834:	b29a      	uxth	r2, r3
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	801a      	strh	r2, [r3, #0]
 800283a:	e007      	b.n	800284c <TIM_Cmd+0x34>
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	881b      	ldrh	r3, [r3, #0]
 8002840:	b29b      	uxth	r3, r3
 8002842:	f023 0301 	bic.w	r3, r3, #1
 8002846:	b29a      	uxth	r2, r3
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	801a      	strh	r2, [r3, #0]
 800284c:	bf00      	nop
 800284e:	370c      	adds	r7, #12
 8002850:	46bd      	mov	sp, r7
 8002852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002856:	4770      	bx	lr

08002858 <TIM_OC4Init>:
 8002858:	b480      	push	{r7}
 800285a:	b085      	sub	sp, #20
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
 8002860:	6039      	str	r1, [r7, #0]
 8002862:	2300      	movs	r3, #0
 8002864:	81bb      	strh	r3, [r7, #12]
 8002866:	2300      	movs	r3, #0
 8002868:	817b      	strh	r3, [r7, #10]
 800286a:	2300      	movs	r3, #0
 800286c:	81fb      	strh	r3, [r7, #14]
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	8c1b      	ldrh	r3, [r3, #32]
 8002872:	b29b      	uxth	r3, r3
 8002874:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002878:	b29a      	uxth	r2, r3
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	841a      	strh	r2, [r3, #32]
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	8c1b      	ldrh	r3, [r3, #32]
 8002882:	817b      	strh	r3, [r7, #10]
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	889b      	ldrh	r3, [r3, #4]
 8002888:	81fb      	strh	r3, [r7, #14]
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	8b9b      	ldrh	r3, [r3, #28]
 800288e:	81bb      	strh	r3, [r7, #12]
 8002890:	89bb      	ldrh	r3, [r7, #12]
 8002892:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002896:	81bb      	strh	r3, [r7, #12]
 8002898:	89bb      	ldrh	r3, [r7, #12]
 800289a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800289e:	81bb      	strh	r3, [r7, #12]
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	881b      	ldrh	r3, [r3, #0]
 80028a4:	021b      	lsls	r3, r3, #8
 80028a6:	b29a      	uxth	r2, r3
 80028a8:	89bb      	ldrh	r3, [r7, #12]
 80028aa:	4313      	orrs	r3, r2
 80028ac:	81bb      	strh	r3, [r7, #12]
 80028ae:	897b      	ldrh	r3, [r7, #10]
 80028b0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80028b4:	817b      	strh	r3, [r7, #10]
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	899b      	ldrh	r3, [r3, #12]
 80028ba:	031b      	lsls	r3, r3, #12
 80028bc:	b29a      	uxth	r2, r3
 80028be:	897b      	ldrh	r3, [r7, #10]
 80028c0:	4313      	orrs	r3, r2
 80028c2:	817b      	strh	r3, [r7, #10]
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	885b      	ldrh	r3, [r3, #2]
 80028c8:	031b      	lsls	r3, r3, #12
 80028ca:	b29a      	uxth	r2, r3
 80028cc:	897b      	ldrh	r3, [r7, #10]
 80028ce:	4313      	orrs	r3, r2
 80028d0:	817b      	strh	r3, [r7, #10]
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	4a12      	ldr	r2, [pc, #72]	; (8002920 <TIM_OC4Init+0xc8>)
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d003      	beq.n	80028e2 <TIM_OC4Init+0x8a>
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	4a11      	ldr	r2, [pc, #68]	; (8002924 <TIM_OC4Init+0xcc>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d10a      	bne.n	80028f8 <TIM_OC4Init+0xa0>
 80028e2:	89fb      	ldrh	r3, [r7, #14]
 80028e4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80028e8:	81fb      	strh	r3, [r7, #14]
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	8a1b      	ldrh	r3, [r3, #16]
 80028ee:	019b      	lsls	r3, r3, #6
 80028f0:	b29a      	uxth	r2, r3
 80028f2:	89fb      	ldrh	r3, [r7, #14]
 80028f4:	4313      	orrs	r3, r2
 80028f6:	81fb      	strh	r3, [r7, #14]
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	89fa      	ldrh	r2, [r7, #14]
 80028fc:	809a      	strh	r2, [r3, #4]
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	89ba      	ldrh	r2, [r7, #12]
 8002902:	839a      	strh	r2, [r3, #28]
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	689a      	ldr	r2, [r3, #8]
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	641a      	str	r2, [r3, #64]	; 0x40
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	897a      	ldrh	r2, [r7, #10]
 8002910:	841a      	strh	r2, [r3, #32]
 8002912:	bf00      	nop
 8002914:	3714      	adds	r7, #20
 8002916:	46bd      	mov	sp, r7
 8002918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291c:	4770      	bx	lr
 800291e:	bf00      	nop
 8002920:	40010000 	.word	0x40010000
 8002924:	40010400 	.word	0x40010400

08002928 <TIM_SetCompare4>:
 8002928:	b480      	push	{r7}
 800292a:	b083      	sub	sp, #12
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
 8002930:	6039      	str	r1, [r7, #0]
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	683a      	ldr	r2, [r7, #0]
 8002936:	641a      	str	r2, [r3, #64]	; 0x40
 8002938:	bf00      	nop
 800293a:	370c      	adds	r7, #12
 800293c:	46bd      	mov	sp, r7
 800293e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002942:	4770      	bx	lr

08002944 <TIM_CtrlPWMOutputs>:
 8002944:	b480      	push	{r7}
 8002946:	b083      	sub	sp, #12
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
 800294c:	460b      	mov	r3, r1
 800294e:	70fb      	strb	r3, [r7, #3]
 8002950:	78fb      	ldrb	r3, [r7, #3]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d00c      	beq.n	8002970 <TIM_CtrlPWMOutputs+0x2c>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800295c:	b29b      	uxth	r3, r3
 800295e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002962:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002966:	b29a      	uxth	r2, r3
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
 800296e:	e009      	b.n	8002984 <TIM_CtrlPWMOutputs+0x40>
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002976:	b29b      	uxth	r3, r3
 8002978:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800297c:	b29a      	uxth	r2, r3
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
 8002984:	bf00      	nop
 8002986:	370c      	adds	r7, #12
 8002988:	46bd      	mov	sp, r7
 800298a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298e:	4770      	bx	lr

08002990 <NVIC_SetPriority>:
 8002990:	b480      	push	{r7}
 8002992:	b083      	sub	sp, #12
 8002994:	af00      	add	r7, sp, #0
 8002996:	4603      	mov	r3, r0
 8002998:	6039      	str	r1, [r7, #0]
 800299a:	71fb      	strb	r3, [r7, #7]
 800299c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	da0b      	bge.n	80029bc <NVIC_SetPriority+0x2c>
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	b2da      	uxtb	r2, r3
 80029a8:	490c      	ldr	r1, [pc, #48]	; (80029dc <NVIC_SetPriority+0x4c>)
 80029aa:	79fb      	ldrb	r3, [r7, #7]
 80029ac:	f003 030f 	and.w	r3, r3, #15
 80029b0:	3b04      	subs	r3, #4
 80029b2:	0112      	lsls	r2, r2, #4
 80029b4:	b2d2      	uxtb	r2, r2
 80029b6:	440b      	add	r3, r1
 80029b8:	761a      	strb	r2, [r3, #24]
 80029ba:	e009      	b.n	80029d0 <NVIC_SetPriority+0x40>
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	b2da      	uxtb	r2, r3
 80029c0:	4907      	ldr	r1, [pc, #28]	; (80029e0 <NVIC_SetPriority+0x50>)
 80029c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029c6:	0112      	lsls	r2, r2, #4
 80029c8:	b2d2      	uxtb	r2, r2
 80029ca:	440b      	add	r3, r1
 80029cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 80029d0:	bf00      	nop
 80029d2:	370c      	adds	r7, #12
 80029d4:	46bd      	mov	sp, r7
 80029d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029da:	4770      	bx	lr
 80029dc:	e000ed00 	.word	0xe000ed00
 80029e0:	e000e100 	.word	0xe000e100

080029e4 <SysTick_Config>:
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b082      	sub	sp, #8
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	3b01      	subs	r3, #1
 80029f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80029f4:	d301      	bcc.n	80029fa <SysTick_Config+0x16>
 80029f6:	2301      	movs	r3, #1
 80029f8:	e00f      	b.n	8002a1a <SysTick_Config+0x36>
 80029fa:	4a0a      	ldr	r2, [pc, #40]	; (8002a24 <SysTick_Config+0x40>)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	3b01      	subs	r3, #1
 8002a00:	6053      	str	r3, [r2, #4]
 8002a02:	210f      	movs	r1, #15
 8002a04:	f04f 30ff 	mov.w	r0, #4294967295
 8002a08:	f7ff ffc2 	bl	8002990 <NVIC_SetPriority>
 8002a0c:	4b05      	ldr	r3, [pc, #20]	; (8002a24 <SysTick_Config+0x40>)
 8002a0e:	2200      	movs	r2, #0
 8002a10:	609a      	str	r2, [r3, #8]
 8002a12:	4b04      	ldr	r3, [pc, #16]	; (8002a24 <SysTick_Config+0x40>)
 8002a14:	2207      	movs	r2, #7
 8002a16:	601a      	str	r2, [r3, #0]
 8002a18:	2300      	movs	r3, #0
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	3708      	adds	r7, #8
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bd80      	pop	{r7, pc}
 8002a22:	bf00      	nop
 8002a24:	e000e010 	.word	0xe000e010

08002a28 <TimerInit>:
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b084      	sub	sp, #16
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	463b      	mov	r3, r7
 8002a30:	4618      	mov	r0, r3
 8002a32:	f7fe f8f9 	bl	8000c28 <RCC_GetClocksFreq>
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	4a0a      	ldr	r2, [pc, #40]	; (8002a64 <TimerInit+0x3c>)
 8002a3a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a3e:	099b      	lsrs	r3, r3, #6
 8002a40:	4618      	mov	r0, r3
 8002a42:	f7ff ffcf 	bl	80029e4 <SysTick_Config>
 8002a46:	2101      	movs	r1, #1
 8002a48:	f04f 30ff 	mov.w	r0, #4294967295
 8002a4c:	f7ff ffa0 	bl	8002990 <NVIC_SetPriority>
 8002a50:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8002a54:	2100      	movs	r1, #0
 8002a56:	4804      	ldr	r0, [pc, #16]	; (8002a68 <TimerInit+0x40>)
 8002a58:	f001 ffde 	bl	8004a18 <memsetl>
 8002a5c:	bf00      	nop
 8002a5e:	3710      	adds	r7, #16
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bd80      	pop	{r7, pc}
 8002a64:	10624dd3 	.word	0x10624dd3
 8002a68:	200001ec 	.word	0x200001ec

08002a6c <TimerStart>:
 8002a6c:	b590      	push	{r4, r7, lr}
 8002a6e:	b087      	sub	sp, #28
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	60f8      	str	r0, [r7, #12]
 8002a74:	60b9      	str	r1, [r7, #8]
 8002a76:	603b      	str	r3, [r7, #0]
 8002a78:	4613      	mov	r3, r2
 8002a7a:	71fb      	strb	r3, [r7, #7]
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	75fb      	strb	r3, [r7, #23]
 8002a80:	e04c      	b.n	8002b1c <TimerStart+0xb0>
 8002a82:	7dfa      	ldrb	r2, [r7, #23]
 8002a84:	4929      	ldr	r1, [pc, #164]	; (8002b2c <TimerStart+0xc0>)
 8002a86:	4613      	mov	r3, r2
 8002a88:	005b      	lsls	r3, r3, #1
 8002a8a:	4413      	add	r3, r2
 8002a8c:	00db      	lsls	r3, r3, #3
 8002a8e:	440b      	add	r3, r1
 8002a90:	3310      	adds	r3, #16
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d13e      	bne.n	8002b16 <TimerStart+0xaa>
 8002a98:	7dfa      	ldrb	r2, [r7, #23]
 8002a9a:	4924      	ldr	r1, [pc, #144]	; (8002b2c <TimerStart+0xc0>)
 8002a9c:	4613      	mov	r3, r2
 8002a9e:	005b      	lsls	r3, r3, #1
 8002aa0:	4413      	add	r3, r2
 8002aa2:	00db      	lsls	r3, r3, #3
 8002aa4:	440b      	add	r3, r1
 8002aa6:	68fa      	ldr	r2, [r7, #12]
 8002aa8:	601a      	str	r2, [r3, #0]
 8002aaa:	7dfa      	ldrb	r2, [r7, #23]
 8002aac:	491f      	ldr	r1, [pc, #124]	; (8002b2c <TimerStart+0xc0>)
 8002aae:	4613      	mov	r3, r2
 8002ab0:	005b      	lsls	r3, r3, #1
 8002ab2:	4413      	add	r3, r2
 8002ab4:	00db      	lsls	r3, r3, #3
 8002ab6:	440b      	add	r3, r1
 8002ab8:	3310      	adds	r3, #16
 8002aba:	683a      	ldr	r2, [r7, #0]
 8002abc:	601a      	str	r2, [r3, #0]
 8002abe:	7dfa      	ldrb	r2, [r7, #23]
 8002ac0:	491a      	ldr	r1, [pc, #104]	; (8002b2c <TimerStart+0xc0>)
 8002ac2:	4613      	mov	r3, r2
 8002ac4:	005b      	lsls	r3, r3, #1
 8002ac6:	4413      	add	r3, r2
 8002ac8:	00db      	lsls	r3, r3, #3
 8002aca:	440b      	add	r3, r1
 8002acc:	330c      	adds	r3, #12
 8002ace:	79fa      	ldrb	r2, [r7, #7]
 8002ad0:	701a      	strb	r2, [r3, #0]
 8002ad2:	7dfa      	ldrb	r2, [r7, #23]
 8002ad4:	4915      	ldr	r1, [pc, #84]	; (8002b2c <TimerStart+0xc0>)
 8002ad6:	4613      	mov	r3, r2
 8002ad8:	005b      	lsls	r3, r3, #1
 8002ada:	4413      	add	r3, r2
 8002adc:	00db      	lsls	r3, r3, #3
 8002ade:	440b      	add	r3, r1
 8002ae0:	3314      	adds	r3, #20
 8002ae2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002ae4:	601a      	str	r2, [r3, #0]
 8002ae6:	7dfc      	ldrb	r4, [r7, #23]
 8002ae8:	f000 f872 	bl	8002bd0 <GetMilSecTick>
 8002aec:	4601      	mov	r1, r0
 8002aee:	4a0f      	ldr	r2, [pc, #60]	; (8002b2c <TimerStart+0xc0>)
 8002af0:	4623      	mov	r3, r4
 8002af2:	005b      	lsls	r3, r3, #1
 8002af4:	4423      	add	r3, r4
 8002af6:	00db      	lsls	r3, r3, #3
 8002af8:	4413      	add	r3, r2
 8002afa:	3304      	adds	r3, #4
 8002afc:	6019      	str	r1, [r3, #0]
 8002afe:	7dfa      	ldrb	r2, [r7, #23]
 8002b00:	490a      	ldr	r1, [pc, #40]	; (8002b2c <TimerStart+0xc0>)
 8002b02:	4613      	mov	r3, r2
 8002b04:	005b      	lsls	r3, r3, #1
 8002b06:	4413      	add	r3, r2
 8002b08:	00db      	lsls	r3, r3, #3
 8002b0a:	440b      	add	r3, r1
 8002b0c:	3308      	adds	r3, #8
 8002b0e:	68ba      	ldr	r2, [r7, #8]
 8002b10:	601a      	str	r2, [r3, #0]
 8002b12:	7dfb      	ldrb	r3, [r7, #23]
 8002b14:	e006      	b.n	8002b24 <TimerStart+0xb8>
 8002b16:	7dfb      	ldrb	r3, [r7, #23]
 8002b18:	3301      	adds	r3, #1
 8002b1a:	75fb      	strb	r3, [r7, #23]
 8002b1c:	7dfb      	ldrb	r3, [r7, #23]
 8002b1e:	2b0f      	cmp	r3, #15
 8002b20:	d9af      	bls.n	8002a82 <TimerStart+0x16>
 8002b22:	23ff      	movs	r3, #255	; 0xff
 8002b24:	4618      	mov	r0, r3
 8002b26:	371c      	adds	r7, #28
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	bd90      	pop	{r4, r7, pc}
 8002b2c:	200001ec 	.word	0x200001ec

08002b30 <TimerStop>:
 8002b30:	b480      	push	{r7}
 8002b32:	b083      	sub	sp, #12
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	4603      	mov	r3, r0
 8002b38:	71fb      	strb	r3, [r7, #7]
 8002b3a:	79fb      	ldrb	r3, [r7, #7]
 8002b3c:	2b0f      	cmp	r3, #15
 8002b3e:	d80a      	bhi.n	8002b56 <TimerStop+0x26>
 8002b40:	79fa      	ldrb	r2, [r7, #7]
 8002b42:	4922      	ldr	r1, [pc, #136]	; (8002bcc <TimerStop+0x9c>)
 8002b44:	4613      	mov	r3, r2
 8002b46:	005b      	lsls	r3, r3, #1
 8002b48:	4413      	add	r3, r2
 8002b4a:	00db      	lsls	r3, r3, #3
 8002b4c:	440b      	add	r3, r1
 8002b4e:	3310      	adds	r3, #16
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d101      	bne.n	8002b5a <TimerStop+0x2a>
 8002b56:	2300      	movs	r3, #0
 8002b58:	e031      	b.n	8002bbe <TimerStop+0x8e>
 8002b5a:	79fa      	ldrb	r2, [r7, #7]
 8002b5c:	491b      	ldr	r1, [pc, #108]	; (8002bcc <TimerStop+0x9c>)
 8002b5e:	4613      	mov	r3, r2
 8002b60:	005b      	lsls	r3, r3, #1
 8002b62:	4413      	add	r3, r2
 8002b64:	00db      	lsls	r3, r3, #3
 8002b66:	440b      	add	r3, r1
 8002b68:	2200      	movs	r2, #0
 8002b6a:	601a      	str	r2, [r3, #0]
 8002b6c:	79fa      	ldrb	r2, [r7, #7]
 8002b6e:	4917      	ldr	r1, [pc, #92]	; (8002bcc <TimerStop+0x9c>)
 8002b70:	4613      	mov	r3, r2
 8002b72:	005b      	lsls	r3, r3, #1
 8002b74:	4413      	add	r3, r2
 8002b76:	00db      	lsls	r3, r3, #3
 8002b78:	440b      	add	r3, r1
 8002b7a:	3310      	adds	r3, #16
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	601a      	str	r2, [r3, #0]
 8002b80:	79fa      	ldrb	r2, [r7, #7]
 8002b82:	4912      	ldr	r1, [pc, #72]	; (8002bcc <TimerStop+0x9c>)
 8002b84:	4613      	mov	r3, r2
 8002b86:	005b      	lsls	r3, r3, #1
 8002b88:	4413      	add	r3, r2
 8002b8a:	00db      	lsls	r3, r3, #3
 8002b8c:	440b      	add	r3, r1
 8002b8e:	330c      	adds	r3, #12
 8002b90:	2200      	movs	r2, #0
 8002b92:	701a      	strb	r2, [r3, #0]
 8002b94:	79fa      	ldrb	r2, [r7, #7]
 8002b96:	490d      	ldr	r1, [pc, #52]	; (8002bcc <TimerStop+0x9c>)
 8002b98:	4613      	mov	r3, r2
 8002b9a:	005b      	lsls	r3, r3, #1
 8002b9c:	4413      	add	r3, r2
 8002b9e:	00db      	lsls	r3, r3, #3
 8002ba0:	440b      	add	r3, r1
 8002ba2:	3308      	adds	r3, #8
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	601a      	str	r2, [r3, #0]
 8002ba8:	79fa      	ldrb	r2, [r7, #7]
 8002baa:	4908      	ldr	r1, [pc, #32]	; (8002bcc <TimerStop+0x9c>)
 8002bac:	4613      	mov	r3, r2
 8002bae:	005b      	lsls	r3, r3, #1
 8002bb0:	4413      	add	r3, r2
 8002bb2:	00db      	lsls	r3, r3, #3
 8002bb4:	440b      	add	r3, r1
 8002bb6:	3304      	adds	r3, #4
 8002bb8:	2200      	movs	r2, #0
 8002bba:	601a      	str	r2, [r3, #0]
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	370c      	adds	r7, #12
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc8:	4770      	bx	lr
 8002bca:	bf00      	nop
 8002bcc:	200001ec 	.word	0x200001ec

08002bd0 <GetMilSecTick>:
 8002bd0:	b480      	push	{r7}
 8002bd2:	af00      	add	r7, sp, #0
 8002bd4:	4b03      	ldr	r3, [pc, #12]	; (8002be4 <GetMilSecTick+0x14>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4618      	mov	r0, r3
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be0:	4770      	bx	lr
 8002be2:	bf00      	nop
 8002be4:	2000036c 	.word	0x2000036c

08002be8 <processTimerScheduler>:
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b084      	sub	sp, #16
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	2300      	movs	r3, #0
 8002bf0:	73fb      	strb	r3, [r7, #15]
 8002bf2:	e068      	b.n	8002cc6 <processTimerScheduler+0xde>
 8002bf4:	7bfa      	ldrb	r2, [r7, #15]
 8002bf6:	4937      	ldr	r1, [pc, #220]	; (8002cd4 <processTimerScheduler+0xec>)
 8002bf8:	4613      	mov	r3, r2
 8002bfa:	005b      	lsls	r3, r3, #1
 8002bfc:	4413      	add	r3, r2
 8002bfe:	00db      	lsls	r3, r3, #3
 8002c00:	440b      	add	r3, r1
 8002c02:	3310      	adds	r3, #16
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d05a      	beq.n	8002cc0 <processTimerScheduler+0xd8>
 8002c0a:	7bfb      	ldrb	r3, [r7, #15]
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	f000 f863 	bl	8002cd8 <TimeExpired>
 8002c12:	4603      	mov	r3, r0
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d053      	beq.n	8002cc0 <processTimerScheduler+0xd8>
 8002c18:	7bfa      	ldrb	r2, [r7, #15]
 8002c1a:	492e      	ldr	r1, [pc, #184]	; (8002cd4 <processTimerScheduler+0xec>)
 8002c1c:	4613      	mov	r3, r2
 8002c1e:	005b      	lsls	r3, r3, #1
 8002c20:	4413      	add	r3, r2
 8002c22:	00db      	lsls	r3, r3, #3
 8002c24:	440b      	add	r3, r1
 8002c26:	3310      	adds	r3, #16
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	60bb      	str	r3, [r7, #8]
 8002c2c:	7bfa      	ldrb	r2, [r7, #15]
 8002c2e:	4929      	ldr	r1, [pc, #164]	; (8002cd4 <processTimerScheduler+0xec>)
 8002c30:	4613      	mov	r3, r2
 8002c32:	005b      	lsls	r3, r3, #1
 8002c34:	4413      	add	r3, r2
 8002c36:	00db      	lsls	r3, r3, #3
 8002c38:	440b      	add	r3, r1
 8002c3a:	3314      	adds	r3, #20
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	607b      	str	r3, [r7, #4]
 8002c40:	7bfa      	ldrb	r2, [r7, #15]
 8002c42:	4924      	ldr	r1, [pc, #144]	; (8002cd4 <processTimerScheduler+0xec>)
 8002c44:	4613      	mov	r3, r2
 8002c46:	005b      	lsls	r3, r3, #1
 8002c48:	4413      	add	r3, r2
 8002c4a:	00db      	lsls	r3, r3, #3
 8002c4c:	440b      	add	r3, r1
 8002c4e:	330c      	adds	r3, #12
 8002c50:	781b      	ldrb	r3, [r3, #0]
 8002c52:	b2db      	uxtb	r3, r3
 8002c54:	2bff      	cmp	r3, #255	; 0xff
 8002c56:	d020      	beq.n	8002c9a <processTimerScheduler+0xb2>
 8002c58:	7bfa      	ldrb	r2, [r7, #15]
 8002c5a:	491e      	ldr	r1, [pc, #120]	; (8002cd4 <processTimerScheduler+0xec>)
 8002c5c:	4613      	mov	r3, r2
 8002c5e:	005b      	lsls	r3, r3, #1
 8002c60:	4413      	add	r3, r2
 8002c62:	00db      	lsls	r3, r3, #3
 8002c64:	440b      	add	r3, r1
 8002c66:	330c      	adds	r3, #12
 8002c68:	781b      	ldrb	r3, [r3, #0]
 8002c6a:	b2db      	uxtb	r3, r3
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d014      	beq.n	8002c9a <processTimerScheduler+0xb2>
 8002c70:	7bfa      	ldrb	r2, [r7, #15]
 8002c72:	4918      	ldr	r1, [pc, #96]	; (8002cd4 <processTimerScheduler+0xec>)
 8002c74:	4613      	mov	r3, r2
 8002c76:	005b      	lsls	r3, r3, #1
 8002c78:	4413      	add	r3, r2
 8002c7a:	00db      	lsls	r3, r3, #3
 8002c7c:	440b      	add	r3, r1
 8002c7e:	330c      	adds	r3, #12
 8002c80:	781b      	ldrb	r3, [r3, #0]
 8002c82:	b2db      	uxtb	r3, r3
 8002c84:	3b01      	subs	r3, #1
 8002c86:	b2d8      	uxtb	r0, r3
 8002c88:	4912      	ldr	r1, [pc, #72]	; (8002cd4 <processTimerScheduler+0xec>)
 8002c8a:	4613      	mov	r3, r2
 8002c8c:	005b      	lsls	r3, r3, #1
 8002c8e:	4413      	add	r3, r2
 8002c90:	00db      	lsls	r3, r3, #3
 8002c92:	440b      	add	r3, r1
 8002c94:	330c      	adds	r3, #12
 8002c96:	4602      	mov	r2, r0
 8002c98:	701a      	strb	r2, [r3, #0]
 8002c9a:	7bfa      	ldrb	r2, [r7, #15]
 8002c9c:	490d      	ldr	r1, [pc, #52]	; (8002cd4 <processTimerScheduler+0xec>)
 8002c9e:	4613      	mov	r3, r2
 8002ca0:	005b      	lsls	r3, r3, #1
 8002ca2:	4413      	add	r3, r2
 8002ca4:	00db      	lsls	r3, r3, #3
 8002ca6:	440b      	add	r3, r1
 8002ca8:	330c      	adds	r3, #12
 8002caa:	781b      	ldrb	r3, [r3, #0]
 8002cac:	b2db      	uxtb	r3, r3
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d103      	bne.n	8002cba <processTimerScheduler+0xd2>
 8002cb2:	7bfb      	ldrb	r3, [r7, #15]
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	f7ff ff3b 	bl	8002b30 <TimerStop>
 8002cba:	68bb      	ldr	r3, [r7, #8]
 8002cbc:	6878      	ldr	r0, [r7, #4]
 8002cbe:	4798      	blx	r3
 8002cc0:	7bfb      	ldrb	r3, [r7, #15]
 8002cc2:	3301      	adds	r3, #1
 8002cc4:	73fb      	strb	r3, [r7, #15]
 8002cc6:	7bfb      	ldrb	r3, [r7, #15]
 8002cc8:	2b0f      	cmp	r3, #15
 8002cca:	d993      	bls.n	8002bf4 <processTimerScheduler+0xc>
 8002ccc:	bf00      	nop
 8002cce:	3710      	adds	r7, #16
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	bd80      	pop	{r7, pc}
 8002cd4:	200001ec 	.word	0x200001ec

08002cd8 <TimeExpired>:
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b084      	sub	sp, #16
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	4603      	mov	r3, r0
 8002ce0:	71fb      	strb	r3, [r7, #7]
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	60fb      	str	r3, [r7, #12]
 8002ce6:	b672      	cpsid	i
 8002ce8:	f7ff ff72 	bl	8002bd0 <GetMilSecTick>
 8002cec:	60b8      	str	r0, [r7, #8]
 8002cee:	79fb      	ldrb	r3, [r7, #7]
 8002cf0:	2b0f      	cmp	r3, #15
 8002cf2:	d80a      	bhi.n	8002d0a <TimeExpired+0x32>
 8002cf4:	79fa      	ldrb	r2, [r7, #7]
 8002cf6:	492a      	ldr	r1, [pc, #168]	; (8002da0 <TimeExpired+0xc8>)
 8002cf8:	4613      	mov	r3, r2
 8002cfa:	005b      	lsls	r3, r3, #1
 8002cfc:	4413      	add	r3, r2
 8002cfe:	00db      	lsls	r3, r3, #3
 8002d00:	440b      	add	r3, r1
 8002d02:	3310      	adds	r3, #16
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d102      	bne.n	8002d10 <TimeExpired+0x38>
 8002d0a:	b662      	cpsie	i
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	e042      	b.n	8002d96 <TimeExpired+0xbe>
 8002d10:	79fa      	ldrb	r2, [r7, #7]
 8002d12:	4923      	ldr	r1, [pc, #140]	; (8002da0 <TimeExpired+0xc8>)
 8002d14:	4613      	mov	r3, r2
 8002d16:	005b      	lsls	r3, r3, #1
 8002d18:	4413      	add	r3, r2
 8002d1a:	00db      	lsls	r3, r3, #3
 8002d1c:	440b      	add	r3, r1
 8002d1e:	3304      	adds	r3, #4
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	68ba      	ldr	r2, [r7, #8]
 8002d24:	429a      	cmp	r2, r3
 8002d26:	d30c      	bcc.n	8002d42 <TimeExpired+0x6a>
 8002d28:	79fa      	ldrb	r2, [r7, #7]
 8002d2a:	491d      	ldr	r1, [pc, #116]	; (8002da0 <TimeExpired+0xc8>)
 8002d2c:	4613      	mov	r3, r2
 8002d2e:	005b      	lsls	r3, r3, #1
 8002d30:	4413      	add	r3, r2
 8002d32:	00db      	lsls	r3, r3, #3
 8002d34:	440b      	add	r3, r1
 8002d36:	3304      	adds	r3, #4
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	68ba      	ldr	r2, [r7, #8]
 8002d3c:	1ad3      	subs	r3, r2, r3
 8002d3e:	60fb      	str	r3, [r7, #12]
 8002d40:	e00e      	b.n	8002d60 <TimeExpired+0x88>
 8002d42:	79fa      	ldrb	r2, [r7, #7]
 8002d44:	4916      	ldr	r1, [pc, #88]	; (8002da0 <TimeExpired+0xc8>)
 8002d46:	4613      	mov	r3, r2
 8002d48:	005b      	lsls	r3, r3, #1
 8002d4a:	4413      	add	r3, r2
 8002d4c:	00db      	lsls	r3, r3, #3
 8002d4e:	440b      	add	r3, r1
 8002d50:	3304      	adds	r3, #4
 8002d52:	681a      	ldr	r2, [r3, #0]
 8002d54:	68bb      	ldr	r3, [r7, #8]
 8002d56:	1ad3      	subs	r3, r2, r3
 8002d58:	60fb      	str	r3, [r7, #12]
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	43db      	mvns	r3, r3
 8002d5e:	60fb      	str	r3, [r7, #12]
 8002d60:	79fa      	ldrb	r2, [r7, #7]
 8002d62:	490f      	ldr	r1, [pc, #60]	; (8002da0 <TimeExpired+0xc8>)
 8002d64:	4613      	mov	r3, r2
 8002d66:	005b      	lsls	r3, r3, #1
 8002d68:	4413      	add	r3, r2
 8002d6a:	00db      	lsls	r3, r3, #3
 8002d6c:	440b      	add	r3, r1
 8002d6e:	3308      	adds	r3, #8
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	68fa      	ldr	r2, [r7, #12]
 8002d74:	429a      	cmp	r2, r3
 8002d76:	d202      	bcs.n	8002d7e <TimeExpired+0xa6>
 8002d78:	b662      	cpsie	i
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	e00b      	b.n	8002d96 <TimeExpired+0xbe>
 8002d7e:	79fa      	ldrb	r2, [r7, #7]
 8002d80:	4907      	ldr	r1, [pc, #28]	; (8002da0 <TimeExpired+0xc8>)
 8002d82:	4613      	mov	r3, r2
 8002d84:	005b      	lsls	r3, r3, #1
 8002d86:	4413      	add	r3, r2
 8002d88:	00db      	lsls	r3, r3, #3
 8002d8a:	440b      	add	r3, r1
 8002d8c:	3304      	adds	r3, #4
 8002d8e:	68ba      	ldr	r2, [r7, #8]
 8002d90:	601a      	str	r2, [r3, #0]
 8002d92:	b662      	cpsie	i
 8002d94:	2301      	movs	r3, #1
 8002d96:	4618      	mov	r0, r3
 8002d98:	3710      	adds	r7, #16
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bd80      	pop	{r7, pc}
 8002d9e:	bf00      	nop
 8002da0:	200001ec 	.word	0x200001ec

08002da4 <SysTick_Handler>:
 8002da4:	b480      	push	{r7}
 8002da6:	af00      	add	r7, sp, #0
 8002da8:	4b04      	ldr	r3, [pc, #16]	; (8002dbc <SysTick_Handler+0x18>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	3301      	adds	r3, #1
 8002dae:	4a03      	ldr	r2, [pc, #12]	; (8002dbc <SysTick_Handler+0x18>)
 8002db0:	6013      	str	r3, [r2, #0]
 8002db2:	bf00      	nop
 8002db4:	46bd      	mov	sp, r7
 8002db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dba:	4770      	bx	lr
 8002dbc:	2000036c 	.word	0x2000036c

08002dc0 <TemHumSensor_Init>:
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	af00      	add	r7, sp, #0
 8002dc4:	f000 f802 	bl	8002dcc <i2c_config>
 8002dc8:	bf00      	nop
 8002dca:	bd80      	pop	{r7, pc}

08002dcc <i2c_config>:
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b086      	sub	sp, #24
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	2101      	movs	r1, #1
 8002dd4:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8002dd8:	f7fd fff4 	bl	8000dc4 <RCC_APB1PeriphClockCmd>
 8002ddc:	4b1d      	ldr	r3, [pc, #116]	; (8002e54 <i2c_config+0x88>)
 8002dde:	60bb      	str	r3, [r7, #8]
 8002de0:	2300      	movs	r3, #0
 8002de2:	81bb      	strh	r3, [r7, #12]
 8002de4:	f64b 73ff 	movw	r3, #49151	; 0xbfff
 8002de8:	81fb      	strh	r3, [r7, #14]
 8002dea:	2300      	movs	r3, #0
 8002dec:	823b      	strh	r3, [r7, #16]
 8002dee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002df2:	827b      	strh	r3, [r7, #18]
 8002df4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002df8:	82bb      	strh	r3, [r7, #20]
 8002dfa:	f107 0308 	add.w	r3, r7, #8
 8002dfe:	4619      	mov	r1, r3
 8002e00:	4815      	ldr	r0, [pc, #84]	; (8002e58 <i2c_config+0x8c>)
 8002e02:	f7ff fabb 	bl	800237c <I2C_Init>
 8002e06:	2101      	movs	r1, #1
 8002e08:	4813      	ldr	r0, [pc, #76]	; (8002e58 <i2c_config+0x8c>)
 8002e0a:	f7ff fb79 	bl	8002500 <I2C_Cmd>
 8002e0e:	2101      	movs	r1, #1
 8002e10:	2002      	movs	r0, #2
 8002e12:	f7fd ffb7 	bl	8000d84 <RCC_AHB1PeriphClockCmd>
 8002e16:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002e1a:	603b      	str	r3, [r7, #0]
 8002e1c:	2302      	movs	r3, #2
 8002e1e:	713b      	strb	r3, [r7, #4]
 8002e20:	2302      	movs	r3, #2
 8002e22:	717b      	strb	r3, [r7, #5]
 8002e24:	2301      	movs	r3, #1
 8002e26:	71bb      	strb	r3, [r7, #6]
 8002e28:	2300      	movs	r3, #0
 8002e2a:	71fb      	strb	r3, [r7, #7]
 8002e2c:	463b      	mov	r3, r7
 8002e2e:	4619      	mov	r1, r3
 8002e30:	480a      	ldr	r0, [pc, #40]	; (8002e5c <i2c_config+0x90>)
 8002e32:	f7fd fe09 	bl	8000a48 <GPIO_Init>
 8002e36:	2204      	movs	r2, #4
 8002e38:	2108      	movs	r1, #8
 8002e3a:	4808      	ldr	r0, [pc, #32]	; (8002e5c <i2c_config+0x90>)
 8002e3c:	f7fd feab 	bl	8000b96 <GPIO_PinAFConfig>
 8002e40:	2204      	movs	r2, #4
 8002e42:	2109      	movs	r1, #9
 8002e44:	4805      	ldr	r0, [pc, #20]	; (8002e5c <i2c_config+0x90>)
 8002e46:	f7fd fea6 	bl	8000b96 <GPIO_PinAFConfig>
 8002e4a:	bf00      	nop
 8002e4c:	3718      	adds	r7, #24
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bd80      	pop	{r7, pc}
 8002e52:	bf00      	nop
 8002e54:	00061a80 	.word	0x00061a80
 8002e58:	40005400 	.word	0x40005400
 8002e5c:	40020400 	.word	0x40020400

08002e60 <USART2_IRQHandler>:
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b082      	sub	sp, #8
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	b672      	cpsid	i
 8002e68:	f240 5125 	movw	r1, #1317	; 0x525
 8002e6c:	480e      	ldr	r0, [pc, #56]	; (8002ea8 <USART2_IRQHandler+0x48>)
 8002e6e:	f001 fdfc 	bl	8004a6a <USART_GetITStatus>
 8002e72:	4603      	mov	r3, r0
 8002e74:	2b01      	cmp	r3, #1
 8002e76:	d112      	bne.n	8002e9e <USART2_IRQHandler+0x3e>
 8002e78:	4b0c      	ldr	r3, [pc, #48]	; (8002eac <USART2_IRQHandler+0x4c>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	607b      	str	r3, [r7, #4]
 8002e7e:	480a      	ldr	r0, [pc, #40]	; (8002ea8 <USART2_IRQHandler+0x48>)
 8002e80:	f001 fde3 	bl	8004a4a <USART_ReceiveData>
 8002e84:	4603      	mov	r3, r0
 8002e86:	b2db      	uxtb	r3, r3
 8002e88:	70fb      	strb	r3, [r7, #3]
 8002e8a:	1cfb      	adds	r3, r7, #3
 8002e8c:	4619      	mov	r1, r3
 8002e8e:	6878      	ldr	r0, [r7, #4]
 8002e90:	f001 fd32 	bl	80048f8 <bufEnDat>
 8002e94:	f240 5125 	movw	r1, #1317	; 0x525
 8002e98:	4803      	ldr	r0, [pc, #12]	; (8002ea8 <USART2_IRQHandler+0x48>)
 8002e9a:	f001 fe41 	bl	8004b20 <USART_ClearITPendingBit>
 8002e9e:	b662      	cpsie	i
 8002ea0:	bf00      	nop
 8002ea2:	3708      	adds	r7, #8
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	bd80      	pop	{r7, pc}
 8002ea8:	40004400 	.word	0x40004400
 8002eac:	20000370 	.word	0x20000370

08002eb0 <delayMicroseconds>:
 8002eb0:	b480      	push	{r7}
 8002eb2:	b083      	sub	sp, #12
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
 8002eb8:	bf00      	nop
 8002eba:	370c      	adds	r7, #12
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec2:	4770      	bx	lr

08002ec4 <ucg_gpio_init>:
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b082      	sub	sp, #8
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	2101      	movs	r1, #1
 8002ecc:	2007      	movs	r0, #7
 8002ece:	f7fd ff59 	bl	8000d84 <RCC_AHB1PeriphClockCmd>
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	713b      	strb	r3, [r7, #4]
 8002ed6:	2303      	movs	r3, #3
 8002ed8:	717b      	strb	r3, [r7, #5]
 8002eda:	2300      	movs	r3, #0
 8002edc:	71bb      	strb	r3, [r7, #6]
 8002ede:	2300      	movs	r3, #0
 8002ee0:	71fb      	strb	r3, [r7, #7]
 8002ee2:	f44f 7368 	mov.w	r3, #928	; 0x3a0
 8002ee6:	603b      	str	r3, [r7, #0]
 8002ee8:	463b      	mov	r3, r7
 8002eea:	4619      	mov	r1, r3
 8002eec:	480a      	ldr	r0, [pc, #40]	; (8002f18 <ucg_gpio_init+0x54>)
 8002eee:	f7fd fdab 	bl	8000a48 <GPIO_Init>
 8002ef2:	f44f 6388 	mov.w	r3, #1088	; 0x440
 8002ef6:	603b      	str	r3, [r7, #0]
 8002ef8:	463b      	mov	r3, r7
 8002efa:	4619      	mov	r1, r3
 8002efc:	4807      	ldr	r0, [pc, #28]	; (8002f1c <ucg_gpio_init+0x58>)
 8002efe:	f7fd fda3 	bl	8000a48 <GPIO_Init>
 8002f02:	2380      	movs	r3, #128	; 0x80
 8002f04:	603b      	str	r3, [r7, #0]
 8002f06:	463b      	mov	r3, r7
 8002f08:	4619      	mov	r1, r3
 8002f0a:	4805      	ldr	r0, [pc, #20]	; (8002f20 <ucg_gpio_init+0x5c>)
 8002f0c:	f7fd fd9c 	bl	8000a48 <GPIO_Init>
 8002f10:	bf00      	nop
 8002f12:	3708      	adds	r7, #8
 8002f14:	46bd      	mov	sp, r7
 8002f16:	bd80      	pop	{r7, pc}
 8002f18:	40020000 	.word	0x40020000
 8002f1c:	40020400 	.word	0x40020400
 8002f20:	40020800 	.word	0x40020800

08002f24 <ucg_com_arduino_send_generic_SW_SPI>:
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b084      	sub	sp, #16
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
 8002f2c:	460b      	mov	r3, r1
 8002f2e:	70fb      	strb	r3, [r7, #3]
 8002f30:	2308      	movs	r3, #8
 8002f32:	73fb      	strb	r3, [r7, #15]
 8002f34:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	da05      	bge.n	8002f48 <ucg_com_arduino_send_generic_SW_SPI+0x24>
 8002f3c:	2201      	movs	r2, #1
 8002f3e:	2180      	movs	r1, #128	; 0x80
 8002f40:	4814      	ldr	r0, [pc, #80]	; (8002f94 <ucg_com_arduino_send_generic_SW_SPI+0x70>)
 8002f42:	f7fd fe10 	bl	8000b66 <GPIO_WriteBit>
 8002f46:	e004      	b.n	8002f52 <ucg_com_arduino_send_generic_SW_SPI+0x2e>
 8002f48:	2200      	movs	r2, #0
 8002f4a:	2180      	movs	r1, #128	; 0x80
 8002f4c:	4811      	ldr	r0, [pc, #68]	; (8002f94 <ucg_com_arduino_send_generic_SW_SPI+0x70>)
 8002f4e:	f7fd fe0a 	bl	8000b66 <GPIO_WriteBit>
 8002f52:	2001      	movs	r0, #1
 8002f54:	f7ff ffac 	bl	8002eb0 <delayMicroseconds>
 8002f58:	2201      	movs	r2, #1
 8002f5a:	2120      	movs	r1, #32
 8002f5c:	480d      	ldr	r0, [pc, #52]	; (8002f94 <ucg_com_arduino_send_generic_SW_SPI+0x70>)
 8002f5e:	f7fd fe02 	bl	8000b66 <GPIO_WriteBit>
 8002f62:	2001      	movs	r0, #1
 8002f64:	f7ff ffa4 	bl	8002eb0 <delayMicroseconds>
 8002f68:	7bfb      	ldrb	r3, [r7, #15]
 8002f6a:	3b01      	subs	r3, #1
 8002f6c:	73fb      	strb	r3, [r7, #15]
 8002f6e:	2200      	movs	r2, #0
 8002f70:	2120      	movs	r1, #32
 8002f72:	4808      	ldr	r0, [pc, #32]	; (8002f94 <ucg_com_arduino_send_generic_SW_SPI+0x70>)
 8002f74:	f7fd fdf7 	bl	8000b66 <GPIO_WriteBit>
 8002f78:	2001      	movs	r0, #1
 8002f7a:	f7ff ff99 	bl	8002eb0 <delayMicroseconds>
 8002f7e:	78fb      	ldrb	r3, [r7, #3]
 8002f80:	005b      	lsls	r3, r3, #1
 8002f82:	70fb      	strb	r3, [r7, #3]
 8002f84:	7bfb      	ldrb	r3, [r7, #15]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d1d4      	bne.n	8002f34 <ucg_com_arduino_send_generic_SW_SPI+0x10>
 8002f8a:	bf00      	nop
 8002f8c:	3710      	adds	r7, #16
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bd80      	pop	{r7, pc}
 8002f92:	bf00      	nop
 8002f94:	40020000 	.word	0x40020000

08002f98 <ucg_com_arduino_generic_SW_SPI>:
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b084      	sub	sp, #16
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	60f8      	str	r0, [r7, #12]
 8002fa0:	607b      	str	r3, [r7, #4]
 8002fa2:	460b      	mov	r3, r1
 8002fa4:	817b      	strh	r3, [r7, #10]
 8002fa6:	4613      	mov	r3, r2
 8002fa8:	813b      	strh	r3, [r7, #8]
 8002faa:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002fae:	3b0a      	subs	r3, #10
 8002fb0:	2b0b      	cmp	r3, #11
 8002fb2:	f200 80dc 	bhi.w	800316e <ucg_com_arduino_generic_SW_SPI+0x1d6>
 8002fb6:	a201      	add	r2, pc, #4	; (adr r2, 8002fbc <ucg_com_arduino_generic_SW_SPI+0x24>)
 8002fb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fbc:	08002fed 	.word	0x08002fed
 8002fc0:	0800316f 	.word	0x0800316f
 8002fc4:	0800303f 	.word	0x0800303f
 8002fc8:	08003049 	.word	0x08003049
 8002fcc:	08003059 	.word	0x08003059
 8002fd0:	08003069 	.word	0x08003069
 8002fd4:	0800307b 	.word	0x0800307b
 8002fd8:	0800309b 	.word	0x0800309b
 8002fdc:	080030c3 	.word	0x080030c3
 8002fe0:	080030f9 	.word	0x080030f9
 8002fe4:	08003117 	.word	0x08003117
 8002fe8:	08003167 	.word	0x08003167
 8002fec:	f7ff ff6a 	bl	8002ec4 <ucg_gpio_init>
 8002ff0:	2201      	movs	r2, #1
 8002ff2:	2180      	movs	r1, #128	; 0x80
 8002ff4:	4860      	ldr	r0, [pc, #384]	; (8003178 <ucg_com_arduino_generic_SW_SPI+0x1e0>)
 8002ff6:	f7fd fdb6 	bl	8000b66 <GPIO_WriteBit>
 8002ffa:	2201      	movs	r2, #1
 8002ffc:	2140      	movs	r1, #64	; 0x40
 8002ffe:	485f      	ldr	r0, [pc, #380]	; (800317c <ucg_com_arduino_generic_SW_SPI+0x1e4>)
 8003000:	f7fd fdb1 	bl	8000b66 <GPIO_WriteBit>
 8003004:	2201      	movs	r2, #1
 8003006:	2180      	movs	r1, #128	; 0x80
 8003008:	485d      	ldr	r0, [pc, #372]	; (8003180 <ucg_com_arduino_generic_SW_SPI+0x1e8>)
 800300a:	f7fd fdac 	bl	8000b66 <GPIO_WriteBit>
 800300e:	2201      	movs	r2, #1
 8003010:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003014:	4858      	ldr	r0, [pc, #352]	; (8003178 <ucg_com_arduino_generic_SW_SPI+0x1e0>)
 8003016:	f7fd fda6 	bl	8000b66 <GPIO_WriteBit>
 800301a:	2200      	movs	r2, #0
 800301c:	2120      	movs	r1, #32
 800301e:	4856      	ldr	r0, [pc, #344]	; (8003178 <ucg_com_arduino_generic_SW_SPI+0x1e0>)
 8003020:	f7fd fda1 	bl	8000b66 <GPIO_WriteBit>
 8003024:	2201      	movs	r2, #1
 8003026:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800302a:	4854      	ldr	r0, [pc, #336]	; (800317c <ucg_com_arduino_generic_SW_SPI+0x1e4>)
 800302c:	f7fd fd9b 	bl	8000b66 <GPIO_WriteBit>
 8003030:	2201      	movs	r2, #1
 8003032:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003036:	4850      	ldr	r0, [pc, #320]	; (8003178 <ucg_com_arduino_generic_SW_SPI+0x1e0>)
 8003038:	f7fd fd95 	bl	8000b66 <GPIO_WriteBit>
 800303c:	e097      	b.n	800316e <ucg_com_arduino_generic_SW_SPI+0x1d6>
 800303e:	893b      	ldrh	r3, [r7, #8]
 8003040:	4618      	mov	r0, r3
 8003042:	f7ff ff35 	bl	8002eb0 <delayMicroseconds>
 8003046:	e092      	b.n	800316e <ucg_com_arduino_generic_SW_SPI+0x1d6>
 8003048:	893b      	ldrh	r3, [r7, #8]
 800304a:	b2db      	uxtb	r3, r3
 800304c:	461a      	mov	r2, r3
 800304e:	2180      	movs	r1, #128	; 0x80
 8003050:	484b      	ldr	r0, [pc, #300]	; (8003180 <ucg_com_arduino_generic_SW_SPI+0x1e8>)
 8003052:	f7fd fd88 	bl	8000b66 <GPIO_WriteBit>
 8003056:	e08a      	b.n	800316e <ucg_com_arduino_generic_SW_SPI+0x1d6>
 8003058:	893b      	ldrh	r3, [r7, #8]
 800305a:	b2db      	uxtb	r3, r3
 800305c:	461a      	mov	r2, r3
 800305e:	2140      	movs	r1, #64	; 0x40
 8003060:	4846      	ldr	r0, [pc, #280]	; (800317c <ucg_com_arduino_generic_SW_SPI+0x1e4>)
 8003062:	f7fd fd80 	bl	8000b66 <GPIO_WriteBit>
 8003066:	e082      	b.n	800316e <ucg_com_arduino_generic_SW_SPI+0x1d6>
 8003068:	893b      	ldrh	r3, [r7, #8]
 800306a:	b2db      	uxtb	r3, r3
 800306c:	461a      	mov	r2, r3
 800306e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003072:	4841      	ldr	r0, [pc, #260]	; (8003178 <ucg_com_arduino_generic_SW_SPI+0x1e0>)
 8003074:	f7fd fd77 	bl	8000b66 <GPIO_WriteBit>
 8003078:	e079      	b.n	800316e <ucg_com_arduino_generic_SW_SPI+0x1d6>
 800307a:	893b      	ldrh	r3, [r7, #8]
 800307c:	b2db      	uxtb	r3, r3
 800307e:	4619      	mov	r1, r3
 8003080:	68f8      	ldr	r0, [r7, #12]
 8003082:	f7ff ff4f 	bl	8002f24 <ucg_com_arduino_send_generic_SW_SPI>
 8003086:	e072      	b.n	800316e <ucg_com_arduino_generic_SW_SPI+0x1d6>
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	781b      	ldrb	r3, [r3, #0]
 800308c:	4619      	mov	r1, r3
 800308e:	68f8      	ldr	r0, [r7, #12]
 8003090:	f7ff ff48 	bl	8002f24 <ucg_com_arduino_send_generic_SW_SPI>
 8003094:	893b      	ldrh	r3, [r7, #8]
 8003096:	3b01      	subs	r3, #1
 8003098:	813b      	strh	r3, [r7, #8]
 800309a:	893b      	ldrh	r3, [r7, #8]
 800309c:	2b00      	cmp	r3, #0
 800309e:	d1f3      	bne.n	8003088 <ucg_com_arduino_generic_SW_SPI+0xf0>
 80030a0:	e065      	b.n	800316e <ucg_com_arduino_generic_SW_SPI+0x1d6>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	781b      	ldrb	r3, [r3, #0]
 80030a6:	4619      	mov	r1, r3
 80030a8:	68f8      	ldr	r0, [r7, #12]
 80030aa:	f7ff ff3b 	bl	8002f24 <ucg_com_arduino_send_generic_SW_SPI>
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	3301      	adds	r3, #1
 80030b2:	781b      	ldrb	r3, [r3, #0]
 80030b4:	4619      	mov	r1, r3
 80030b6:	68f8      	ldr	r0, [r7, #12]
 80030b8:	f7ff ff34 	bl	8002f24 <ucg_com_arduino_send_generic_SW_SPI>
 80030bc:	893b      	ldrh	r3, [r7, #8]
 80030be:	3b01      	subs	r3, #1
 80030c0:	813b      	strh	r3, [r7, #8]
 80030c2:	893b      	ldrh	r3, [r7, #8]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d1ec      	bne.n	80030a2 <ucg_com_arduino_generic_SW_SPI+0x10a>
 80030c8:	e051      	b.n	800316e <ucg_com_arduino_generic_SW_SPI+0x1d6>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	781b      	ldrb	r3, [r3, #0]
 80030ce:	4619      	mov	r1, r3
 80030d0:	68f8      	ldr	r0, [r7, #12]
 80030d2:	f7ff ff27 	bl	8002f24 <ucg_com_arduino_send_generic_SW_SPI>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	3301      	adds	r3, #1
 80030da:	781b      	ldrb	r3, [r3, #0]
 80030dc:	4619      	mov	r1, r3
 80030de:	68f8      	ldr	r0, [r7, #12]
 80030e0:	f7ff ff20 	bl	8002f24 <ucg_com_arduino_send_generic_SW_SPI>
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	3302      	adds	r3, #2
 80030e8:	781b      	ldrb	r3, [r3, #0]
 80030ea:	4619      	mov	r1, r3
 80030ec:	68f8      	ldr	r0, [r7, #12]
 80030ee:	f7ff ff19 	bl	8002f24 <ucg_com_arduino_send_generic_SW_SPI>
 80030f2:	893b      	ldrh	r3, [r7, #8]
 80030f4:	3b01      	subs	r3, #1
 80030f6:	813b      	strh	r3, [r7, #8]
 80030f8:	893b      	ldrh	r3, [r7, #8]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d1e5      	bne.n	80030ca <ucg_com_arduino_generic_SW_SPI+0x132>
 80030fe:	e036      	b.n	800316e <ucg_com_arduino_generic_SW_SPI+0x1d6>
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	1c5a      	adds	r2, r3, #1
 8003104:	607a      	str	r2, [r7, #4]
 8003106:	781b      	ldrb	r3, [r3, #0]
 8003108:	4619      	mov	r1, r3
 800310a:	68f8      	ldr	r0, [r7, #12]
 800310c:	f7ff ff0a 	bl	8002f24 <ucg_com_arduino_send_generic_SW_SPI>
 8003110:	893b      	ldrh	r3, [r7, #8]
 8003112:	3b01      	subs	r3, #1
 8003114:	813b      	strh	r3, [r7, #8]
 8003116:	893b      	ldrh	r3, [r7, #8]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d1f1      	bne.n	8003100 <ucg_com_arduino_generic_SW_SPI+0x168>
 800311c:	e027      	b.n	800316e <ucg_com_arduino_generic_SW_SPI+0x1d6>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	781b      	ldrb	r3, [r3, #0]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d010      	beq.n	8003148 <ucg_com_arduino_generic_SW_SPI+0x1b0>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	781b      	ldrb	r3, [r3, #0]
 800312a:	2b01      	cmp	r3, #1
 800312c:	d106      	bne.n	800313c <ucg_com_arduino_generic_SW_SPI+0x1a4>
 800312e:	2200      	movs	r2, #0
 8003130:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003134:	4810      	ldr	r0, [pc, #64]	; (8003178 <ucg_com_arduino_generic_SW_SPI+0x1e0>)
 8003136:	f7fd fd16 	bl	8000b66 <GPIO_WriteBit>
 800313a:	e005      	b.n	8003148 <ucg_com_arduino_generic_SW_SPI+0x1b0>
 800313c:	2201      	movs	r2, #1
 800313e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003142:	480d      	ldr	r0, [pc, #52]	; (8003178 <ucg_com_arduino_generic_SW_SPI+0x1e0>)
 8003144:	f7fd fd0f 	bl	8000b66 <GPIO_WriteBit>
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	3301      	adds	r3, #1
 800314c:	607b      	str	r3, [r7, #4]
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	781b      	ldrb	r3, [r3, #0]
 8003152:	4619      	mov	r1, r3
 8003154:	68f8      	ldr	r0, [r7, #12]
 8003156:	f7ff fee5 	bl	8002f24 <ucg_com_arduino_send_generic_SW_SPI>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	3301      	adds	r3, #1
 800315e:	607b      	str	r3, [r7, #4]
 8003160:	893b      	ldrh	r3, [r7, #8]
 8003162:	3b01      	subs	r3, #1
 8003164:	813b      	strh	r3, [r7, #8]
 8003166:	893b      	ldrh	r3, [r7, #8]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d1d8      	bne.n	800311e <ucg_com_arduino_generic_SW_SPI+0x186>
 800316c:	bf00      	nop
 800316e:	2301      	movs	r3, #1
 8003170:	4618      	mov	r0, r3
 8003172:	3710      	adds	r7, #16
 8003174:	46bd      	mov	sp, r7
 8003176:	bd80      	pop	{r7, pc}
 8003178:	40020000 	.word	0x40020000
 800317c:	40020400 	.word	0x40020400
 8003180:	40020800 	.word	0x40020800

08003184 <Ucglib4WireSWSPI_begin>:
 8003184:	b580      	push	{r7, lr}
 8003186:	b082      	sub	sp, #8
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
 800318c:	460b      	mov	r3, r1
 800318e:	70fb      	strb	r3, [r7, #3]
 8003190:	4b07      	ldr	r3, [pc, #28]	; (80031b0 <Ucglib4WireSWSPI_begin+0x2c>)
 8003192:	4a08      	ldr	r2, [pc, #32]	; (80031b4 <Ucglib4WireSWSPI_begin+0x30>)
 8003194:	4908      	ldr	r1, [pc, #32]	; (80031b8 <Ucglib4WireSWSPI_begin+0x34>)
 8003196:	6878      	ldr	r0, [r7, #4]
 8003198:	f001 f9a2 	bl	80044e0 <ucg_Init>
 800319c:	78fb      	ldrb	r3, [r7, #3]
 800319e:	4619      	mov	r1, r3
 80031a0:	6878      	ldr	r0, [r7, #4]
 80031a2:	f000 ff86 	bl	80040b2 <ucg_SetFontMode>
 80031a6:	bf00      	nop
 80031a8:	3708      	adds	r7, #8
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bd80      	pop	{r7, pc}
 80031ae:	bf00      	nop
 80031b0:	08002f99 	.word	0x08002f99
 80031b4:	080037f1 	.word	0x080037f1
 80031b8:	08003919 	.word	0x08003919

080031bc <ucg_DrawBox>:
 80031bc:	b580      	push	{r7, lr}
 80031be:	b084      	sub	sp, #16
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	60f8      	str	r0, [r7, #12]
 80031c4:	4608      	mov	r0, r1
 80031c6:	4611      	mov	r1, r2
 80031c8:	461a      	mov	r2, r3
 80031ca:	4603      	mov	r3, r0
 80031cc:	817b      	strh	r3, [r7, #10]
 80031ce:	460b      	mov	r3, r1
 80031d0:	813b      	strh	r3, [r7, #8]
 80031d2:	4613      	mov	r3, r2
 80031d4:	80fb      	strh	r3, [r7, #6]
 80031d6:	e014      	b.n	8003202 <ucg_DrawBox+0x46>
 80031d8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80031dc:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80031e0:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 80031e4:	68f8      	ldr	r0, [r7, #12]
 80031e6:	f001 f9ed 	bl	80045c4 <ucg_DrawHLine>
 80031ea:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80031ee:	b29b      	uxth	r3, r3
 80031f0:	3b01      	subs	r3, #1
 80031f2:	b29b      	uxth	r3, r3
 80031f4:	833b      	strh	r3, [r7, #24]
 80031f6:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80031fa:	b29b      	uxth	r3, r3
 80031fc:	3301      	adds	r3, #1
 80031fe:	b29b      	uxth	r3, r3
 8003200:	813b      	strh	r3, [r7, #8]
 8003202:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8003206:	2b00      	cmp	r3, #0
 8003208:	dce6      	bgt.n	80031d8 <ucg_DrawBox+0x1c>
 800320a:	bf00      	nop
 800320c:	3710      	adds	r7, #16
 800320e:	46bd      	mov	sp, r7
 8003210:	bd80      	pop	{r7, pc}

08003212 <ucg_ClearScreen>:
 8003212:	b580      	push	{r7, lr}
 8003214:	b084      	sub	sp, #16
 8003216:	af02      	add	r7, sp, #8
 8003218:	6078      	str	r0, [r7, #4]
 800321a:	2300      	movs	r3, #0
 800321c:	9300      	str	r3, [sp, #0]
 800321e:	2300      	movs	r3, #0
 8003220:	2200      	movs	r2, #0
 8003222:	2100      	movs	r1, #0
 8003224:	6878      	ldr	r0, [r7, #4]
 8003226:	f001 f9ec 	bl	8004602 <ucg_SetColor>
 800322a:	6878      	ldr	r0, [r7, #4]
 800322c:	f000 fb3b 	bl	80038a6 <ucg_SetMaxClipRange>
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800323c:	9300      	str	r3, [sp, #0]
 800323e:	4613      	mov	r3, r2
 8003240:	2200      	movs	r2, #0
 8003242:	2100      	movs	r1, #0
 8003244:	6878      	ldr	r0, [r7, #4]
 8003246:	f7ff ffb9 	bl	80031bc <ucg_DrawBox>
 800324a:	23ff      	movs	r3, #255	; 0xff
 800324c:	9300      	str	r3, [sp, #0]
 800324e:	23ff      	movs	r3, #255	; 0xff
 8003250:	22ff      	movs	r2, #255	; 0xff
 8003252:	2100      	movs	r1, #0
 8003254:	6878      	ldr	r0, [r7, #4]
 8003256:	f001 f9d4 	bl	8004602 <ucg_SetColor>
 800325a:	bf00      	nop
 800325c:	3708      	adds	r7, #8
 800325e:	46bd      	mov	sp, r7
 8003260:	bd80      	pop	{r7, pc}

08003262 <ucg_ccs_init>:
 8003262:	b480      	push	{r7}
 8003264:	b083      	sub	sp, #12
 8003266:	af00      	add	r7, sp, #0
 8003268:	6078      	str	r0, [r7, #4]
 800326a:	4608      	mov	r0, r1
 800326c:	4611      	mov	r1, r2
 800326e:	461a      	mov	r2, r3
 8003270:	4603      	mov	r3, r0
 8003272:	70fb      	strb	r3, [r7, #3]
 8003274:	460b      	mov	r3, r1
 8003276:	70bb      	strb	r3, [r7, #2]
 8003278:	4613      	mov	r3, r2
 800327a:	803b      	strh	r3, [r7, #0]
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	78fa      	ldrb	r2, [r7, #3]
 8003280:	705a      	strb	r2, [r3, #1]
 8003282:	78bb      	ldrb	r3, [r7, #2]
 8003284:	b29a      	uxth	r2, r3
 8003286:	78fb      	ldrb	r3, [r7, #3]
 8003288:	b29b      	uxth	r3, r3
 800328a:	1ad3      	subs	r3, r2, r3
 800328c:	b29b      	uxth	r3, r3
 800328e:	b21a      	sxth	r2, r3
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	809a      	strh	r2, [r3, #4]
 8003294:	883b      	ldrh	r3, [r7, #0]
 8003296:	3b01      	subs	r3, #1
 8003298:	b29b      	uxth	r3, r3
 800329a:	b21a      	sxth	r2, r3
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	811a      	strh	r2, [r3, #8]
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2201      	movs	r2, #1
 80032a4:	805a      	strh	r2, [r3, #2]
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80032ac:	461a      	mov	r2, r3
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80032b4:	fb92 f3f3 	sdiv	r3, r2, r3
 80032b8:	b21a      	sxth	r2, r3
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	80da      	strh	r2, [r3, #6]
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	da0c      	bge.n	80032e2 <ucg_ccs_init+0x80>
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80032ce:	b29b      	uxth	r3, r3
 80032d0:	425b      	negs	r3, r3
 80032d2:	b29b      	uxth	r3, r3
 80032d4:	b21a      	sxth	r2, r3
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	809a      	strh	r2, [r3, #4]
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80032e0:	805a      	strh	r2, [r3, #2]
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80032e8:	687a      	ldr	r2, [r7, #4]
 80032ea:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 80032ee:	fb93 f1f2 	sdiv	r1, r3, r2
 80032f2:	fb02 f201 	mul.w	r2, r2, r1
 80032f6:	1a9b      	subs	r3, r3, r2
 80032f8:	b21a      	sxth	r2, r3
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	815a      	strh	r2, [r3, #10]
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003304:	0fda      	lsrs	r2, r3, #31
 8003306:	4413      	add	r3, r2
 8003308:	105b      	asrs	r3, r3, #1
 800330a:	b21a      	sxth	r2, r3
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	819a      	strh	r2, [r3, #12]
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	78fa      	ldrb	r2, [r7, #3]
 8003314:	701a      	strb	r2, [r3, #0]
 8003316:	bf00      	nop
 8003318:	370c      	adds	r7, #12
 800331a:	46bd      	mov	sp, r7
 800331c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003320:	4770      	bx	lr

08003322 <ucg_ccs_step>:
 8003322:	b480      	push	{r7}
 8003324:	b083      	sub	sp, #12
 8003326:	af00      	add	r7, sp, #0
 8003328:	6078      	str	r0, [r7, #4]
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	781a      	ldrb	r2, [r3, #0]
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8003334:	b2db      	uxtb	r3, r3
 8003336:	4413      	add	r3, r2
 8003338:	b2da      	uxtb	r2, r3
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	701a      	strb	r2, [r3, #0]
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8003344:	b29a      	uxth	r2, r3
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800334c:	b29b      	uxth	r3, r3
 800334e:	4413      	add	r3, r2
 8003350:	b29b      	uxth	r3, r3
 8003352:	b21a      	sxth	r2, r3
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	819a      	strh	r2, [r3, #12]
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003364:	429a      	cmp	r2, r3
 8003366:	db16      	blt.n	8003396 <ucg_ccs_step+0x74>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	781a      	ldrb	r2, [r3, #0]
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003372:	b2db      	uxtb	r3, r3
 8003374:	4413      	add	r3, r2
 8003376:	b2da      	uxtb	r2, r3
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	701a      	strb	r2, [r3, #0]
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8003382:	b29a      	uxth	r2, r3
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800338a:	b29b      	uxth	r3, r3
 800338c:	1ad3      	subs	r3, r2, r3
 800338e:	b29b      	uxth	r3, r3
 8003390:	b21a      	sxth	r2, r3
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	819a      	strh	r2, [r3, #12]
 8003396:	bf00      	nop
 8003398:	370c      	adds	r7, #12
 800339a:	46bd      	mov	sp, r7
 800339c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a0:	4770      	bx	lr

080033a2 <ucg_ccs_seek>:
 80033a2:	b480      	push	{r7}
 80033a4:	b085      	sub	sp, #20
 80033a6:	af00      	add	r7, sp, #0
 80033a8:	6078      	str	r0, [r7, #4]
 80033aa:	460b      	mov	r3, r1
 80033ac:	807b      	strh	r3, [r7, #2]
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80033b4:	b2da      	uxtb	r2, r3
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	701a      	strb	r2, [r3, #0]
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	781a      	ldrb	r2, [r3, #0]
 80033be:	887b      	ldrh	r3, [r7, #2]
 80033c0:	b2db      	uxtb	r3, r3
 80033c2:	fb12 f303 	smulbb	r3, r2, r3
 80033c6:	b2da      	uxtb	r2, r3
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	701a      	strb	r2, [r3, #0]
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80033d2:	b29a      	uxth	r2, r3
 80033d4:	887b      	ldrh	r3, [r7, #2]
 80033d6:	fb12 f303 	smulbb	r3, r2, r3
 80033da:	b29a      	uxth	r2, r3
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80033e2:	0fd9      	lsrs	r1, r3, #31
 80033e4:	440b      	add	r3, r1
 80033e6:	105b      	asrs	r3, r3, #1
 80033e8:	b21b      	sxth	r3, r3
 80033ea:	b29b      	uxth	r3, r3
 80033ec:	4413      	add	r3, r2
 80033ee:	b29b      	uxth	r3, r3
 80033f0:	81fb      	strh	r3, [r7, #14]
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	db0e      	blt.n	800341a <ucg_ccs_seek+0x78>
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	781a      	ldrb	r2, [r3, #0]
 8003400:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003404:	6879      	ldr	r1, [r7, #4]
 8003406:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 800340a:	fb93 f3f1 	sdiv	r3, r3, r1
 800340e:	b2db      	uxtb	r3, r3
 8003410:	4413      	add	r3, r2
 8003412:	b2da      	uxtb	r2, r3
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	701a      	strb	r2, [r3, #0]
 8003418:	e00d      	b.n	8003436 <ucg_ccs_seek+0x94>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	781a      	ldrb	r2, [r3, #0]
 800341e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003422:	6879      	ldr	r1, [r7, #4]
 8003424:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 8003428:	fb93 f3f1 	sdiv	r3, r3, r1
 800342c:	b2db      	uxtb	r3, r3
 800342e:	1ad3      	subs	r3, r2, r3
 8003430:	b2da      	uxtb	r2, r3
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	701a      	strb	r2, [r3, #0]
 8003436:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800343a:	687a      	ldr	r2, [r7, #4]
 800343c:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8003440:	fb93 f1f2 	sdiv	r1, r3, r2
 8003444:	fb02 f201 	mul.w	r2, r2, r1
 8003448:	1a9b      	subs	r3, r3, r2
 800344a:	b21a      	sxth	r2, r3
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	819a      	strh	r2, [r3, #12]
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	781a      	ldrb	r2, [r3, #0]
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	785b      	ldrb	r3, [r3, #1]
 8003458:	4413      	add	r3, r2
 800345a:	b2da      	uxtb	r2, r3
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	701a      	strb	r2, [r3, #0]
 8003460:	bf00      	nop
 8003462:	3714      	adds	r7, #20
 8003464:	46bd      	mov	sp, r7
 8003466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346a:	4770      	bx	lr

0800346c <ucg_dev_default_cb>:
 800346c:	b580      	push	{r7, lr}
 800346e:	b084      	sub	sp, #16
 8003470:	af00      	add	r7, sp, #0
 8003472:	60f8      	str	r0, [r7, #12]
 8003474:	460b      	mov	r3, r1
 8003476:	607a      	str	r2, [r7, #4]
 8003478:	817b      	strh	r3, [r7, #10]
 800347a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800347e:	2b0c      	cmp	r3, #12
 8003480:	d00a      	beq.n	8003498 <ucg_dev_default_cb+0x2c>
 8003482:	2b17      	cmp	r3, #23
 8003484:	d10f      	bne.n	80034a6 <ucg_dev_default_cb+0x3a>
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	68db      	ldr	r3, [r3, #12]
 800348a:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 800348e:	687a      	ldr	r2, [r7, #4]
 8003490:	68f8      	ldr	r0, [r7, #12]
 8003492:	4798      	blx	r3
 8003494:	4603      	mov	r3, r0
 8003496:	e007      	b.n	80034a8 <ucg_dev_default_cb+0x3c>
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	687a      	ldr	r2, [r7, #4]
 800349c:	3370      	adds	r3, #112	; 0x70
 800349e:	6810      	ldr	r0, [r2, #0]
 80034a0:	6851      	ldr	r1, [r2, #4]
 80034a2:	c303      	stmia	r3!, {r0, r1}
 80034a4:	bf00      	nop
 80034a6:	2301      	movs	r3, #1
 80034a8:	4618      	mov	r0, r3
 80034aa:	3710      	adds	r7, #16
 80034ac:	46bd      	mov	sp, r7
 80034ae:	bd80      	pop	{r7, pc}

080034b0 <ucg_ext_none>:
 80034b0:	b480      	push	{r7}
 80034b2:	b085      	sub	sp, #20
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	60f8      	str	r0, [r7, #12]
 80034b8:	460b      	mov	r3, r1
 80034ba:	607a      	str	r2, [r7, #4]
 80034bc:	817b      	strh	r3, [r7, #10]
 80034be:	2301      	movs	r3, #1
 80034c0:	4618      	mov	r0, r3
 80034c2:	3714      	adds	r7, #20
 80034c4:	46bd      	mov	sp, r7
 80034c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ca:	4770      	bx	lr

080034cc <ucg_handle_st7735_l90fx>:
 80034cc:	b590      	push	{r4, r7, lr}
 80034ce:	b085      	sub	sp, #20
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
 80034d4:	6878      	ldr	r0, [r7, #4]
 80034d6:	f001 fbdd 	bl	8004c94 <ucg_clip_l90fx>
 80034da:	4603      	mov	r3, r0
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d053      	beq.n	8003588 <ucg_handle_st7735_l90fx+0xbc>
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 80034e6:	2b01      	cmp	r3, #1
 80034e8:	d008      	beq.n	80034fc <ucg_handle_st7735_l90fx+0x30>
 80034ea:	2b02      	cmp	r3, #2
 80034ec:	d00b      	beq.n	8003506 <ucg_handle_st7735_l90fx+0x3a>
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d11b      	bne.n	800352a <ucg_handle_st7735_l90fx+0x5e>
 80034f2:	4928      	ldr	r1, [pc, #160]	; (8003594 <ucg_handle_st7735_l90fx+0xc8>)
 80034f4:	6878      	ldr	r0, [r7, #4]
 80034f6:	f001 fefb 	bl	80052f0 <ucg_com_SendCmdSeq>
 80034fa:	e028      	b.n	800354e <ucg_handle_st7735_l90fx+0x82>
 80034fc:	4926      	ldr	r1, [pc, #152]	; (8003598 <ucg_handle_st7735_l90fx+0xcc>)
 80034fe:	6878      	ldr	r0, [r7, #4]
 8003500:	f001 fef6 	bl	80052f0 <ucg_com_SendCmdSeq>
 8003504:	e023      	b.n	800354e <ucg_handle_st7735_l90fx+0x82>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800350a:	81fb      	strh	r3, [r7, #14]
 800350c:	89fb      	ldrh	r3, [r7, #14]
 800350e:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 8003512:	b29b      	uxth	r3, r3
 8003514:	b21a      	sxth	r2, r3
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	849a      	strh	r2, [r3, #36]	; 0x24
 800351a:	4920      	ldr	r1, [pc, #128]	; (800359c <ucg_handle_st7735_l90fx+0xd0>)
 800351c:	6878      	ldr	r0, [r7, #4]
 800351e:	f001 fee7 	bl	80052f0 <ucg_com_SendCmdSeq>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	89fa      	ldrh	r2, [r7, #14]
 8003526:	849a      	strh	r2, [r3, #36]	; 0x24
 8003528:	e011      	b.n	800354e <ucg_handle_st7735_l90fx+0x82>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800352e:	81fb      	strh	r3, [r7, #14]
 8003530:	89fb      	ldrh	r3, [r7, #14]
 8003532:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 8003536:	b29b      	uxth	r3, r3
 8003538:	b21a      	sxth	r2, r3
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	84da      	strh	r2, [r3, #38]	; 0x26
 800353e:	4918      	ldr	r1, [pc, #96]	; (80035a0 <ucg_handle_st7735_l90fx+0xd4>)
 8003540:	6878      	ldr	r0, [r7, #4]
 8003542:	f001 fed5 	bl	80052f0 <ucg_com_SendCmdSeq>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	89fa      	ldrh	r2, [r7, #14]
 800354a:	84da      	strh	r2, [r3, #38]	; 0x26
 800354c:	bf00      	nop
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003554:	723b      	strb	r3, [r7, #8]
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800355c:	727b      	strb	r3, [r7, #9]
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8003564:	72bb      	strb	r3, [r7, #10]
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	69dc      	ldr	r4, [r3, #28]
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 8003570:	b29a      	uxth	r2, r3
 8003572:	f107 0308 	add.w	r3, r7, #8
 8003576:	2113      	movs	r1, #19
 8003578:	6878      	ldr	r0, [r7, #4]
 800357a:	47a0      	blx	r4
 800357c:	2101      	movs	r1, #1
 800357e:	6878      	ldr	r0, [r7, #4]
 8003580:	f001 fe02 	bl	8005188 <ucg_com_SetCSLineStatus>
 8003584:	2301      	movs	r3, #1
 8003586:	e000      	b.n	800358a <ucg_handle_st7735_l90fx+0xbe>
 8003588:	2300      	movs	r3, #0
 800358a:	4618      	mov	r0, r3
 800358c:	3714      	adds	r7, #20
 800358e:	46bd      	mov	sp, r7
 8003590:	bd90      	pop	{r4, r7, pc}
 8003592:	bf00      	nop
 8003594:	08005f70 	.word	0x08005f70
 8003598:	08005f90 	.word	0x08005f90
 800359c:	08005fb4 	.word	0x08005fb4
 80035a0:	08005fd8 	.word	0x08005fd8

080035a4 <ucg_handle_st7735_l90se>:
 80035a4:	b590      	push	{r4, r7, lr}
 80035a6:	b087      	sub	sp, #28
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
 80035ac:	2300      	movs	r3, #0
 80035ae:	75fb      	strb	r3, [r7, #23]
 80035b0:	e01a      	b.n	80035e8 <ucg_handle_st7735_l90se+0x44>
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	f103 0146 	add.w	r1, r3, #70	; 0x46
 80035b8:	7dfa      	ldrb	r2, [r7, #23]
 80035ba:	4613      	mov	r3, r2
 80035bc:	00db      	lsls	r3, r3, #3
 80035be:	1a9b      	subs	r3, r3, r2
 80035c0:	005b      	lsls	r3, r3, #1
 80035c2:	18c8      	adds	r0, r1, r3
 80035c4:	7dfb      	ldrb	r3, [r7, #23]
 80035c6:	687a      	ldr	r2, [r7, #4]
 80035c8:	4413      	add	r3, r2
 80035ca:	f893 103a 	ldrb.w	r1, [r3, #58]	; 0x3a
 80035ce:	7dfb      	ldrb	r3, [r7, #23]
 80035d0:	687a      	ldr	r2, [r7, #4]
 80035d2:	4413      	add	r3, r2
 80035d4:	f893 203d 	ldrb.w	r2, [r3, #61]	; 0x3d
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 80035de:	f7ff fe40 	bl	8003262 <ucg_ccs_init>
 80035e2:	7dfb      	ldrb	r3, [r7, #23]
 80035e4:	3301      	adds	r3, #1
 80035e6:	75fb      	strb	r3, [r7, #23]
 80035e8:	7dfb      	ldrb	r3, [r7, #23]
 80035ea:	2b02      	cmp	r3, #2
 80035ec:	d9e1      	bls.n	80035b2 <ucg_handle_st7735_l90se+0xe>
 80035ee:	6878      	ldr	r0, [r7, #4]
 80035f0:	f001 fcd0 	bl	8004f94 <ucg_clip_l90se>
 80035f4:	4603      	mov	r3, r0
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d071      	beq.n	80036de <ucg_handle_st7735_l90se+0x13a>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 8003600:	2b01      	cmp	r3, #1
 8003602:	d008      	beq.n	8003616 <ucg_handle_st7735_l90se+0x72>
 8003604:	2b02      	cmp	r3, #2
 8003606:	d00b      	beq.n	8003620 <ucg_handle_st7735_l90se+0x7c>
 8003608:	2b00      	cmp	r3, #0
 800360a:	d11b      	bne.n	8003644 <ucg_handle_st7735_l90se+0xa0>
 800360c:	4936      	ldr	r1, [pc, #216]	; (80036e8 <ucg_handle_st7735_l90se+0x144>)
 800360e:	6878      	ldr	r0, [r7, #4]
 8003610:	f001 fe6e 	bl	80052f0 <ucg_com_SendCmdSeq>
 8003614:	e028      	b.n	8003668 <ucg_handle_st7735_l90se+0xc4>
 8003616:	4935      	ldr	r1, [pc, #212]	; (80036ec <ucg_handle_st7735_l90se+0x148>)
 8003618:	6878      	ldr	r0, [r7, #4]
 800361a:	f001 fe69 	bl	80052f0 <ucg_com_SendCmdSeq>
 800361e:	e023      	b.n	8003668 <ucg_handle_st7735_l90se+0xc4>
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003624:	827b      	strh	r3, [r7, #18]
 8003626:	8a7b      	ldrh	r3, [r7, #18]
 8003628:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 800362c:	b29b      	uxth	r3, r3
 800362e:	b21a      	sxth	r2, r3
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	849a      	strh	r2, [r3, #36]	; 0x24
 8003634:	492e      	ldr	r1, [pc, #184]	; (80036f0 <ucg_handle_st7735_l90se+0x14c>)
 8003636:	6878      	ldr	r0, [r7, #4]
 8003638:	f001 fe5a 	bl	80052f0 <ucg_com_SendCmdSeq>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	8a7a      	ldrh	r2, [r7, #18]
 8003640:	849a      	strh	r2, [r3, #36]	; 0x24
 8003642:	e011      	b.n	8003668 <ucg_handle_st7735_l90se+0xc4>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003648:	827b      	strh	r3, [r7, #18]
 800364a:	8a7b      	ldrh	r3, [r7, #18]
 800364c:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 8003650:	b29b      	uxth	r3, r3
 8003652:	b21a      	sxth	r2, r3
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	84da      	strh	r2, [r3, #38]	; 0x26
 8003658:	4926      	ldr	r1, [pc, #152]	; (80036f4 <ucg_handle_st7735_l90se+0x150>)
 800365a:	6878      	ldr	r0, [r7, #4]
 800365c:	f001 fe48 	bl	80052f0 <ucg_com_SendCmdSeq>
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	8a7a      	ldrh	r2, [r7, #18]
 8003664:	84da      	strh	r2, [r3, #38]	; 0x26
 8003666:	bf00      	nop
 8003668:	2300      	movs	r3, #0
 800366a:	82bb      	strh	r3, [r7, #20]
 800366c:	e02a      	b.n	80036c4 <ucg_handle_st7735_l90se+0x120>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8003674:	733b      	strb	r3, [r7, #12]
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800367c:	737b      	strb	r3, [r7, #13]
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8003684:	73bb      	strb	r3, [r7, #14]
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	69dc      	ldr	r4, [r3, #28]
 800368a:	f107 030c 	add.w	r3, r7, #12
 800368e:	2201      	movs	r2, #1
 8003690:	2113      	movs	r1, #19
 8003692:	6878      	ldr	r0, [r7, #4]
 8003694:	47a0      	blx	r4
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	3346      	adds	r3, #70	; 0x46
 800369a:	4618      	mov	r0, r3
 800369c:	f7ff fe41 	bl	8003322 <ucg_ccs_step>
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	3346      	adds	r3, #70	; 0x46
 80036a4:	330e      	adds	r3, #14
 80036a6:	4618      	mov	r0, r3
 80036a8:	f7ff fe3b 	bl	8003322 <ucg_ccs_step>
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	3346      	adds	r3, #70	; 0x46
 80036b0:	331c      	adds	r3, #28
 80036b2:	4618      	mov	r0, r3
 80036b4:	f7ff fe35 	bl	8003322 <ucg_ccs_step>
 80036b8:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80036bc:	b29b      	uxth	r3, r3
 80036be:	3301      	adds	r3, #1
 80036c0:	b29b      	uxth	r3, r3
 80036c2:	82bb      	strh	r3, [r7, #20]
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 80036ca:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80036ce:	429a      	cmp	r2, r3
 80036d0:	dbcd      	blt.n	800366e <ucg_handle_st7735_l90se+0xca>
 80036d2:	2101      	movs	r1, #1
 80036d4:	6878      	ldr	r0, [r7, #4]
 80036d6:	f001 fd57 	bl	8005188 <ucg_com_SetCSLineStatus>
 80036da:	2301      	movs	r3, #1
 80036dc:	e000      	b.n	80036e0 <ucg_handle_st7735_l90se+0x13c>
 80036de:	2300      	movs	r3, #0
 80036e0:	4618      	mov	r0, r3
 80036e2:	371c      	adds	r7, #28
 80036e4:	46bd      	mov	sp, r7
 80036e6:	bd90      	pop	{r4, r7, pc}
 80036e8:	08005f70 	.word	0x08005f70
 80036ec:	08005f90 	.word	0x08005f90
 80036f0:	08005fb4 	.word	0x08005fb4
 80036f4:	08005fd8 	.word	0x08005fd8

080036f8 <ucg_dev_ic_st7735_18>:
 80036f8:	b590      	push	{r4, r7, lr}
 80036fa:	b087      	sub	sp, #28
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	60f8      	str	r0, [r7, #12]
 8003700:	460b      	mov	r3, r1
 8003702:	607a      	str	r2, [r7, #4]
 8003704:	817b      	strh	r3, [r7, #10]
 8003706:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800370a:	3b0a      	subs	r3, #10
 800370c:	2b0b      	cmp	r3, #11
 800370e:	d85f      	bhi.n	80037d0 <ucg_dev_ic_st7735_18+0xd8>
 8003710:	a201      	add	r2, pc, #4	; (adr r2, 8003718 <ucg_dev_ic_st7735_18+0x20>)
 8003712:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003716:	bf00      	nop
 8003718:	08003749 	.word	0x08003749
 800371c:	08003763 	.word	0x08003763
 8003720:	080037d1 	.word	0x080037d1
 8003724:	080037d1 	.word	0x080037d1
 8003728:	080037d1 	.word	0x080037d1
 800372c:	0800376f 	.word	0x0800376f
 8003730:	080037d1 	.word	0x080037d1
 8003734:	080037d1 	.word	0x080037d1
 8003738:	080037d1 	.word	0x080037d1
 800373c:	080037d1 	.word	0x080037d1
 8003740:	0800377f 	.word	0x0800377f
 8003744:	080037c7 	.word	0x080037c7
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	2202      	movs	r2, #2
 800374c:	841a      	strh	r2, [r3, #32]
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	2201      	movs	r2, #1
 8003752:	845a      	strh	r2, [r3, #34]	; 0x22
 8003754:	2242      	movs	r2, #66	; 0x42
 8003756:	2164      	movs	r1, #100	; 0x64
 8003758:	68f8      	ldr	r0, [r7, #12]
 800375a:	f001 fc64 	bl	8005026 <ucg_com_PowerUp>
 800375e:	4603      	mov	r3, r0
 8003760:	e03e      	b.n	80037e0 <ucg_dev_ic_st7735_18+0xe8>
 8003762:	4921      	ldr	r1, [pc, #132]	; (80037e8 <ucg_dev_ic_st7735_18+0xf0>)
 8003764:	68f8      	ldr	r0, [r7, #12]
 8003766:	f001 fdc3 	bl	80052f0 <ucg_com_SendCmdSeq>
 800376a:	2301      	movs	r3, #1
 800376c:	e038      	b.n	80037e0 <ucg_dev_ic_st7735_18+0xe8>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2280      	movs	r2, #128	; 0x80
 8003772:	801a      	strh	r2, [r3, #0]
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2280      	movs	r2, #128	; 0x80
 8003778:	805a      	strh	r2, [r3, #2]
 800377a:	2301      	movs	r3, #1
 800377c:	e030      	b.n	80037e0 <ucg_dev_ic_st7735_18+0xe8>
 800377e:	68f8      	ldr	r0, [r7, #12]
 8003780:	f001 fa6f 	bl	8004c62 <ucg_clip_is_pixel_visible>
 8003784:	4603      	mov	r3, r0
 8003786:	2b00      	cmp	r3, #0
 8003788:	d01b      	beq.n	80037c2 <ucg_dev_ic_st7735_18+0xca>
 800378a:	4918      	ldr	r1, [pc, #96]	; (80037ec <ucg_dev_ic_st7735_18+0xf4>)
 800378c:	68f8      	ldr	r0, [r7, #12]
 800378e:	f001 fdaf 	bl	80052f0 <ucg_com_SendCmdSeq>
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003798:	753b      	strb	r3, [r7, #20]
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80037a0:	757b      	strb	r3, [r7, #21]
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80037a8:	75bb      	strb	r3, [r7, #22]
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	69dc      	ldr	r4, [r3, #28]
 80037ae:	f107 0314 	add.w	r3, r7, #20
 80037b2:	2201      	movs	r2, #1
 80037b4:	2113      	movs	r1, #19
 80037b6:	68f8      	ldr	r0, [r7, #12]
 80037b8:	47a0      	blx	r4
 80037ba:	2101      	movs	r1, #1
 80037bc:	68f8      	ldr	r0, [r7, #12]
 80037be:	f001 fce3 	bl	8005188 <ucg_com_SetCSLineStatus>
 80037c2:	2301      	movs	r3, #1
 80037c4:	e00c      	b.n	80037e0 <ucg_dev_ic_st7735_18+0xe8>
 80037c6:	68f8      	ldr	r0, [r7, #12]
 80037c8:	f7ff fe80 	bl	80034cc <ucg_handle_st7735_l90fx>
 80037cc:	2301      	movs	r3, #1
 80037ce:	e007      	b.n	80037e0 <ucg_dev_ic_st7735_18+0xe8>
 80037d0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80037d4:	687a      	ldr	r2, [r7, #4]
 80037d6:	4619      	mov	r1, r3
 80037d8:	68f8      	ldr	r0, [r7, #12]
 80037da:	f7ff fe47 	bl	800346c <ucg_dev_default_cb>
 80037de:	4603      	mov	r3, r0
 80037e0:	4618      	mov	r0, r3
 80037e2:	371c      	adds	r7, #28
 80037e4:	46bd      	mov	sp, r7
 80037e6:	bd90      	pop	{r4, r7, pc}
 80037e8:	08005ffc 	.word	0x08005ffc
 80037ec:	08005f50 	.word	0x08005f50

080037f0 <ucg_ext_st7735_18>:
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b084      	sub	sp, #16
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	60f8      	str	r0, [r7, #12]
 80037f8:	460b      	mov	r3, r1
 80037fa:	607a      	str	r2, [r7, #4]
 80037fc:	817b      	strh	r3, [r7, #10]
 80037fe:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003802:	2b17      	cmp	r3, #23
 8003804:	d103      	bne.n	800380e <ucg_ext_st7735_18+0x1e>
 8003806:	68f8      	ldr	r0, [r7, #12]
 8003808:	f7ff fecc 	bl	80035a4 <ucg_handle_st7735_l90se>
 800380c:	bf00      	nop
 800380e:	2301      	movs	r3, #1
 8003810:	4618      	mov	r0, r3
 8003812:	3710      	adds	r7, #16
 8003814:	46bd      	mov	sp, r7
 8003816:	bd80      	pop	{r7, pc}

08003818 <ucg_PowerDown>:
 8003818:	b580      	push	{r7, lr}
 800381a:	b082      	sub	sp, #8
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	781b      	ldrb	r3, [r3, #0]
 8003824:	f003 0301 	and.w	r3, r3, #1
 8003828:	b2db      	uxtb	r3, r3
 800382a:	2b00      	cmp	r3, #0
 800382c:	d00a      	beq.n	8003844 <ucg_PowerDown+0x2c>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	689b      	ldr	r3, [r3, #8]
 8003832:	2200      	movs	r2, #0
 8003834:	210b      	movs	r1, #11
 8003836:	6878      	ldr	r0, [r7, #4]
 8003838:	4798      	blx	r3
 800383a:	687a      	ldr	r2, [r7, #4]
 800383c:	7813      	ldrb	r3, [r2, #0]
 800383e:	f36f 0300 	bfc	r3, #0, #1
 8003842:	7013      	strb	r3, [r2, #0]
 8003844:	bf00      	nop
 8003846:	3708      	adds	r7, #8
 8003848:	46bd      	mov	sp, r7
 800384a:	bd80      	pop	{r7, pc}

0800384c <ucg_PowerUp>:
 800384c:	b580      	push	{r7, lr}
 800384e:	b084      	sub	sp, #16
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
 8003854:	6878      	ldr	r0, [r7, #4]
 8003856:	f7ff ffdf 	bl	8003818 <ucg_PowerDown>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	689b      	ldr	r3, [r3, #8]
 800385e:	2200      	movs	r2, #0
 8003860:	210a      	movs	r1, #10
 8003862:	6878      	ldr	r0, [r7, #4]
 8003864:	4798      	blx	r3
 8003866:	4603      	mov	r3, r0
 8003868:	81fb      	strh	r3, [r7, #14]
 800386a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d004      	beq.n	800387c <ucg_PowerUp+0x30>
 8003872:	687a      	ldr	r2, [r7, #4]
 8003874:	7813      	ldrb	r3, [r2, #0]
 8003876:	f043 0301 	orr.w	r3, r3, #1
 800387a:	7013      	strb	r3, [r2, #0]
 800387c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003880:	4618      	mov	r0, r3
 8003882:	3710      	adds	r7, #16
 8003884:	46bd      	mov	sp, r7
 8003886:	bd80      	pop	{r7, pc}

08003888 <ucg_SetClipBox>:
 8003888:	b580      	push	{r7, lr}
 800388a:	b082      	sub	sp, #8
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
 8003890:	6039      	str	r1, [r7, #0]
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	689b      	ldr	r3, [r3, #8]
 8003896:	683a      	ldr	r2, [r7, #0]
 8003898:	210c      	movs	r1, #12
 800389a:	6878      	ldr	r0, [r7, #4]
 800389c:	4798      	blx	r3
 800389e:	bf00      	nop
 80038a0:	3708      	adds	r7, #8
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bd80      	pop	{r7, pc}

080038a6 <ucg_SetMaxClipRange>:
 80038a6:	b580      	push	{r7, lr}
 80038a8:	b084      	sub	sp, #16
 80038aa:	af00      	add	r7, sp, #0
 80038ac:	6078      	str	r0, [r7, #4]
 80038ae:	687a      	ldr	r2, [r7, #4]
 80038b0:	f107 030c 	add.w	r3, r7, #12
 80038b4:	3202      	adds	r2, #2
 80038b6:	6810      	ldr	r0, [r2, #0]
 80038b8:	6018      	str	r0, [r3, #0]
 80038ba:	2300      	movs	r3, #0
 80038bc:	813b      	strh	r3, [r7, #8]
 80038be:	2300      	movs	r3, #0
 80038c0:	817b      	strh	r3, [r7, #10]
 80038c2:	f107 0308 	add.w	r3, r7, #8
 80038c6:	4619      	mov	r1, r3
 80038c8:	6878      	ldr	r0, [r7, #4]
 80038ca:	f7ff ffdd 	bl	8003888 <ucg_SetClipBox>
 80038ce:	bf00      	nop
 80038d0:	3710      	adds	r7, #16
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bd80      	pop	{r7, pc}

080038d6 <ucg_GetDimension>:
 80038d6:	b580      	push	{r7, lr}
 80038d8:	b082      	sub	sp, #8
 80038da:	af00      	add	r7, sp, #0
 80038dc:	6078      	str	r0, [r7, #4]
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	689b      	ldr	r3, [r3, #8]
 80038e2:	687a      	ldr	r2, [r7, #4]
 80038e4:	3202      	adds	r2, #2
 80038e6:	210f      	movs	r1, #15
 80038e8:	6878      	ldr	r0, [r7, #4]
 80038ea:	4798      	blx	r3
 80038ec:	6878      	ldr	r0, [r7, #4]
 80038ee:	f7ff ffda 	bl	80038a6 <ucg_SetMaxClipRange>
 80038f2:	bf00      	nop
 80038f4:	3708      	adds	r7, #8
 80038f6:	46bd      	mov	sp, r7
 80038f8:	bd80      	pop	{r7, pc}

080038fa <ucg_DrawL90FXWithArg>:
 80038fa:	b580      	push	{r7, lr}
 80038fc:	b082      	sub	sp, #8
 80038fe:	af00      	add	r7, sp, #0
 8003900:	6078      	str	r0, [r7, #4]
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	689b      	ldr	r3, [r3, #8]
 8003906:	687a      	ldr	r2, [r7, #4]
 8003908:	3224      	adds	r2, #36	; 0x24
 800390a:	2115      	movs	r1, #21
 800390c:	6878      	ldr	r0, [r7, #4]
 800390e:	4798      	blx	r3
 8003910:	bf00      	nop
 8003912:	3708      	adds	r7, #8
 8003914:	46bd      	mov	sp, r7
 8003916:	bd80      	pop	{r7, pc}

08003918 <ucg_dev_st7735_18x128x128>:
 8003918:	b580      	push	{r7, lr}
 800391a:	b084      	sub	sp, #16
 800391c:	af00      	add	r7, sp, #0
 800391e:	60f8      	str	r0, [r7, #12]
 8003920:	460b      	mov	r3, r1
 8003922:	607a      	str	r2, [r7, #4]
 8003924:	817b      	strh	r3, [r7, #10]
 8003926:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800392a:	2b0b      	cmp	r3, #11
 800392c:	d015      	beq.n	800395a <ucg_dev_st7735_18x128x128+0x42>
 800392e:	2b0f      	cmp	r3, #15
 8003930:	d01c      	beq.n	800396c <ucg_dev_st7735_18x128x128+0x54>
 8003932:	2b0a      	cmp	r3, #10
 8003934:	d122      	bne.n	800397c <ucg_dev_st7735_18x128x128+0x64>
 8003936:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800393a:	687a      	ldr	r2, [r7, #4]
 800393c:	4619      	mov	r1, r3
 800393e:	68f8      	ldr	r0, [r7, #12]
 8003940:	f7ff feda 	bl	80036f8 <ucg_dev_ic_st7735_18>
 8003944:	4603      	mov	r3, r0
 8003946:	2b00      	cmp	r3, #0
 8003948:	d101      	bne.n	800394e <ucg_dev_st7735_18x128x128+0x36>
 800394a:	2300      	movs	r3, #0
 800394c:	e01e      	b.n	800398c <ucg_dev_st7735_18x128x128+0x74>
 800394e:	4911      	ldr	r1, [pc, #68]	; (8003994 <ucg_dev_st7735_18x128x128+0x7c>)
 8003950:	68f8      	ldr	r0, [r7, #12]
 8003952:	f001 fccd 	bl	80052f0 <ucg_com_SendCmdSeq>
 8003956:	2301      	movs	r3, #1
 8003958:	e018      	b.n	800398c <ucg_dev_st7735_18x128x128+0x74>
 800395a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800395e:	687a      	ldr	r2, [r7, #4]
 8003960:	4619      	mov	r1, r3
 8003962:	68f8      	ldr	r0, [r7, #12]
 8003964:	f7ff fec8 	bl	80036f8 <ucg_dev_ic_st7735_18>
 8003968:	4603      	mov	r3, r0
 800396a:	e00f      	b.n	800398c <ucg_dev_st7735_18x128x128+0x74>
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2280      	movs	r2, #128	; 0x80
 8003970:	801a      	strh	r2, [r3, #0]
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2280      	movs	r2, #128	; 0x80
 8003976:	805a      	strh	r2, [r3, #2]
 8003978:	2301      	movs	r3, #1
 800397a:	e007      	b.n	800398c <ucg_dev_st7735_18x128x128+0x74>
 800397c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003980:	687a      	ldr	r2, [r7, #4]
 8003982:	4619      	mov	r1, r3
 8003984:	68f8      	ldr	r0, [r7, #12]
 8003986:	f7ff feb7 	bl	80036f8 <ucg_dev_ic_st7735_18>
 800398a:	4603      	mov	r3, r0
 800398c:	4618      	mov	r0, r3
 800398e:	3710      	adds	r7, #16
 8003990:	46bd      	mov	sp, r7
 8003992:	bd80      	pop	{r7, pc}
 8003994:	08006004 	.word	0x08006004

08003998 <ucg_font_get_byte>:
 8003998:	b480      	push	{r7}
 800399a:	b083      	sub	sp, #12
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
 80039a0:	460b      	mov	r3, r1
 80039a2:	70fb      	strb	r3, [r7, #3]
 80039a4:	78fb      	ldrb	r3, [r7, #3]
 80039a6:	687a      	ldr	r2, [r7, #4]
 80039a8:	4413      	add	r3, r2
 80039aa:	607b      	str	r3, [r7, #4]
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	781b      	ldrb	r3, [r3, #0]
 80039b0:	4618      	mov	r0, r3
 80039b2:	370c      	adds	r7, #12
 80039b4:	46bd      	mov	sp, r7
 80039b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ba:	4770      	bx	lr

080039bc <ucg_font_get_word>:
 80039bc:	b480      	push	{r7}
 80039be:	b085      	sub	sp, #20
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
 80039c4:	460b      	mov	r3, r1
 80039c6:	70fb      	strb	r3, [r7, #3]
 80039c8:	78fb      	ldrb	r3, [r7, #3]
 80039ca:	687a      	ldr	r2, [r7, #4]
 80039cc:	4413      	add	r3, r2
 80039ce:	607b      	str	r3, [r7, #4]
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	781b      	ldrb	r3, [r3, #0]
 80039d4:	81fb      	strh	r3, [r7, #14]
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	3301      	adds	r3, #1
 80039da:	607b      	str	r3, [r7, #4]
 80039dc:	89fb      	ldrh	r3, [r7, #14]
 80039de:	021b      	lsls	r3, r3, #8
 80039e0:	81fb      	strh	r3, [r7, #14]
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	781b      	ldrb	r3, [r3, #0]
 80039e6:	b29a      	uxth	r2, r3
 80039e8:	89fb      	ldrh	r3, [r7, #14]
 80039ea:	4413      	add	r3, r2
 80039ec:	81fb      	strh	r3, [r7, #14]
 80039ee:	89fb      	ldrh	r3, [r7, #14]
 80039f0:	4618      	mov	r0, r3
 80039f2:	3714      	adds	r7, #20
 80039f4:	46bd      	mov	sp, r7
 80039f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fa:	4770      	bx	lr

080039fc <ucg_read_font_info>:
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b082      	sub	sp, #8
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
 8003a04:	6039      	str	r1, [r7, #0]
 8003a06:	2100      	movs	r1, #0
 8003a08:	6838      	ldr	r0, [r7, #0]
 8003a0a:	f7ff ffc5 	bl	8003998 <ucg_font_get_byte>
 8003a0e:	4603      	mov	r3, r0
 8003a10:	461a      	mov	r2, r3
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	701a      	strb	r2, [r3, #0]
 8003a16:	2101      	movs	r1, #1
 8003a18:	6838      	ldr	r0, [r7, #0]
 8003a1a:	f7ff ffbd 	bl	8003998 <ucg_font_get_byte>
 8003a1e:	4603      	mov	r3, r0
 8003a20:	461a      	mov	r2, r3
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	705a      	strb	r2, [r3, #1]
 8003a26:	2102      	movs	r1, #2
 8003a28:	6838      	ldr	r0, [r7, #0]
 8003a2a:	f7ff ffb5 	bl	8003998 <ucg_font_get_byte>
 8003a2e:	4603      	mov	r3, r0
 8003a30:	461a      	mov	r2, r3
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	709a      	strb	r2, [r3, #2]
 8003a36:	2103      	movs	r1, #3
 8003a38:	6838      	ldr	r0, [r7, #0]
 8003a3a:	f7ff ffad 	bl	8003998 <ucg_font_get_byte>
 8003a3e:	4603      	mov	r3, r0
 8003a40:	461a      	mov	r2, r3
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	70da      	strb	r2, [r3, #3]
 8003a46:	2104      	movs	r1, #4
 8003a48:	6838      	ldr	r0, [r7, #0]
 8003a4a:	f7ff ffa5 	bl	8003998 <ucg_font_get_byte>
 8003a4e:	4603      	mov	r3, r0
 8003a50:	461a      	mov	r2, r3
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	711a      	strb	r2, [r3, #4]
 8003a56:	2105      	movs	r1, #5
 8003a58:	6838      	ldr	r0, [r7, #0]
 8003a5a:	f7ff ff9d 	bl	8003998 <ucg_font_get_byte>
 8003a5e:	4603      	mov	r3, r0
 8003a60:	461a      	mov	r2, r3
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	715a      	strb	r2, [r3, #5]
 8003a66:	2106      	movs	r1, #6
 8003a68:	6838      	ldr	r0, [r7, #0]
 8003a6a:	f7ff ff95 	bl	8003998 <ucg_font_get_byte>
 8003a6e:	4603      	mov	r3, r0
 8003a70:	461a      	mov	r2, r3
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	719a      	strb	r2, [r3, #6]
 8003a76:	2107      	movs	r1, #7
 8003a78:	6838      	ldr	r0, [r7, #0]
 8003a7a:	f7ff ff8d 	bl	8003998 <ucg_font_get_byte>
 8003a7e:	4603      	mov	r3, r0
 8003a80:	461a      	mov	r2, r3
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	71da      	strb	r2, [r3, #7]
 8003a86:	2108      	movs	r1, #8
 8003a88:	6838      	ldr	r0, [r7, #0]
 8003a8a:	f7ff ff85 	bl	8003998 <ucg_font_get_byte>
 8003a8e:	4603      	mov	r3, r0
 8003a90:	461a      	mov	r2, r3
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	721a      	strb	r2, [r3, #8]
 8003a96:	2109      	movs	r1, #9
 8003a98:	6838      	ldr	r0, [r7, #0]
 8003a9a:	f7ff ff7d 	bl	8003998 <ucg_font_get_byte>
 8003a9e:	4603      	mov	r3, r0
 8003aa0:	b25a      	sxtb	r2, r3
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	725a      	strb	r2, [r3, #9]
 8003aa6:	210a      	movs	r1, #10
 8003aa8:	6838      	ldr	r0, [r7, #0]
 8003aaa:	f7ff ff75 	bl	8003998 <ucg_font_get_byte>
 8003aae:	4603      	mov	r3, r0
 8003ab0:	b25a      	sxtb	r2, r3
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	729a      	strb	r2, [r3, #10]
 8003ab6:	210b      	movs	r1, #11
 8003ab8:	6838      	ldr	r0, [r7, #0]
 8003aba:	f7ff ff6d 	bl	8003998 <ucg_font_get_byte>
 8003abe:	4603      	mov	r3, r0
 8003ac0:	b25a      	sxtb	r2, r3
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	72da      	strb	r2, [r3, #11]
 8003ac6:	210c      	movs	r1, #12
 8003ac8:	6838      	ldr	r0, [r7, #0]
 8003aca:	f7ff ff65 	bl	8003998 <ucg_font_get_byte>
 8003ace:	4603      	mov	r3, r0
 8003ad0:	b25a      	sxtb	r2, r3
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	731a      	strb	r2, [r3, #12]
 8003ad6:	210d      	movs	r1, #13
 8003ad8:	6838      	ldr	r0, [r7, #0]
 8003ada:	f7ff ff5d 	bl	8003998 <ucg_font_get_byte>
 8003ade:	4603      	mov	r3, r0
 8003ae0:	b25a      	sxtb	r2, r3
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	735a      	strb	r2, [r3, #13]
 8003ae6:	210e      	movs	r1, #14
 8003ae8:	6838      	ldr	r0, [r7, #0]
 8003aea:	f7ff ff55 	bl	8003998 <ucg_font_get_byte>
 8003aee:	4603      	mov	r3, r0
 8003af0:	b25a      	sxtb	r2, r3
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	739a      	strb	r2, [r3, #14]
 8003af6:	210f      	movs	r1, #15
 8003af8:	6838      	ldr	r0, [r7, #0]
 8003afa:	f7ff ff4d 	bl	8003998 <ucg_font_get_byte>
 8003afe:	4603      	mov	r3, r0
 8003b00:	b25a      	sxtb	r2, r3
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	73da      	strb	r2, [r3, #15]
 8003b06:	2110      	movs	r1, #16
 8003b08:	6838      	ldr	r0, [r7, #0]
 8003b0a:	f7ff ff45 	bl	8003998 <ucg_font_get_byte>
 8003b0e:	4603      	mov	r3, r0
 8003b10:	b25a      	sxtb	r2, r3
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	741a      	strb	r2, [r3, #16]
 8003b16:	2111      	movs	r1, #17
 8003b18:	6838      	ldr	r0, [r7, #0]
 8003b1a:	f7ff ff4f 	bl	80039bc <ucg_font_get_word>
 8003b1e:	4603      	mov	r3, r0
 8003b20:	461a      	mov	r2, r3
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	825a      	strh	r2, [r3, #18]
 8003b26:	2113      	movs	r1, #19
 8003b28:	6838      	ldr	r0, [r7, #0]
 8003b2a:	f7ff ff47 	bl	80039bc <ucg_font_get_word>
 8003b2e:	4603      	mov	r3, r0
 8003b30:	461a      	mov	r2, r3
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	829a      	strh	r2, [r3, #20]
 8003b36:	bf00      	nop
 8003b38:	3708      	adds	r7, #8
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	bd80      	pop	{r7, pc}

08003b3e <ucg_font_decode_get_unsigned_bits>:
 8003b3e:	b480      	push	{r7}
 8003b40:	b085      	sub	sp, #20
 8003b42:	af00      	add	r7, sp, #0
 8003b44:	6078      	str	r0, [r7, #4]
 8003b46:	460b      	mov	r3, r1
 8003b48:	70fb      	strb	r3, [r7, #3]
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	7b1b      	ldrb	r3, [r3, #12]
 8003b4e:	737b      	strb	r3, [r7, #13]
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	781b      	ldrb	r3, [r3, #0]
 8003b56:	73fb      	strb	r3, [r7, #15]
 8003b58:	7bfa      	ldrb	r2, [r7, #15]
 8003b5a:	7b7b      	ldrb	r3, [r7, #13]
 8003b5c:	fa42 f303 	asr.w	r3, r2, r3
 8003b60:	73fb      	strb	r3, [r7, #15]
 8003b62:	7b7b      	ldrb	r3, [r7, #13]
 8003b64:	73bb      	strb	r3, [r7, #14]
 8003b66:	7bba      	ldrb	r2, [r7, #14]
 8003b68:	78fb      	ldrb	r3, [r7, #3]
 8003b6a:	4413      	add	r3, r2
 8003b6c:	73bb      	strb	r3, [r7, #14]
 8003b6e:	7bbb      	ldrb	r3, [r7, #14]
 8003b70:	2b07      	cmp	r3, #7
 8003b72:	d91a      	bls.n	8003baa <ucg_font_decode_get_unsigned_bits+0x6c>
 8003b74:	2308      	movs	r3, #8
 8003b76:	733b      	strb	r3, [r7, #12]
 8003b78:	7b3a      	ldrb	r2, [r7, #12]
 8003b7a:	7b7b      	ldrb	r3, [r7, #13]
 8003b7c:	1ad3      	subs	r3, r2, r3
 8003b7e:	733b      	strb	r3, [r7, #12]
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	1c5a      	adds	r2, r3, #1
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	601a      	str	r2, [r3, #0]
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	781b      	ldrb	r3, [r3, #0]
 8003b90:	461a      	mov	r2, r3
 8003b92:	7b3b      	ldrb	r3, [r7, #12]
 8003b94:	fa02 f303 	lsl.w	r3, r2, r3
 8003b98:	b25a      	sxtb	r2, r3
 8003b9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b9e:	4313      	orrs	r3, r2
 8003ba0:	b25b      	sxtb	r3, r3
 8003ba2:	73fb      	strb	r3, [r7, #15]
 8003ba4:	7bbb      	ldrb	r3, [r7, #14]
 8003ba6:	3b08      	subs	r3, #8
 8003ba8:	73bb      	strb	r3, [r7, #14]
 8003baa:	78fb      	ldrb	r3, [r7, #3]
 8003bac:	f04f 32ff 	mov.w	r2, #4294967295
 8003bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8003bb4:	b2db      	uxtb	r3, r3
 8003bb6:	43db      	mvns	r3, r3
 8003bb8:	b2da      	uxtb	r2, r3
 8003bba:	7bfb      	ldrb	r3, [r7, #15]
 8003bbc:	4013      	ands	r3, r2
 8003bbe:	73fb      	strb	r3, [r7, #15]
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	7bba      	ldrb	r2, [r7, #14]
 8003bc4:	731a      	strb	r2, [r3, #12]
 8003bc6:	7bfb      	ldrb	r3, [r7, #15]
 8003bc8:	4618      	mov	r0, r3
 8003bca:	3714      	adds	r7, #20
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd2:	4770      	bx	lr

08003bd4 <ucg_font_decode_get_signed_bits>:
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b084      	sub	sp, #16
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
 8003bdc:	460b      	mov	r3, r1
 8003bde:	70fb      	strb	r3, [r7, #3]
 8003be0:	78fb      	ldrb	r3, [r7, #3]
 8003be2:	4619      	mov	r1, r3
 8003be4:	6878      	ldr	r0, [r7, #4]
 8003be6:	f7ff ffaa 	bl	8003b3e <ucg_font_decode_get_unsigned_bits>
 8003bea:	4603      	mov	r3, r0
 8003bec:	73fb      	strb	r3, [r7, #15]
 8003bee:	2301      	movs	r3, #1
 8003bf0:	73bb      	strb	r3, [r7, #14]
 8003bf2:	78fb      	ldrb	r3, [r7, #3]
 8003bf4:	3b01      	subs	r3, #1
 8003bf6:	70fb      	strb	r3, [r7, #3]
 8003bf8:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8003bfc:	78fb      	ldrb	r3, [r7, #3]
 8003bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8003c02:	73bb      	strb	r3, [r7, #14]
 8003c04:	7bfa      	ldrb	r2, [r7, #15]
 8003c06:	7bbb      	ldrb	r3, [r7, #14]
 8003c08:	1ad3      	subs	r3, r2, r3
 8003c0a:	b2db      	uxtb	r3, r3
 8003c0c:	73fb      	strb	r3, [r7, #15]
 8003c0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c12:	4618      	mov	r0, r3
 8003c14:	3710      	adds	r7, #16
 8003c16:	46bd      	mov	sp, r7
 8003c18:	bd80      	pop	{r7, pc}

08003c1a <ucg_add_vector_y>:
 8003c1a:	b490      	push	{r4, r7}
 8003c1c:	b082      	sub	sp, #8
 8003c1e:	af00      	add	r7, sp, #0
 8003c20:	4604      	mov	r4, r0
 8003c22:	4608      	mov	r0, r1
 8003c24:	4611      	mov	r1, r2
 8003c26:	461a      	mov	r2, r3
 8003c28:	4623      	mov	r3, r4
 8003c2a:	80fb      	strh	r3, [r7, #6]
 8003c2c:	4603      	mov	r3, r0
 8003c2e:	717b      	strb	r3, [r7, #5]
 8003c30:	460b      	mov	r3, r1
 8003c32:	713b      	strb	r3, [r7, #4]
 8003c34:	4613      	mov	r3, r2
 8003c36:	70fb      	strb	r3, [r7, #3]
 8003c38:	78fb      	ldrb	r3, [r7, #3]
 8003c3a:	2b01      	cmp	r3, #1
 8003c3c:	d00b      	beq.n	8003c56 <ucg_add_vector_y+0x3c>
 8003c3e:	2b02      	cmp	r3, #2
 8003c40:	d011      	beq.n	8003c66 <ucg_add_vector_y+0x4c>
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d117      	bne.n	8003c76 <ucg_add_vector_y+0x5c>
 8003c46:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8003c4a:	b29a      	uxth	r2, r3
 8003c4c:	88fb      	ldrh	r3, [r7, #6]
 8003c4e:	4413      	add	r3, r2
 8003c50:	b29b      	uxth	r3, r3
 8003c52:	80fb      	strh	r3, [r7, #6]
 8003c54:	e017      	b.n	8003c86 <ucg_add_vector_y+0x6c>
 8003c56:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8003c5a:	b29a      	uxth	r2, r3
 8003c5c:	88fb      	ldrh	r3, [r7, #6]
 8003c5e:	4413      	add	r3, r2
 8003c60:	b29b      	uxth	r3, r3
 8003c62:	80fb      	strh	r3, [r7, #6]
 8003c64:	e00f      	b.n	8003c86 <ucg_add_vector_y+0x6c>
 8003c66:	88fa      	ldrh	r2, [r7, #6]
 8003c68:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8003c6c:	b29b      	uxth	r3, r3
 8003c6e:	1ad3      	subs	r3, r2, r3
 8003c70:	b29b      	uxth	r3, r3
 8003c72:	80fb      	strh	r3, [r7, #6]
 8003c74:	e007      	b.n	8003c86 <ucg_add_vector_y+0x6c>
 8003c76:	88fa      	ldrh	r2, [r7, #6]
 8003c78:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8003c7c:	b29b      	uxth	r3, r3
 8003c7e:	1ad3      	subs	r3, r2, r3
 8003c80:	b29b      	uxth	r3, r3
 8003c82:	80fb      	strh	r3, [r7, #6]
 8003c84:	bf00      	nop
 8003c86:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	3708      	adds	r7, #8
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	bc90      	pop	{r4, r7}
 8003c92:	4770      	bx	lr

08003c94 <ucg_add_vector_x>:
 8003c94:	b490      	push	{r4, r7}
 8003c96:	b082      	sub	sp, #8
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	4604      	mov	r4, r0
 8003c9c:	4608      	mov	r0, r1
 8003c9e:	4611      	mov	r1, r2
 8003ca0:	461a      	mov	r2, r3
 8003ca2:	4623      	mov	r3, r4
 8003ca4:	80fb      	strh	r3, [r7, #6]
 8003ca6:	4603      	mov	r3, r0
 8003ca8:	717b      	strb	r3, [r7, #5]
 8003caa:	460b      	mov	r3, r1
 8003cac:	713b      	strb	r3, [r7, #4]
 8003cae:	4613      	mov	r3, r2
 8003cb0:	70fb      	strb	r3, [r7, #3]
 8003cb2:	78fb      	ldrb	r3, [r7, #3]
 8003cb4:	2b01      	cmp	r3, #1
 8003cb6:	d00b      	beq.n	8003cd0 <ucg_add_vector_x+0x3c>
 8003cb8:	2b02      	cmp	r3, #2
 8003cba:	d011      	beq.n	8003ce0 <ucg_add_vector_x+0x4c>
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d117      	bne.n	8003cf0 <ucg_add_vector_x+0x5c>
 8003cc0:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8003cc4:	b29a      	uxth	r2, r3
 8003cc6:	88fb      	ldrh	r3, [r7, #6]
 8003cc8:	4413      	add	r3, r2
 8003cca:	b29b      	uxth	r3, r3
 8003ccc:	80fb      	strh	r3, [r7, #6]
 8003cce:	e017      	b.n	8003d00 <ucg_add_vector_x+0x6c>
 8003cd0:	88fa      	ldrh	r2, [r7, #6]
 8003cd2:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8003cd6:	b29b      	uxth	r3, r3
 8003cd8:	1ad3      	subs	r3, r2, r3
 8003cda:	b29b      	uxth	r3, r3
 8003cdc:	80fb      	strh	r3, [r7, #6]
 8003cde:	e00f      	b.n	8003d00 <ucg_add_vector_x+0x6c>
 8003ce0:	88fa      	ldrh	r2, [r7, #6]
 8003ce2:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8003ce6:	b29b      	uxth	r3, r3
 8003ce8:	1ad3      	subs	r3, r2, r3
 8003cea:	b29b      	uxth	r3, r3
 8003cec:	80fb      	strh	r3, [r7, #6]
 8003cee:	e007      	b.n	8003d00 <ucg_add_vector_x+0x6c>
 8003cf0:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8003cf4:	b29a      	uxth	r2, r3
 8003cf6:	88fb      	ldrh	r3, [r7, #6]
 8003cf8:	4413      	add	r3, r2
 8003cfa:	b29b      	uxth	r3, r3
 8003cfc:	80fb      	strh	r3, [r7, #6]
 8003cfe:	bf00      	nop
 8003d00:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003d04:	4618      	mov	r0, r3
 8003d06:	3708      	adds	r7, #8
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	bc90      	pop	{r4, r7}
 8003d0c:	4770      	bx	lr

08003d0e <ucg_font_decode_len>:
 8003d0e:	b590      	push	{r4, r7, lr}
 8003d10:	b089      	sub	sp, #36	; 0x24
 8003d12:	af02      	add	r7, sp, #8
 8003d14:	6078      	str	r0, [r7, #4]
 8003d16:	460b      	mov	r3, r1
 8003d18:	70fb      	strb	r3, [r7, #3]
 8003d1a:	4613      	mov	r3, r2
 8003d1c:	70bb      	strb	r3, [r7, #2]
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	3380      	adds	r3, #128	; 0x80
 8003d22:	613b      	str	r3, [r7, #16]
 8003d24:	78fb      	ldrb	r3, [r7, #3]
 8003d26:	75fb      	strb	r3, [r7, #23]
 8003d28:	693b      	ldr	r3, [r7, #16]
 8003d2a:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8003d2e:	757b      	strb	r3, [r7, #21]
 8003d30:	693b      	ldr	r3, [r7, #16]
 8003d32:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8003d36:	753b      	strb	r3, [r7, #20]
 8003d38:	693b      	ldr	r3, [r7, #16]
 8003d3a:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8003d3e:	73fb      	strb	r3, [r7, #15]
 8003d40:	7bfa      	ldrb	r2, [r7, #15]
 8003d42:	7d7b      	ldrb	r3, [r7, #21]
 8003d44:	1ad3      	subs	r3, r2, r3
 8003d46:	73fb      	strb	r3, [r7, #15]
 8003d48:	7bfb      	ldrb	r3, [r7, #15]
 8003d4a:	75bb      	strb	r3, [r7, #22]
 8003d4c:	7dfa      	ldrb	r2, [r7, #23]
 8003d4e:	7bfb      	ldrb	r3, [r7, #15]
 8003d50:	429a      	cmp	r2, r3
 8003d52:	d201      	bcs.n	8003d58 <ucg_font_decode_len+0x4a>
 8003d54:	7dfb      	ldrb	r3, [r7, #23]
 8003d56:	75bb      	strb	r3, [r7, #22]
 8003d58:	693b      	ldr	r3, [r7, #16]
 8003d5a:	889b      	ldrh	r3, [r3, #4]
 8003d5c:	81bb      	strh	r3, [r7, #12]
 8003d5e:	693b      	ldr	r3, [r7, #16]
 8003d60:	88db      	ldrh	r3, [r3, #6]
 8003d62:	817b      	strh	r3, [r7, #10]
 8003d64:	f997 1015 	ldrsb.w	r1, [r7, #21]
 8003d68:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8003d6c:	693b      	ldr	r3, [r7, #16]
 8003d6e:	7b9b      	ldrb	r3, [r3, #14]
 8003d70:	f9b7 000c 	ldrsh.w	r0, [r7, #12]
 8003d74:	f7ff ff8e 	bl	8003c94 <ucg_add_vector_x>
 8003d78:	4603      	mov	r3, r0
 8003d7a:	81bb      	strh	r3, [r7, #12]
 8003d7c:	f997 1015 	ldrsb.w	r1, [r7, #21]
 8003d80:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8003d84:	693b      	ldr	r3, [r7, #16]
 8003d86:	7b9b      	ldrb	r3, [r3, #14]
 8003d88:	f9b7 000a 	ldrsh.w	r0, [r7, #10]
 8003d8c:	f7ff ff45 	bl	8003c1a <ucg_add_vector_y>
 8003d90:	4603      	mov	r3, r0
 8003d92:	817b      	strh	r3, [r7, #10]
 8003d94:	78bb      	ldrb	r3, [r7, #2]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d011      	beq.n	8003dbe <ucg_font_decode_len+0xb0>
 8003d9a:	7dbb      	ldrb	r3, [r7, #22]
 8003d9c:	b21c      	sxth	r4, r3
 8003d9e:	693b      	ldr	r3, [r7, #16]
 8003da0:	7b9b      	ldrb	r3, [r3, #14]
 8003da2:	b21b      	sxth	r3, r3
 8003da4:	f9b7 000a 	ldrsh.w	r0, [r7, #10]
 8003da8:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 8003dac:	2200      	movs	r2, #0
 8003dae:	9201      	str	r2, [sp, #4]
 8003db0:	9300      	str	r3, [sp, #0]
 8003db2:	4623      	mov	r3, r4
 8003db4:	4602      	mov	r2, r0
 8003db6:	6878      	ldr	r0, [r7, #4]
 8003db8:	f000 fbc0 	bl	800453c <ucg_Draw90Line>
 8003dbc:	e014      	b.n	8003de8 <ucg_font_decode_len+0xda>
 8003dbe:	693b      	ldr	r3, [r7, #16]
 8003dc0:	7b5b      	ldrb	r3, [r3, #13]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d110      	bne.n	8003de8 <ucg_font_decode_len+0xda>
 8003dc6:	7dbb      	ldrb	r3, [r7, #22]
 8003dc8:	b21c      	sxth	r4, r3
 8003dca:	693b      	ldr	r3, [r7, #16]
 8003dcc:	7b9b      	ldrb	r3, [r3, #14]
 8003dce:	b21b      	sxth	r3, r3
 8003dd0:	f9b7 000a 	ldrsh.w	r0, [r7, #10]
 8003dd4:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 8003dd8:	2201      	movs	r2, #1
 8003dda:	9201      	str	r2, [sp, #4]
 8003ddc:	9300      	str	r3, [sp, #0]
 8003dde:	4623      	mov	r3, r4
 8003de0:	4602      	mov	r2, r0
 8003de2:	6878      	ldr	r0, [r7, #4]
 8003de4:	f000 fbaa 	bl	800453c <ucg_Draw90Line>
 8003de8:	7dfa      	ldrb	r2, [r7, #23]
 8003dea:	7bfb      	ldrb	r3, [r7, #15]
 8003dec:	429a      	cmp	r2, r3
 8003dee:	d309      	bcc.n	8003e04 <ucg_font_decode_len+0xf6>
 8003df0:	7dfa      	ldrb	r2, [r7, #23]
 8003df2:	7bfb      	ldrb	r3, [r7, #15]
 8003df4:	1ad3      	subs	r3, r2, r3
 8003df6:	75fb      	strb	r3, [r7, #23]
 8003df8:	2300      	movs	r3, #0
 8003dfa:	757b      	strb	r3, [r7, #21]
 8003dfc:	7d3b      	ldrb	r3, [r7, #20]
 8003dfe:	3301      	adds	r3, #1
 8003e00:	753b      	strb	r3, [r7, #20]
 8003e02:	e799      	b.n	8003d38 <ucg_font_decode_len+0x2a>
 8003e04:	bf00      	nop
 8003e06:	7d7a      	ldrb	r2, [r7, #21]
 8003e08:	7dfb      	ldrb	r3, [r7, #23]
 8003e0a:	4413      	add	r3, r2
 8003e0c:	757b      	strb	r3, [r7, #21]
 8003e0e:	f997 2015 	ldrsb.w	r2, [r7, #21]
 8003e12:	693b      	ldr	r3, [r7, #16]
 8003e14:	721a      	strb	r2, [r3, #8]
 8003e16:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8003e1a:	693b      	ldr	r3, [r7, #16]
 8003e1c:	725a      	strb	r2, [r3, #9]
 8003e1e:	bf00      	nop
 8003e20:	371c      	adds	r7, #28
 8003e22:	46bd      	mov	sp, r7
 8003e24:	bd90      	pop	{r4, r7, pc}

08003e26 <ucg_font_setup_decode>:
 8003e26:	b580      	push	{r7, lr}
 8003e28:	b084      	sub	sp, #16
 8003e2a:	af00      	add	r7, sp, #0
 8003e2c:	6078      	str	r0, [r7, #4]
 8003e2e:	6039      	str	r1, [r7, #0]
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	3380      	adds	r3, #128	; 0x80
 8003e34:	60fb      	str	r3, [r7, #12]
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	683a      	ldr	r2, [r7, #0]
 8003e3a:	601a      	str	r2, [r3, #0]
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	2200      	movs	r2, #0
 8003e40:	731a      	strb	r2, [r3, #12]
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	1c5a      	adds	r2, r3, #1
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	601a      	str	r2, [r3, #0]
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	1c5a      	adds	r2, r3, #1
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	601a      	str	r2, [r3, #0]
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 8003e5c:	4619      	mov	r1, r3
 8003e5e:	68f8      	ldr	r0, [r7, #12]
 8003e60:	f7ff fe6d 	bl	8003b3e <ucg_font_decode_get_unsigned_bits>
 8003e64:	4603      	mov	r3, r0
 8003e66:	b25a      	sxtb	r2, r3
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	729a      	strb	r2, [r3, #10]
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 8003e72:	4619      	mov	r1, r3
 8003e74:	68f8      	ldr	r0, [r7, #12]
 8003e76:	f7ff fe62 	bl	8003b3e <ucg_font_decode_get_unsigned_bits>
 8003e7a:	4603      	mov	r3, r0
 8003e7c:	b25a      	sxtb	r2, r3
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	72da      	strb	r2, [r3, #11]
 8003e82:	bf00      	nop
 8003e84:	3710      	adds	r7, #16
 8003e86:	46bd      	mov	sp, r7
 8003e88:	bd80      	pop	{r7, pc}

08003e8a <ucg_font_decode_glyph>:
 8003e8a:	b580      	push	{r7, lr}
 8003e8c:	b084      	sub	sp, #16
 8003e8e:	af00      	add	r7, sp, #0
 8003e90:	6078      	str	r0, [r7, #4]
 8003e92:	6039      	str	r1, [r7, #0]
 8003e94:	6839      	ldr	r1, [r7, #0]
 8003e96:	6878      	ldr	r0, [r7, #4]
 8003e98:	f7ff ffc5 	bl	8003e26 <ucg_font_setup_decode>
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	f893 308b 	ldrb.w	r3, [r3, #139]	; 0x8b
 8003ea2:	73fb      	strb	r3, [r7, #15]
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	f103 0280 	add.w	r2, r3, #128	; 0x80
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 8003eb0:	4619      	mov	r1, r3
 8003eb2:	4610      	mov	r0, r2
 8003eb4:	f7ff fe8e 	bl	8003bd4 <ucg_font_decode_get_signed_bits>
 8003eb8:	4603      	mov	r3, r0
 8003eba:	73bb      	strb	r3, [r7, #14]
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	f103 0280 	add.w	r2, r3, #128	; 0x80
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	f893 3097 	ldrb.w	r3, [r3, #151]	; 0x97
 8003ec8:	4619      	mov	r1, r3
 8003eca:	4610      	mov	r0, r2
 8003ecc:	f7ff fe82 	bl	8003bd4 <ucg_font_decode_get_signed_bits>
 8003ed0:	4603      	mov	r3, r0
 8003ed2:	737b      	strb	r3, [r7, #13]
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	f103 0280 	add.w	r2, r3, #128	; 0x80
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8003ee0:	4619      	mov	r1, r3
 8003ee2:	4610      	mov	r0, r2
 8003ee4:	f7ff fe76 	bl	8003bd4 <ucg_font_decode_get_signed_bits>
 8003ee8:	4603      	mov	r3, r0
 8003eea:	733b      	strb	r3, [r7, #12]
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	f993 308a 	ldrsb.w	r3, [r3, #138]	; 0x8a
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	dd69      	ble.n	8003fca <ucg_font_decode_glyph+0x140>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	f9b3 0084 	ldrsh.w	r0, [r3, #132]	; 0x84
 8003efc:	7bfa      	ldrb	r2, [r7, #15]
 8003efe:	7b7b      	ldrb	r3, [r7, #13]
 8003f00:	4413      	add	r3, r2
 8003f02:	b2db      	uxtb	r3, r3
 8003f04:	425b      	negs	r3, r3
 8003f06:	b2db      	uxtb	r3, r3
 8003f08:	b25a      	sxtb	r2, r3
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	f893 308e 	ldrb.w	r3, [r3, #142]	; 0x8e
 8003f10:	f997 100e 	ldrsb.w	r1, [r7, #14]
 8003f14:	f7ff febe 	bl	8003c94 <ucg_add_vector_x>
 8003f18:	4603      	mov	r3, r0
 8003f1a:	461a      	mov	r2, r3
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	f9b3 0086 	ldrsh.w	r0, [r3, #134]	; 0x86
 8003f28:	7bfa      	ldrb	r2, [r7, #15]
 8003f2a:	7b7b      	ldrb	r3, [r7, #13]
 8003f2c:	4413      	add	r3, r2
 8003f2e:	b2db      	uxtb	r3, r3
 8003f30:	425b      	negs	r3, r3
 8003f32:	b2db      	uxtb	r3, r3
 8003f34:	b25a      	sxtb	r2, r3
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	f893 308e 	ldrb.w	r3, [r3, #142]	; 0x8e
 8003f3c:	f997 100e 	ldrsb.w	r1, [r7, #14]
 8003f40:	f7ff fe6b 	bl	8003c1a <ucg_add_vector_y>
 8003f44:	4603      	mov	r3, r0
 8003f46:	461a      	mov	r2, r3
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	2200      	movs	r2, #0
 8003f52:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	2200      	movs	r2, #0
 8003f5a:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	f103 0280 	add.w	r2, r3, #128	; 0x80
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8003f6a:	4619      	mov	r1, r3
 8003f6c:	4610      	mov	r0, r2
 8003f6e:	f7ff fde6 	bl	8003b3e <ucg_font_decode_get_unsigned_bits>
 8003f72:	4603      	mov	r3, r0
 8003f74:	72fb      	strb	r3, [r7, #11]
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	f103 0280 	add.w	r2, r3, #128	; 0x80
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8003f82:	4619      	mov	r1, r3
 8003f84:	4610      	mov	r0, r2
 8003f86:	f7ff fdda 	bl	8003b3e <ucg_font_decode_get_unsigned_bits>
 8003f8a:	4603      	mov	r3, r0
 8003f8c:	72bb      	strb	r3, [r7, #10]
 8003f8e:	7afb      	ldrb	r3, [r7, #11]
 8003f90:	2200      	movs	r2, #0
 8003f92:	4619      	mov	r1, r3
 8003f94:	6878      	ldr	r0, [r7, #4]
 8003f96:	f7ff feba 	bl	8003d0e <ucg_font_decode_len>
 8003f9a:	7abb      	ldrb	r3, [r7, #10]
 8003f9c:	2201      	movs	r2, #1
 8003f9e:	4619      	mov	r1, r3
 8003fa0:	6878      	ldr	r0, [r7, #4]
 8003fa2:	f7ff feb4 	bl	8003d0e <ucg_font_decode_len>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	3380      	adds	r3, #128	; 0x80
 8003faa:	2101      	movs	r1, #1
 8003fac:	4618      	mov	r0, r3
 8003fae:	f7ff fdc6 	bl	8003b3e <ucg_font_decode_get_unsigned_bits>
 8003fb2:	4603      	mov	r3, r0
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d1ea      	bne.n	8003f8e <ucg_font_decode_glyph+0x104>
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	f993 3089 	ldrsb.w	r3, [r3, #137]	; 0x89
 8003fbe:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8003fc2:	429a      	cmp	r2, r3
 8003fc4:	dd00      	ble.n	8003fc8 <ucg_font_decode_glyph+0x13e>
 8003fc6:	e7ca      	b.n	8003f5e <ucg_font_decode_glyph+0xd4>
 8003fc8:	bf00      	nop
 8003fca:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8003fce:	4618      	mov	r0, r3
 8003fd0:	3710      	adds	r7, #16
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	bd80      	pop	{r7, pc}

08003fd6 <ucg_font_get_glyph_data>:
 8003fd6:	b480      	push	{r7}
 8003fd8:	b085      	sub	sp, #20
 8003fda:	af00      	add	r7, sp, #0
 8003fdc:	6078      	str	r0, [r7, #4]
 8003fde:	460b      	mov	r3, r1
 8003fe0:	70fb      	strb	r3, [r7, #3]
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003fe6:	60fb      	str	r3, [r7, #12]
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	3315      	adds	r3, #21
 8003fec:	60fb      	str	r3, [r7, #12]
 8003fee:	78fb      	ldrb	r3, [r7, #3]
 8003ff0:	2b60      	cmp	r3, #96	; 0x60
 8003ff2:	d907      	bls.n	8004004 <ucg_font_get_glyph_data+0x2e>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	; 0xa4
 8003ffa:	461a      	mov	r2, r3
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	4413      	add	r3, r2
 8004000:	60fb      	str	r3, [r7, #12]
 8004002:	e009      	b.n	8004018 <ucg_font_get_glyph_data+0x42>
 8004004:	78fb      	ldrb	r3, [r7, #3]
 8004006:	2b40      	cmp	r3, #64	; 0x40
 8004008:	d906      	bls.n	8004018 <ucg_font_get_glyph_data+0x42>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	f8b3 30a2 	ldrh.w	r3, [r3, #162]	; 0xa2
 8004010:	461a      	mov	r2, r3
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	4413      	add	r3, r2
 8004016:	60fb      	str	r3, [r7, #12]
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	3301      	adds	r3, #1
 800401c:	781b      	ldrb	r3, [r3, #0]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d00e      	beq.n	8004040 <ucg_font_get_glyph_data+0x6a>
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	781b      	ldrb	r3, [r3, #0]
 8004026:	78fa      	ldrb	r2, [r7, #3]
 8004028:	429a      	cmp	r2, r3
 800402a:	d101      	bne.n	8004030 <ucg_font_get_glyph_data+0x5a>
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	e009      	b.n	8004044 <ucg_font_get_glyph_data+0x6e>
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	3301      	adds	r3, #1
 8004034:	781b      	ldrb	r3, [r3, #0]
 8004036:	461a      	mov	r2, r3
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	4413      	add	r3, r2
 800403c:	60fb      	str	r3, [r7, #12]
 800403e:	e7eb      	b.n	8004018 <ucg_font_get_glyph_data+0x42>
 8004040:	bf00      	nop
 8004042:	2300      	movs	r3, #0
 8004044:	4618      	mov	r0, r3
 8004046:	3714      	adds	r7, #20
 8004048:	46bd      	mov	sp, r7
 800404a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404e:	4770      	bx	lr

08004050 <ucg_font_draw_glyph>:
 8004050:	b580      	push	{r7, lr}
 8004052:	b086      	sub	sp, #24
 8004054:	af00      	add	r7, sp, #0
 8004056:	60f8      	str	r0, [r7, #12]
 8004058:	4608      	mov	r0, r1
 800405a:	4611      	mov	r1, r2
 800405c:	461a      	mov	r2, r3
 800405e:	4603      	mov	r3, r0
 8004060:	817b      	strh	r3, [r7, #10]
 8004062:	460b      	mov	r3, r1
 8004064:	813b      	strh	r3, [r7, #8]
 8004066:	4613      	mov	r3, r2
 8004068:	71fb      	strb	r3, [r7, #7]
 800406a:	2300      	movs	r3, #0
 800406c:	82fb      	strh	r3, [r7, #22]
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	897a      	ldrh	r2, [r7, #10]
 8004072:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	893a      	ldrh	r2, [r7, #8]
 800407a:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	79fa      	ldrb	r2, [r7, #7]
 8004082:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
 8004086:	f897 3020 	ldrb.w	r3, [r7, #32]
 800408a:	4619      	mov	r1, r3
 800408c:	68f8      	ldr	r0, [r7, #12]
 800408e:	f7ff ffa2 	bl	8003fd6 <ucg_font_get_glyph_data>
 8004092:	6138      	str	r0, [r7, #16]
 8004094:	693b      	ldr	r3, [r7, #16]
 8004096:	2b00      	cmp	r3, #0
 8004098:	d005      	beq.n	80040a6 <ucg_font_draw_glyph+0x56>
 800409a:	6939      	ldr	r1, [r7, #16]
 800409c:	68f8      	ldr	r0, [r7, #12]
 800409e:	f7ff fef4 	bl	8003e8a <ucg_font_decode_glyph>
 80040a2:	4603      	mov	r3, r0
 80040a4:	82fb      	strh	r3, [r7, #22]
 80040a6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80040aa:	4618      	mov	r0, r3
 80040ac:	3718      	adds	r7, #24
 80040ae:	46bd      	mov	sp, r7
 80040b0:	bd80      	pop	{r7, pc}

080040b2 <ucg_SetFontMode>:
 80040b2:	b480      	push	{r7}
 80040b4:	b083      	sub	sp, #12
 80040b6:	af00      	add	r7, sp, #0
 80040b8:	6078      	str	r0, [r7, #4]
 80040ba:	460b      	mov	r3, r1
 80040bc:	70fb      	strb	r3, [r7, #3]
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	78fa      	ldrb	r2, [r7, #3]
 80040c2:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
 80040c6:	bf00      	nop
 80040c8:	370c      	adds	r7, #12
 80040ca:	46bd      	mov	sp, r7
 80040cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d0:	4770      	bx	lr
	...

080040d4 <ucg_DrawGlyph>:
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b086      	sub	sp, #24
 80040d8:	af02      	add	r7, sp, #8
 80040da:	60f8      	str	r0, [r7, #12]
 80040dc:	4608      	mov	r0, r1
 80040de:	4611      	mov	r1, r2
 80040e0:	461a      	mov	r2, r3
 80040e2:	4603      	mov	r3, r0
 80040e4:	817b      	strh	r3, [r7, #10]
 80040e6:	460b      	mov	r3, r1
 80040e8:	813b      	strh	r3, [r7, #8]
 80040ea:	4613      	mov	r3, r2
 80040ec:	71fb      	strb	r3, [r7, #7]
 80040ee:	79fb      	ldrb	r3, [r7, #7]
 80040f0:	2b03      	cmp	r3, #3
 80040f2:	d837      	bhi.n	8004164 <ucg_DrawGlyph+0x90>
 80040f4:	a201      	add	r2, pc, #4	; (adr r2, 80040fc <ucg_DrawGlyph+0x28>)
 80040f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040fa:	bf00      	nop
 80040fc:	0800410d 	.word	0x0800410d
 8004100:	08004123 	.word	0x08004123
 8004104:	08004139 	.word	0x08004139
 8004108:	0800414f 	.word	0x0800414f
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004110:	68f8      	ldr	r0, [r7, #12]
 8004112:	4798      	blx	r3
 8004114:	4603      	mov	r3, r0
 8004116:	b29a      	uxth	r2, r3
 8004118:	893b      	ldrh	r3, [r7, #8]
 800411a:	4413      	add	r3, r2
 800411c:	b29b      	uxth	r3, r3
 800411e:	813b      	strh	r3, [r7, #8]
 8004120:	e020      	b.n	8004164 <ucg_DrawGlyph+0x90>
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004126:	68f8      	ldr	r0, [r7, #12]
 8004128:	4798      	blx	r3
 800412a:	4603      	mov	r3, r0
 800412c:	897a      	ldrh	r2, [r7, #10]
 800412e:	b29b      	uxth	r3, r3
 8004130:	1ad3      	subs	r3, r2, r3
 8004132:	b29b      	uxth	r3, r3
 8004134:	817b      	strh	r3, [r7, #10]
 8004136:	e015      	b.n	8004164 <ucg_DrawGlyph+0x90>
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800413c:	68f8      	ldr	r0, [r7, #12]
 800413e:	4798      	blx	r3
 8004140:	4603      	mov	r3, r0
 8004142:	893a      	ldrh	r2, [r7, #8]
 8004144:	b29b      	uxth	r3, r3
 8004146:	1ad3      	subs	r3, r2, r3
 8004148:	b29b      	uxth	r3, r3
 800414a:	813b      	strh	r3, [r7, #8]
 800414c:	e00a      	b.n	8004164 <ucg_DrawGlyph+0x90>
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004152:	68f8      	ldr	r0, [r7, #12]
 8004154:	4798      	blx	r3
 8004156:	4603      	mov	r3, r0
 8004158:	b29a      	uxth	r2, r3
 800415a:	897b      	ldrh	r3, [r7, #10]
 800415c:	4413      	add	r3, r2
 800415e:	b29b      	uxth	r3, r3
 8004160:	817b      	strh	r3, [r7, #10]
 8004162:	bf00      	nop
 8004164:	79f8      	ldrb	r0, [r7, #7]
 8004166:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800416a:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 800416e:	7e3b      	ldrb	r3, [r7, #24]
 8004170:	9300      	str	r3, [sp, #0]
 8004172:	4603      	mov	r3, r0
 8004174:	68f8      	ldr	r0, [r7, #12]
 8004176:	f7ff ff6b 	bl	8004050 <ucg_font_draw_glyph>
 800417a:	4603      	mov	r3, r0
 800417c:	4618      	mov	r0, r3
 800417e:	3710      	adds	r7, #16
 8004180:	46bd      	mov	sp, r7
 8004182:	bd80      	pop	{r7, pc}

08004184 <task_drawString>:
 8004184:	b580      	push	{r7, lr}
 8004186:	b086      	sub	sp, #24
 8004188:	af02      	add	r7, sp, #8
 800418a:	6078      	str	r0, [r7, #4]
 800418c:	2300      	movs	r3, #0
 800418e:	81fb      	strh	r3, [r7, #14]
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	60bb      	str	r3, [r7, #8]
 8004194:	4b45      	ldr	r3, [pc, #276]	; (80042ac <task_drawString+0x128>)
 8004196:	781b      	ldrb	r3, [r3, #0]
 8004198:	2b00      	cmp	r3, #0
 800419a:	d002      	beq.n	80041a2 <task_drawString+0x1e>
 800419c:	2b01      	cmp	r3, #1
 800419e:	d01e      	beq.n	80041de <task_drawString+0x5a>
 80041a0:	e07b      	b.n	800429a <task_drawString+0x116>
 80041a2:	4843      	ldr	r0, [pc, #268]	; (80042b0 <task_drawString+0x12c>)
 80041a4:	f000 fb5d 	bl	8004862 <bufNumItems>
 80041a8:	4603      	mov	r3, r0
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d007      	beq.n	80041be <task_drawString+0x3a>
 80041ae:	4941      	ldr	r1, [pc, #260]	; (80042b4 <task_drawString+0x130>)
 80041b0:	483f      	ldr	r0, [pc, #252]	; (80042b0 <task_drawString+0x12c>)
 80041b2:	f000 fbef 	bl	8004994 <bufDeDat>
 80041b6:	4b3d      	ldr	r3, [pc, #244]	; (80042ac <task_drawString+0x128>)
 80041b8:	2201      	movs	r2, #1
 80041ba:	701a      	strb	r2, [r3, #0]
 80041bc:	e071      	b.n	80042a2 <task_drawString+0x11e>
 80041be:	4b3e      	ldr	r3, [pc, #248]	; (80042b8 <task_drawString+0x134>)
 80041c0:	781b      	ldrb	r3, [r3, #0]
 80041c2:	2bff      	cmp	r3, #255	; 0xff
 80041c4:	d007      	beq.n	80041d6 <task_drawString+0x52>
 80041c6:	4b3c      	ldr	r3, [pc, #240]	; (80042b8 <task_drawString+0x134>)
 80041c8:	781b      	ldrb	r3, [r3, #0]
 80041ca:	4618      	mov	r0, r3
 80041cc:	f7fe fcb0 	bl	8002b30 <TimerStop>
 80041d0:	4b39      	ldr	r3, [pc, #228]	; (80042b8 <task_drawString+0x134>)
 80041d2:	22ff      	movs	r2, #255	; 0xff
 80041d4:	701a      	strb	r2, [r3, #0]
 80041d6:	4b35      	ldr	r3, [pc, #212]	; (80042ac <task_drawString+0x128>)
 80041d8:	2200      	movs	r2, #0
 80041da:	701a      	strb	r2, [r3, #0]
 80041dc:	e061      	b.n	80042a2 <task_drawString+0x11e>
 80041de:	4b35      	ldr	r3, [pc, #212]	; (80042b4 <task_drawString+0x130>)
 80041e0:	689b      	ldr	r3, [r3, #8]
 80041e2:	781b      	ldrb	r3, [r3, #0]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d054      	beq.n	8004292 <task_drawString+0x10e>
 80041e8:	4b32      	ldr	r3, [pc, #200]	; (80042b4 <task_drawString+0x130>)
 80041ea:	f9b3 1000 	ldrsh.w	r1, [r3]
 80041ee:	4b31      	ldr	r3, [pc, #196]	; (80042b4 <task_drawString+0x130>)
 80041f0:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80041f4:	4b2f      	ldr	r3, [pc, #188]	; (80042b4 <task_drawString+0x130>)
 80041f6:	7918      	ldrb	r0, [r3, #4]
 80041f8:	4b2e      	ldr	r3, [pc, #184]	; (80042b4 <task_drawString+0x130>)
 80041fa:	689b      	ldr	r3, [r3, #8]
 80041fc:	781b      	ldrb	r3, [r3, #0]
 80041fe:	9300      	str	r3, [sp, #0]
 8004200:	4603      	mov	r3, r0
 8004202:	68b8      	ldr	r0, [r7, #8]
 8004204:	f7ff ff66 	bl	80040d4 <ucg_DrawGlyph>
 8004208:	4603      	mov	r3, r0
 800420a:	81fb      	strh	r3, [r7, #14]
 800420c:	4b29      	ldr	r3, [pc, #164]	; (80042b4 <task_drawString+0x130>)
 800420e:	791b      	ldrb	r3, [r3, #4]
 8004210:	2b03      	cmp	r3, #3
 8004212:	d837      	bhi.n	8004284 <task_drawString+0x100>
 8004214:	a201      	add	r2, pc, #4	; (adr r2, 800421c <task_drawString+0x98>)
 8004216:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800421a:	bf00      	nop
 800421c:	0800422d 	.word	0x0800422d
 8004220:	08004243 	.word	0x08004243
 8004224:	08004259 	.word	0x08004259
 8004228:	0800426f 	.word	0x0800426f
 800422c:	4b21      	ldr	r3, [pc, #132]	; (80042b4 <task_drawString+0x130>)
 800422e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004232:	b29a      	uxth	r2, r3
 8004234:	89fb      	ldrh	r3, [r7, #14]
 8004236:	4413      	add	r3, r2
 8004238:	b29b      	uxth	r3, r3
 800423a:	b21a      	sxth	r2, r3
 800423c:	4b1d      	ldr	r3, [pc, #116]	; (80042b4 <task_drawString+0x130>)
 800423e:	801a      	strh	r2, [r3, #0]
 8004240:	e021      	b.n	8004286 <task_drawString+0x102>
 8004242:	4b1c      	ldr	r3, [pc, #112]	; (80042b4 <task_drawString+0x130>)
 8004244:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004248:	b29a      	uxth	r2, r3
 800424a:	89fb      	ldrh	r3, [r7, #14]
 800424c:	4413      	add	r3, r2
 800424e:	b29b      	uxth	r3, r3
 8004250:	b21a      	sxth	r2, r3
 8004252:	4b18      	ldr	r3, [pc, #96]	; (80042b4 <task_drawString+0x130>)
 8004254:	805a      	strh	r2, [r3, #2]
 8004256:	e016      	b.n	8004286 <task_drawString+0x102>
 8004258:	4b16      	ldr	r3, [pc, #88]	; (80042b4 <task_drawString+0x130>)
 800425a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800425e:	b29a      	uxth	r2, r3
 8004260:	89fb      	ldrh	r3, [r7, #14]
 8004262:	1ad3      	subs	r3, r2, r3
 8004264:	b29b      	uxth	r3, r3
 8004266:	b21a      	sxth	r2, r3
 8004268:	4b12      	ldr	r3, [pc, #72]	; (80042b4 <task_drawString+0x130>)
 800426a:	801a      	strh	r2, [r3, #0]
 800426c:	e00b      	b.n	8004286 <task_drawString+0x102>
 800426e:	4b11      	ldr	r3, [pc, #68]	; (80042b4 <task_drawString+0x130>)
 8004270:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004274:	b29a      	uxth	r2, r3
 8004276:	89fb      	ldrh	r3, [r7, #14]
 8004278:	1ad3      	subs	r3, r2, r3
 800427a:	b29b      	uxth	r3, r3
 800427c:	b21a      	sxth	r2, r3
 800427e:	4b0d      	ldr	r3, [pc, #52]	; (80042b4 <task_drawString+0x130>)
 8004280:	805a      	strh	r2, [r3, #2]
 8004282:	e000      	b.n	8004286 <task_drawString+0x102>
 8004284:	bf00      	nop
 8004286:	4b0b      	ldr	r3, [pc, #44]	; (80042b4 <task_drawString+0x130>)
 8004288:	689b      	ldr	r3, [r3, #8]
 800428a:	3301      	adds	r3, #1
 800428c:	4a09      	ldr	r2, [pc, #36]	; (80042b4 <task_drawString+0x130>)
 800428e:	6093      	str	r3, [r2, #8]
 8004290:	e007      	b.n	80042a2 <task_drawString+0x11e>
 8004292:	4b06      	ldr	r3, [pc, #24]	; (80042ac <task_drawString+0x128>)
 8004294:	2200      	movs	r2, #0
 8004296:	701a      	strb	r2, [r3, #0]
 8004298:	e003      	b.n	80042a2 <task_drawString+0x11e>
 800429a:	4b04      	ldr	r3, [pc, #16]	; (80042ac <task_drawString+0x128>)
 800429c:	2200      	movs	r2, #0
 800429e:	701a      	strb	r2, [r3, #0]
 80042a0:	bf00      	nop
 80042a2:	bf00      	nop
 80042a4:	3710      	adds	r7, #16
 80042a6:	46bd      	mov	sp, r7
 80042a8:	bd80      	pop	{r7, pc}
 80042aa:	bf00      	nop
 80042ac:	20001388 	.word	0x20001388
 80042b0:	20000378 	.word	0x20000378
 80042b4:	200014d4 	.word	0x200014d4
 80042b8:	20000024 	.word	0x20000024

080042bc <ucg_DrawString>:
 80042bc:	b580      	push	{r7, lr}
 80042be:	b08a      	sub	sp, #40	; 0x28
 80042c0:	af02      	add	r7, sp, #8
 80042c2:	60f8      	str	r0, [r7, #12]
 80042c4:	4608      	mov	r0, r1
 80042c6:	4611      	mov	r1, r2
 80042c8:	461a      	mov	r2, r3
 80042ca:	4603      	mov	r3, r0
 80042cc:	817b      	strh	r3, [r7, #10]
 80042ce:	460b      	mov	r3, r1
 80042d0:	813b      	strh	r3, [r7, #8]
 80042d2:	4613      	mov	r3, r2
 80042d4:	71fb      	strb	r3, [r7, #7]
 80042d6:	2300      	movs	r3, #0
 80042d8:	83fb      	strh	r3, [r7, #30]
 80042da:	897b      	ldrh	r3, [r7, #10]
 80042dc:	823b      	strh	r3, [r7, #16]
 80042de:	893b      	ldrh	r3, [r7, #8]
 80042e0:	827b      	strh	r3, [r7, #18]
 80042e2:	79fb      	ldrb	r3, [r7, #7]
 80042e4:	753b      	strb	r3, [r7, #20]
 80042e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042e8:	61bb      	str	r3, [r7, #24]
 80042ea:	f107 0310 	add.w	r3, r7, #16
 80042ee:	4619      	mov	r1, r3
 80042f0:	480c      	ldr	r0, [pc, #48]	; (8004324 <ucg_DrawString+0x68>)
 80042f2:	f000 fb01 	bl	80048f8 <bufEnDat>
 80042f6:	4b0c      	ldr	r3, [pc, #48]	; (8004328 <ucg_DrawString+0x6c>)
 80042f8:	781b      	ldrb	r3, [r3, #0]
 80042fa:	2bff      	cmp	r3, #255	; 0xff
 80042fc:	d10b      	bne.n	8004316 <ucg_DrawString+0x5a>
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	9300      	str	r3, [sp, #0]
 8004302:	4b0a      	ldr	r3, [pc, #40]	; (800432c <ucg_DrawString+0x70>)
 8004304:	22ff      	movs	r2, #255	; 0xff
 8004306:	211e      	movs	r1, #30
 8004308:	4809      	ldr	r0, [pc, #36]	; (8004330 <ucg_DrawString+0x74>)
 800430a:	f7fe fbaf 	bl	8002a6c <TimerStart>
 800430e:	4603      	mov	r3, r0
 8004310:	461a      	mov	r2, r3
 8004312:	4b05      	ldr	r3, [pc, #20]	; (8004328 <ucg_DrawString+0x6c>)
 8004314:	701a      	strb	r2, [r3, #0]
 8004316:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800431a:	4618      	mov	r0, r3
 800431c:	3720      	adds	r7, #32
 800431e:	46bd      	mov	sp, r7
 8004320:	bd80      	pop	{r7, pc}
 8004322:	bf00      	nop
 8004324:	20000378 	.word	0x20000378
 8004328:	20000024 	.word	0x20000024
 800432c:	08004185 	.word	0x08004185
 8004330:	08005f40 	.word	0x08005f40

08004334 <ucg_UpdateRefHeight>:
 8004334:	b480      	push	{r7}
 8004336:	b083      	sub	sp, #12
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004340:	2b00      	cmp	r3, #0
 8004342:	d05d      	beq.n	8004400 <ucg_UpdateRefHeight+0xcc>
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	f993 209d 	ldrsb.w	r2, [r3, #157]	; 0x9d
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	f993 209e 	ldrsb.w	r2, [r3, #158]	; 0x9e
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	f883 20ad 	strb.w	r2, [r3, #173]	; 0xad
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	f893 30ab 	ldrb.w	r3, [r3, #171]	; 0xab
 8004362:	2b00      	cmp	r3, #0
 8004364:	d04d      	beq.n	8004402 <ucg_UpdateRefHeight+0xce>
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	f893 30ab 	ldrb.w	r3, [r3, #171]	; 0xab
 800436c:	2b01      	cmp	r3, #1
 800436e:	d11c      	bne.n	80043aa <ucg_UpdateRefHeight+0x76>
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	f993 20ac 	ldrsb.w	r2, [r3, #172]	; 0xac
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	f993 309f 	ldrsb.w	r3, [r3, #159]	; 0x9f
 800437c:	429a      	cmp	r2, r3
 800437e:	da05      	bge.n	800438c <ucg_UpdateRefHeight+0x58>
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	f993 209f 	ldrsb.w	r2, [r3, #159]	; 0x9f
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	f993 20ad 	ldrsb.w	r2, [r3, #173]	; 0xad
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	f993 30a0 	ldrsb.w	r3, [r3, #160]	; 0xa0
 8004398:	429a      	cmp	r2, r3
 800439a:	dd32      	ble.n	8004402 <ucg_UpdateRefHeight+0xce>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	f993 20a0 	ldrsb.w	r2, [r3, #160]	; 0xa0
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	f883 20ad 	strb.w	r2, [r3, #173]	; 0xad
 80043a8:	e02b      	b.n	8004402 <ucg_UpdateRefHeight+0xce>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	f993 30ac 	ldrsb.w	r3, [r3, #172]	; 0xac
 80043b0:	461a      	mov	r2, r3
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	f993 309a 	ldrsb.w	r3, [r3, #154]	; 0x9a
 80043b8:	4619      	mov	r1, r3
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	f993 309c 	ldrsb.w	r3, [r3, #156]	; 0x9c
 80043c0:	440b      	add	r3, r1
 80043c2:	429a      	cmp	r2, r3
 80043c4:	da0d      	bge.n	80043e2 <ucg_UpdateRefHeight+0xae>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	f993 309a 	ldrsb.w	r3, [r3, #154]	; 0x9a
 80043cc:	b2da      	uxtb	r2, r3
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	f993 309c 	ldrsb.w	r3, [r3, #156]	; 0x9c
 80043d4:	b2db      	uxtb	r3, r3
 80043d6:	4413      	add	r3, r2
 80043d8:	b2db      	uxtb	r3, r3
 80043da:	b25a      	sxtb	r2, r3
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	f993 20ad 	ldrsb.w	r2, [r3, #173]	; 0xad
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	f993 309c 	ldrsb.w	r3, [r3, #156]	; 0x9c
 80043ee:	429a      	cmp	r2, r3
 80043f0:	dd07      	ble.n	8004402 <ucg_UpdateRefHeight+0xce>
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	f993 209c 	ldrsb.w	r2, [r3, #156]	; 0x9c
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	f883 20ad 	strb.w	r2, [r3, #173]	; 0xad
 80043fe:	e000      	b.n	8004402 <ucg_UpdateRefHeight+0xce>
 8004400:	bf00      	nop
 8004402:	370c      	adds	r7, #12
 8004404:	46bd      	mov	sp, r7
 8004406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440a:	4770      	bx	lr

0800440c <ucg_font_calc_vref_font>:
 800440c:	b480      	push	{r7}
 800440e:	b083      	sub	sp, #12
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
 8004414:	2300      	movs	r3, #0
 8004416:	4618      	mov	r0, r3
 8004418:	370c      	adds	r7, #12
 800441a:	46bd      	mov	sp, r7
 800441c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004420:	4770      	bx	lr
	...

08004424 <ucg_SetFontPosBaseline>:
 8004424:	b480      	push	{r7}
 8004426:	b083      	sub	sp, #12
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	4a04      	ldr	r2, [pc, #16]	; (8004440 <ucg_SetFontPosBaseline+0x1c>)
 8004430:	67da      	str	r2, [r3, #124]	; 0x7c
 8004432:	bf00      	nop
 8004434:	370c      	adds	r7, #12
 8004436:	46bd      	mov	sp, r7
 8004438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443c:	4770      	bx	lr
 800443e:	bf00      	nop
 8004440:	0800440d 	.word	0x0800440d

08004444 <ucg_SetFont>:
 8004444:	b580      	push	{r7, lr}
 8004446:	b082      	sub	sp, #8
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
 800444c:	6039      	str	r1, [r7, #0]
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004452:	683a      	ldr	r2, [r7, #0]
 8004454:	429a      	cmp	r2, r3
 8004456:	d012      	beq.n	800447e <ucg_SetFont+0x3a>
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	683a      	ldr	r2, [r7, #0]
 800445c:	679a      	str	r2, [r3, #120]	; 0x78
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	3390      	adds	r3, #144	; 0x90
 8004462:	6839      	ldr	r1, [r7, #0]
 8004464:	4618      	mov	r0, r3
 8004466:	f7ff fac9 	bl	80039fc <ucg_read_font_info>
 800446a:	6878      	ldr	r0, [r7, #4]
 800446c:	f7ff ff62 	bl	8004334 <ucg_UpdateRefHeight>
 8004470:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004474:	220c      	movs	r2, #12
 8004476:	4904      	ldr	r1, [pc, #16]	; (8004488 <ucg_SetFont+0x44>)
 8004478:	4804      	ldr	r0, [pc, #16]	; (800448c <ucg_SetFont+0x48>)
 800447a:	f000 f9d7 	bl	800482c <bufInit>
 800447e:	bf00      	nop
 8004480:	3708      	adds	r7, #8
 8004482:	46bd      	mov	sp, r7
 8004484:	bd80      	pop	{r7, pc}
 8004486:	bf00      	nop
 8004488:	20000378 	.word	0x20000378
 800448c:	20000388 	.word	0x20000388

08004490 <ucg_init_struct>:
 8004490:	b480      	push	{r7}
 8004492:	b083      	sub	sp, #12
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
 8004498:	687a      	ldr	r2, [r7, #4]
 800449a:	7813      	ldrb	r3, [r2, #0]
 800449c:	f36f 0300 	bfc	r3, #0, #1
 80044a0:	7013      	strb	r3, [r2, #0]
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2200      	movs	r2, #0
 80044a6:	611a      	str	r2, [r3, #16]
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2201      	movs	r2, #1
 80044ac:	865a      	strh	r2, [r3, #50]	; 0x32
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2200      	movs	r2, #0
 80044b2:	679a      	str	r2, [r3, #120]	; 0x78
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2201      	movs	r2, #1
 80044b8:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2200      	movs	r2, #0
 80044c0:	f883 20ae 	strb.w	r2, [r3, #174]	; 0xae
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2200      	movs	r2, #0
 80044c8:	f883 20af 	strb.w	r2, [r3, #175]	; 0xaf
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2200      	movs	r2, #0
 80044d0:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
 80044d4:	bf00      	nop
 80044d6:	370c      	adds	r7, #12
 80044d8:	46bd      	mov	sp, r7
 80044da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044de:	4770      	bx	lr

080044e0 <ucg_Init>:
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b086      	sub	sp, #24
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	60f8      	str	r0, [r7, #12]
 80044e8:	60b9      	str	r1, [r7, #8]
 80044ea:	607a      	str	r2, [r7, #4]
 80044ec:	603b      	str	r3, [r7, #0]
 80044ee:	68f8      	ldr	r0, [r7, #12]
 80044f0:	f7ff ffce 	bl	8004490 <ucg_init_struct>
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d103      	bne.n	8004502 <ucg_Init+0x22>
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	4a0e      	ldr	r2, [pc, #56]	; (8004538 <ucg_Init+0x58>)
 80044fe:	60da      	str	r2, [r3, #12]
 8004500:	e002      	b.n	8004508 <ucg_Init+0x28>
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	687a      	ldr	r2, [r7, #4]
 8004506:	60da      	str	r2, [r3, #12]
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	68ba      	ldr	r2, [r7, #8]
 800450c:	609a      	str	r2, [r3, #8]
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	683a      	ldr	r2, [r7, #0]
 8004512:	61da      	str	r2, [r3, #28]
 8004514:	68f8      	ldr	r0, [r7, #12]
 8004516:	f7ff ff85 	bl	8004424 <ucg_SetFontPosBaseline>
 800451a:	68f8      	ldr	r0, [r7, #12]
 800451c:	f7ff f996 	bl	800384c <ucg_PowerUp>
 8004520:	4603      	mov	r3, r0
 8004522:	82fb      	strh	r3, [r7, #22]
 8004524:	68f8      	ldr	r0, [r7, #12]
 8004526:	f7ff f9d6 	bl	80038d6 <ucg_GetDimension>
 800452a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800452e:	4618      	mov	r0, r3
 8004530:	3718      	adds	r7, #24
 8004532:	46bd      	mov	sp, r7
 8004534:	bd80      	pop	{r7, pc}
 8004536:	bf00      	nop
 8004538:	080034b1 	.word	0x080034b1

0800453c <ucg_Draw90Line>:
 800453c:	b580      	push	{r7, lr}
 800453e:	b084      	sub	sp, #16
 8004540:	af00      	add	r7, sp, #0
 8004542:	60f8      	str	r0, [r7, #12]
 8004544:	4608      	mov	r0, r1
 8004546:	4611      	mov	r1, r2
 8004548:	461a      	mov	r2, r3
 800454a:	4603      	mov	r3, r0
 800454c:	817b      	strh	r3, [r7, #10]
 800454e:	460b      	mov	r3, r1
 8004550:	813b      	strh	r3, [r7, #8]
 8004552:	4613      	mov	r3, r2
 8004554:	80fb      	strh	r3, [r7, #6]
 8004556:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 800455a:	68f9      	ldr	r1, [r7, #12]
 800455c:	4613      	mov	r3, r2
 800455e:	005b      	lsls	r3, r3, #1
 8004560:	4413      	add	r3, r2
 8004562:	440b      	add	r3, r1
 8004564:	333a      	adds	r3, #58	; 0x3a
 8004566:	781a      	ldrb	r2, [r3, #0]
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800456e:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8004572:	68f9      	ldr	r1, [r7, #12]
 8004574:	4613      	mov	r3, r2
 8004576:	005b      	lsls	r3, r3, #1
 8004578:	4413      	add	r3, r2
 800457a:	440b      	add	r3, r1
 800457c:	333b      	adds	r3, #59	; 0x3b
 800457e:	781a      	ldrb	r2, [r3, #0]
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 8004586:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 800458a:	68f9      	ldr	r1, [r7, #12]
 800458c:	4613      	mov	r3, r2
 800458e:	005b      	lsls	r3, r3, #1
 8004590:	4413      	add	r3, r2
 8004592:	440b      	add	r3, r1
 8004594:	333c      	adds	r3, #60	; 0x3c
 8004596:	781a      	ldrb	r2, [r3, #0]
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	897a      	ldrh	r2, [r7, #10]
 80045a2:	849a      	strh	r2, [r3, #36]	; 0x24
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	893a      	ldrh	r2, [r7, #8]
 80045a8:	84da      	strh	r2, [r3, #38]	; 0x26
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	88fa      	ldrh	r2, [r7, #6]
 80045ae:	859a      	strh	r2, [r3, #44]	; 0x2c
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	8b3a      	ldrh	r2, [r7, #24]
 80045b4:	85da      	strh	r2, [r3, #46]	; 0x2e
 80045b6:	68f8      	ldr	r0, [r7, #12]
 80045b8:	f7ff f99f 	bl	80038fa <ucg_DrawL90FXWithArg>
 80045bc:	bf00      	nop
 80045be:	3710      	adds	r7, #16
 80045c0:	46bd      	mov	sp, r7
 80045c2:	bd80      	pop	{r7, pc}

080045c4 <ucg_DrawHLine>:
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b086      	sub	sp, #24
 80045c8:	af02      	add	r7, sp, #8
 80045ca:	60f8      	str	r0, [r7, #12]
 80045cc:	4608      	mov	r0, r1
 80045ce:	4611      	mov	r1, r2
 80045d0:	461a      	mov	r2, r3
 80045d2:	4603      	mov	r3, r0
 80045d4:	817b      	strh	r3, [r7, #10]
 80045d6:	460b      	mov	r3, r1
 80045d8:	813b      	strh	r3, [r7, #8]
 80045da:	4613      	mov	r3, r2
 80045dc:	80fb      	strh	r3, [r7, #6]
 80045de:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80045e2:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80045e6:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 80045ea:	2300      	movs	r3, #0
 80045ec:	9301      	str	r3, [sp, #4]
 80045ee:	2300      	movs	r3, #0
 80045f0:	9300      	str	r3, [sp, #0]
 80045f2:	4603      	mov	r3, r0
 80045f4:	68f8      	ldr	r0, [r7, #12]
 80045f6:	f7ff ffa1 	bl	800453c <ucg_Draw90Line>
 80045fa:	bf00      	nop
 80045fc:	3710      	adds	r7, #16
 80045fe:	46bd      	mov	sp, r7
 8004600:	bd80      	pop	{r7, pc}

08004602 <ucg_SetColor>:
 8004602:	b480      	push	{r7}
 8004604:	b083      	sub	sp, #12
 8004606:	af00      	add	r7, sp, #0
 8004608:	6078      	str	r0, [r7, #4]
 800460a:	4608      	mov	r0, r1
 800460c:	4611      	mov	r1, r2
 800460e:	461a      	mov	r2, r3
 8004610:	4603      	mov	r3, r0
 8004612:	70fb      	strb	r3, [r7, #3]
 8004614:	460b      	mov	r3, r1
 8004616:	70bb      	strb	r3, [r7, #2]
 8004618:	4613      	mov	r3, r2
 800461a:	707b      	strb	r3, [r7, #1]
 800461c:	78fa      	ldrb	r2, [r7, #3]
 800461e:	6879      	ldr	r1, [r7, #4]
 8004620:	4613      	mov	r3, r2
 8004622:	005b      	lsls	r3, r3, #1
 8004624:	4413      	add	r3, r2
 8004626:	440b      	add	r3, r1
 8004628:	333a      	adds	r3, #58	; 0x3a
 800462a:	78ba      	ldrb	r2, [r7, #2]
 800462c:	701a      	strb	r2, [r3, #0]
 800462e:	78fa      	ldrb	r2, [r7, #3]
 8004630:	6879      	ldr	r1, [r7, #4]
 8004632:	4613      	mov	r3, r2
 8004634:	005b      	lsls	r3, r3, #1
 8004636:	4413      	add	r3, r2
 8004638:	440b      	add	r3, r1
 800463a:	333b      	adds	r3, #59	; 0x3b
 800463c:	787a      	ldrb	r2, [r7, #1]
 800463e:	701a      	strb	r2, [r3, #0]
 8004640:	78fa      	ldrb	r2, [r7, #3]
 8004642:	6879      	ldr	r1, [r7, #4]
 8004644:	4613      	mov	r3, r2
 8004646:	005b      	lsls	r3, r3, #1
 8004648:	4413      	add	r3, r2
 800464a:	440b      	add	r3, r1
 800464c:	333c      	adds	r3, #60	; 0x3c
 800464e:	7c3a      	ldrb	r2, [r7, #16]
 8004650:	701a      	strb	r2, [r3, #0]
 8004652:	bf00      	nop
 8004654:	370c      	adds	r7, #12
 8004656:	46bd      	mov	sp, r7
 8004658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465c:	4770      	bx	lr

0800465e <ucg_UndoRotate>:
 800465e:	b580      	push	{r7, lr}
 8004660:	b082      	sub	sp, #8
 8004662:	af00      	add	r7, sp, #0
 8004664:	6078      	str	r0, [r7, #4]
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	691b      	ldr	r3, [r3, #16]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d006      	beq.n	800467c <ucg_UndoRotate+0x1e>
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	691a      	ldr	r2, [r3, #16]
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	609a      	str	r2, [r3, #8]
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2200      	movs	r2, #0
 800467a:	611a      	str	r2, [r3, #16]
 800467c:	6878      	ldr	r0, [r7, #4]
 800467e:	f7ff f92a 	bl	80038d6 <ucg_GetDimension>
 8004682:	6878      	ldr	r0, [r7, #4]
 8004684:	f7ff f90f 	bl	80038a6 <ucg_SetMaxClipRange>
 8004688:	bf00      	nop
 800468a:	3708      	adds	r7, #8
 800468c:	46bd      	mov	sp, r7
 800468e:	bd80      	pop	{r7, pc}

08004690 <ucg_rotate_180_xy>:
 8004690:	b480      	push	{r7}
 8004692:	b085      	sub	sp, #20
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
 8004698:	6039      	str	r1, [r7, #0]
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	8adb      	ldrh	r3, [r3, #22]
 800469e:	81fb      	strh	r3, [r7, #14]
 80046a0:	89fa      	ldrh	r2, [r7, #14]
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80046a8:	b29b      	uxth	r3, r3
 80046aa:	1ad3      	subs	r3, r2, r3
 80046ac:	b29b      	uxth	r3, r3
 80046ae:	81fb      	strh	r3, [r7, #14]
 80046b0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80046b4:	b29b      	uxth	r3, r3
 80046b6:	3b01      	subs	r3, #1
 80046b8:	b29b      	uxth	r3, r3
 80046ba:	81fb      	strh	r3, [r7, #14]
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	89fa      	ldrh	r2, [r7, #14]
 80046c0:	805a      	strh	r2, [r3, #2]
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	8a9b      	ldrh	r3, [r3, #20]
 80046c6:	81bb      	strh	r3, [r7, #12]
 80046c8:	89ba      	ldrh	r2, [r7, #12]
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80046d0:	b29b      	uxth	r3, r3
 80046d2:	1ad3      	subs	r3, r2, r3
 80046d4:	b29b      	uxth	r3, r3
 80046d6:	81bb      	strh	r3, [r7, #12]
 80046d8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80046dc:	b29b      	uxth	r3, r3
 80046de:	3b01      	subs	r3, #1
 80046e0:	b29b      	uxth	r3, r3
 80046e2:	81bb      	strh	r3, [r7, #12]
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	89ba      	ldrh	r2, [r7, #12]
 80046e8:	801a      	strh	r2, [r3, #0]
 80046ea:	bf00      	nop
 80046ec:	3714      	adds	r7, #20
 80046ee:	46bd      	mov	sp, r7
 80046f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f4:	4770      	bx	lr
	...

080046f8 <ucg_dev_rotate180>:
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b084      	sub	sp, #16
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	60f8      	str	r0, [r7, #12]
 8004700:	460b      	mov	r3, r1
 8004702:	607a      	str	r2, [r7, #4]
 8004704:	817b      	strh	r3, [r7, #10]
 8004706:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800470a:	3b0c      	subs	r3, #12
 800470c:	2b0b      	cmp	r3, #11
 800470e:	d866      	bhi.n	80047de <ucg_dev_rotate180+0xe6>
 8004710:	a201      	add	r2, pc, #4	; (adr r2, 8004718 <ucg_dev_rotate180+0x20>)
 8004712:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004716:	bf00      	nop
 8004718:	08004767 	.word	0x08004767
 800471c:	080047df 	.word	0x080047df
 8004720:	080047df 	.word	0x080047df
 8004724:	08004749 	.word	0x08004749
 8004728:	080047df 	.word	0x080047df
 800472c:	080047df 	.word	0x080047df
 8004730:	080047df 	.word	0x080047df
 8004734:	080047df 	.word	0x080047df
 8004738:	080047af 	.word	0x080047af
 800473c:	080047af 	.word	0x080047af
 8004740:	080047df 	.word	0x080047df
 8004744:	080047af 	.word	0x080047af
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	691b      	ldr	r3, [r3, #16]
 800474c:	68fa      	ldr	r2, [r7, #12]
 800474e:	3214      	adds	r2, #20
 8004750:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8004754:	68f8      	ldr	r0, [r7, #12]
 8004756:	4798      	blx	r3
 8004758:	687a      	ldr	r2, [r7, #4]
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	3314      	adds	r3, #20
 800475e:	6818      	ldr	r0, [r3, #0]
 8004760:	6010      	str	r0, [r2, #0]
 8004762:	2301      	movs	r3, #1
 8004764:	e043      	b.n	80047ee <ucg_dev_rotate180+0xf6>
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800476c:	b29a      	uxth	r2, r3
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8004774:	b29b      	uxth	r3, r3
 8004776:	4413      	add	r3, r2
 8004778:	b29b      	uxth	r3, r3
 800477a:	3b01      	subs	r3, #1
 800477c:	b29b      	uxth	r3, r3
 800477e:	b21a      	sxth	r2, r3
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	805a      	strh	r2, [r3, #2]
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	f9b3 3000 	ldrsh.w	r3, [r3]
 800478a:	b29a      	uxth	r2, r3
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8004792:	b29b      	uxth	r3, r3
 8004794:	4413      	add	r3, r2
 8004796:	b29b      	uxth	r3, r3
 8004798:	3b01      	subs	r3, #1
 800479a:	b29b      	uxth	r3, r3
 800479c:	b21a      	sxth	r2, r3
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	801a      	strh	r2, [r3, #0]
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	4619      	mov	r1, r3
 80047a6:	68f8      	ldr	r0, [r7, #12]
 80047a8:	f7ff ff72 	bl	8004690 <ucg_rotate_180_xy>
 80047ac:	e017      	b.n	80047de <ucg_dev_rotate180+0xe6>
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 80047b4:	b29b      	uxth	r3, r3
 80047b6:	3302      	adds	r3, #2
 80047b8:	b29b      	uxth	r3, r3
 80047ba:	b21a      	sxth	r2, r3
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	85da      	strh	r2, [r3, #46]	; 0x2e
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 80047c6:	f003 0303 	and.w	r3, r3, #3
 80047ca:	b21a      	sxth	r2, r3
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	85da      	strh	r2, [r3, #46]	; 0x2e
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	3324      	adds	r3, #36	; 0x24
 80047d4:	4619      	mov	r1, r3
 80047d6:	68f8      	ldr	r0, [r7, #12]
 80047d8:	f7ff ff5a 	bl	8004690 <ucg_rotate_180_xy>
 80047dc:	bf00      	nop
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	691b      	ldr	r3, [r3, #16]
 80047e2:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 80047e6:	687a      	ldr	r2, [r7, #4]
 80047e8:	68f8      	ldr	r0, [r7, #12]
 80047ea:	4798      	blx	r3
 80047ec:	4603      	mov	r3, r0
 80047ee:	4618      	mov	r0, r3
 80047f0:	3710      	adds	r7, #16
 80047f2:	46bd      	mov	sp, r7
 80047f4:	bd80      	pop	{r7, pc}
 80047f6:	bf00      	nop

080047f8 <ucg_SetRotate180>:
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b082      	sub	sp, #8
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
 8004800:	6878      	ldr	r0, [r7, #4]
 8004802:	f7ff ff2c 	bl	800465e <ucg_UndoRotate>
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	689a      	ldr	r2, [r3, #8]
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	611a      	str	r2, [r3, #16]
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	4a05      	ldr	r2, [pc, #20]	; (8004828 <ucg_SetRotate180+0x30>)
 8004812:	609a      	str	r2, [r3, #8]
 8004814:	6878      	ldr	r0, [r7, #4]
 8004816:	f7ff f85e 	bl	80038d6 <ucg_GetDimension>
 800481a:	6878      	ldr	r0, [r7, #4]
 800481c:	f7ff f843 	bl	80038a6 <ucg_SetMaxClipRange>
 8004820:	bf00      	nop
 8004822:	3708      	adds	r7, #8
 8004824:	46bd      	mov	sp, r7
 8004826:	bd80      	pop	{r7, pc}
 8004828:	080046f9 	.word	0x080046f9

0800482c <bufInit>:
 800482c:	b580      	push	{r7, lr}
 800482e:	b084      	sub	sp, #16
 8004830:	af00      	add	r7, sp, #0
 8004832:	60f8      	str	r0, [r7, #12]
 8004834:	60b9      	str	r1, [r7, #8]
 8004836:	4611      	mov	r1, r2
 8004838:	461a      	mov	r2, r3
 800483a:	460b      	mov	r3, r1
 800483c:	71fb      	strb	r3, [r7, #7]
 800483e:	4613      	mov	r3, r2
 8004840:	80bb      	strh	r3, [r7, #4]
 8004842:	68bb      	ldr	r3, [r7, #8]
 8004844:	88ba      	ldrh	r2, [r7, #4]
 8004846:	801a      	strh	r2, [r3, #0]
 8004848:	68bb      	ldr	r3, [r7, #8]
 800484a:	79fa      	ldrb	r2, [r7, #7]
 800484c:	711a      	strb	r2, [r3, #4]
 800484e:	68bb      	ldr	r3, [r7, #8]
 8004850:	68fa      	ldr	r2, [r7, #12]
 8004852:	60da      	str	r2, [r3, #12]
 8004854:	68b8      	ldr	r0, [r7, #8]
 8004856:	f000 f836 	bl	80048c6 <bufFlush>
 800485a:	bf00      	nop
 800485c:	3710      	adds	r7, #16
 800485e:	46bd      	mov	sp, r7
 8004860:	bd80      	pop	{r7, pc}

08004862 <bufNumItems>:
 8004862:	b480      	push	{r7}
 8004864:	b083      	sub	sp, #12
 8004866:	af00      	add	r7, sp, #0
 8004868:	6078      	str	r0, [r7, #4]
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	885b      	ldrh	r3, [r3, #2]
 800486e:	4618      	mov	r0, r3
 8004870:	370c      	adds	r7, #12
 8004872:	46bd      	mov	sp, r7
 8004874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004878:	4770      	bx	lr

0800487a <bufIsFull>:
 800487a:	b480      	push	{r7}
 800487c:	b083      	sub	sp, #12
 800487e:	af00      	add	r7, sp, #0
 8004880:	6078      	str	r0, [r7, #4]
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	885a      	ldrh	r2, [r3, #2]
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	881b      	ldrh	r3, [r3, #0]
 800488a:	429a      	cmp	r2, r3
 800488c:	bf2c      	ite	cs
 800488e:	2301      	movcs	r3, #1
 8004890:	2300      	movcc	r3, #0
 8004892:	b2db      	uxtb	r3, r3
 8004894:	4618      	mov	r0, r3
 8004896:	370c      	adds	r7, #12
 8004898:	46bd      	mov	sp, r7
 800489a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489e:	4770      	bx	lr

080048a0 <bufIsEmpty>:
 80048a0:	b480      	push	{r7}
 80048a2:	b083      	sub	sp, #12
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	88da      	ldrh	r2, [r3, #6]
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	891b      	ldrh	r3, [r3, #8]
 80048b0:	429a      	cmp	r2, r3
 80048b2:	bf0c      	ite	eq
 80048b4:	2301      	moveq	r3, #1
 80048b6:	2300      	movne	r3, #0
 80048b8:	b2db      	uxtb	r3, r3
 80048ba:	4618      	mov	r0, r3
 80048bc:	370c      	adds	r7, #12
 80048be:	46bd      	mov	sp, r7
 80048c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c4:	4770      	bx	lr

080048c6 <bufFlush>:
 80048c6:	b580      	push	{r7, lr}
 80048c8:	b082      	sub	sp, #8
 80048ca:	af00      	add	r7, sp, #0
 80048cc:	6078      	str	r0, [r7, #4]
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	2200      	movs	r2, #0
 80048d2:	80da      	strh	r2, [r3, #6]
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2200      	movs	r2, #0
 80048d8:	811a      	strh	r2, [r3, #8]
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2200      	movs	r2, #0
 80048de:	805a      	strh	r2, [r3, #2]
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	68d8      	ldr	r0, [r3, #12]
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	881b      	ldrh	r3, [r3, #0]
 80048e8:	461a      	mov	r2, r3
 80048ea:	2100      	movs	r1, #0
 80048ec:	f000 f894 	bl	8004a18 <memsetl>
 80048f0:	bf00      	nop
 80048f2:	3708      	adds	r7, #8
 80048f4:	46bd      	mov	sp, r7
 80048f6:	bd80      	pop	{r7, pc}

080048f8 <bufEnDat>:
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b084      	sub	sp, #16
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
 8004900:	6039      	str	r1, [r7, #0]
 8004902:	b672      	cpsid	i
 8004904:	2300      	movs	r3, #0
 8004906:	73fb      	strb	r3, [r7, #15]
 8004908:	e021      	b.n	800494e <bufEnDat+0x56>
 800490a:	7bfb      	ldrb	r3, [r7, #15]
 800490c:	683a      	ldr	r2, [r7, #0]
 800490e:	441a      	add	r2, r3
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	68db      	ldr	r3, [r3, #12]
 8004914:	6879      	ldr	r1, [r7, #4]
 8004916:	88c9      	ldrh	r1, [r1, #6]
 8004918:	440b      	add	r3, r1
 800491a:	7812      	ldrb	r2, [r2, #0]
 800491c:	701a      	strb	r2, [r3, #0]
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	88db      	ldrh	r3, [r3, #6]
 8004922:	3301      	adds	r3, #1
 8004924:	b29b      	uxth	r3, r3
 8004926:	b21a      	sxth	r2, r3
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	881b      	ldrh	r3, [r3, #0]
 800492c:	3b01      	subs	r3, #1
 800492e:	b29b      	uxth	r3, r3
 8004930:	b21b      	sxth	r3, r3
 8004932:	4013      	ands	r3, r2
 8004934:	b21b      	sxth	r3, r3
 8004936:	b29a      	uxth	r2, r3
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	80da      	strh	r2, [r3, #6]
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	885b      	ldrh	r3, [r3, #2]
 8004940:	3301      	adds	r3, #1
 8004942:	b29a      	uxth	r2, r3
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	805a      	strh	r2, [r3, #2]
 8004948:	7bfb      	ldrb	r3, [r7, #15]
 800494a:	3301      	adds	r3, #1
 800494c:	73fb      	strb	r3, [r7, #15]
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	791b      	ldrb	r3, [r3, #4]
 8004952:	7bfa      	ldrb	r2, [r7, #15]
 8004954:	429a      	cmp	r2, r3
 8004956:	d3d8      	bcc.n	800490a <bufEnDat+0x12>
 8004958:	6878      	ldr	r0, [r7, #4]
 800495a:	f7ff ff8e 	bl	800487a <bufIsFull>
 800495e:	4603      	mov	r3, r0
 8004960:	2b00      	cmp	r3, #0
 8004962:	d011      	beq.n	8004988 <bufEnDat+0x90>
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	891a      	ldrh	r2, [r3, #8]
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	791b      	ldrb	r3, [r3, #4]
 800496c:	b29b      	uxth	r3, r3
 800496e:	4413      	add	r3, r2
 8004970:	b29b      	uxth	r3, r3
 8004972:	b21a      	sxth	r2, r3
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	881b      	ldrh	r3, [r3, #0]
 8004978:	3b01      	subs	r3, #1
 800497a:	b29b      	uxth	r3, r3
 800497c:	b21b      	sxth	r3, r3
 800497e:	4013      	ands	r3, r2
 8004980:	b21b      	sxth	r3, r3
 8004982:	b29a      	uxth	r2, r3
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	811a      	strh	r2, [r3, #8]
 8004988:	b662      	cpsie	i
 800498a:	2300      	movs	r3, #0
 800498c:	4618      	mov	r0, r3
 800498e:	3710      	adds	r7, #16
 8004990:	46bd      	mov	sp, r7
 8004992:	bd80      	pop	{r7, pc}

08004994 <bufDeDat>:
 8004994:	b580      	push	{r7, lr}
 8004996:	b084      	sub	sp, #16
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
 800499c:	6039      	str	r1, [r7, #0]
 800499e:	b672      	cpsid	i
 80049a0:	6878      	ldr	r0, [r7, #4]
 80049a2:	f7ff ff7d 	bl	80048a0 <bufIsEmpty>
 80049a6:	4603      	mov	r3, r0
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d005      	beq.n	80049b8 <bufDeDat+0x24>
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2200      	movs	r2, #0
 80049b0:	805a      	strh	r2, [r3, #2]
 80049b2:	b662      	cpsie	i
 80049b4:	2302      	movs	r3, #2
 80049b6:	e02b      	b.n	8004a10 <bufDeDat+0x7c>
 80049b8:	2300      	movs	r3, #0
 80049ba:	73fb      	strb	r3, [r7, #15]
 80049bc:	e021      	b.n	8004a02 <bufDeDat+0x6e>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	68db      	ldr	r3, [r3, #12]
 80049c2:	687a      	ldr	r2, [r7, #4]
 80049c4:	8912      	ldrh	r2, [r2, #8]
 80049c6:	441a      	add	r2, r3
 80049c8:	7bfb      	ldrb	r3, [r7, #15]
 80049ca:	6839      	ldr	r1, [r7, #0]
 80049cc:	440b      	add	r3, r1
 80049ce:	7812      	ldrb	r2, [r2, #0]
 80049d0:	701a      	strb	r2, [r3, #0]
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	891b      	ldrh	r3, [r3, #8]
 80049d6:	3301      	adds	r3, #1
 80049d8:	b29b      	uxth	r3, r3
 80049da:	b21a      	sxth	r2, r3
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	881b      	ldrh	r3, [r3, #0]
 80049e0:	3b01      	subs	r3, #1
 80049e2:	b29b      	uxth	r3, r3
 80049e4:	b21b      	sxth	r3, r3
 80049e6:	4013      	ands	r3, r2
 80049e8:	b21b      	sxth	r3, r3
 80049ea:	b29a      	uxth	r2, r3
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	811a      	strh	r2, [r3, #8]
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	885b      	ldrh	r3, [r3, #2]
 80049f4:	3b01      	subs	r3, #1
 80049f6:	b29a      	uxth	r2, r3
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	805a      	strh	r2, [r3, #2]
 80049fc:	7bfb      	ldrb	r3, [r7, #15]
 80049fe:	3301      	adds	r3, #1
 8004a00:	73fb      	strb	r3, [r7, #15]
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	791b      	ldrb	r3, [r3, #4]
 8004a06:	7bfa      	ldrb	r2, [r7, #15]
 8004a08:	429a      	cmp	r2, r3
 8004a0a:	d3d8      	bcc.n	80049be <bufDeDat+0x2a>
 8004a0c:	b662      	cpsie	i
 8004a0e:	2300      	movs	r3, #0
 8004a10:	4618      	mov	r0, r3
 8004a12:	3710      	adds	r7, #16
 8004a14:	46bd      	mov	sp, r7
 8004a16:	bd80      	pop	{r7, pc}

08004a18 <memsetl>:
 8004a18:	b480      	push	{r7}
 8004a1a:	b083      	sub	sp, #12
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
 8004a20:	460b      	mov	r3, r1
 8004a22:	70fb      	strb	r3, [r7, #3]
 8004a24:	4613      	mov	r3, r2
 8004a26:	803b      	strh	r3, [r7, #0]
 8004a28:	e004      	b.n	8004a34 <memsetl+0x1c>
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	1c5a      	adds	r2, r3, #1
 8004a2e:	607a      	str	r2, [r7, #4]
 8004a30:	78fa      	ldrb	r2, [r7, #3]
 8004a32:	701a      	strb	r2, [r3, #0]
 8004a34:	883b      	ldrh	r3, [r7, #0]
 8004a36:	1e5a      	subs	r2, r3, #1
 8004a38:	803a      	strh	r2, [r7, #0]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d1f5      	bne.n	8004a2a <memsetl+0x12>
 8004a3e:	bf00      	nop
 8004a40:	370c      	adds	r7, #12
 8004a42:	46bd      	mov	sp, r7
 8004a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a48:	4770      	bx	lr

08004a4a <USART_ReceiveData>:
 8004a4a:	b480      	push	{r7}
 8004a4c:	b083      	sub	sp, #12
 8004a4e:	af00      	add	r7, sp, #0
 8004a50:	6078      	str	r0, [r7, #4]
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	889b      	ldrh	r3, [r3, #4]
 8004a56:	b29b      	uxth	r3, r3
 8004a58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a5c:	b29b      	uxth	r3, r3
 8004a5e:	4618      	mov	r0, r3
 8004a60:	370c      	adds	r7, #12
 8004a62:	46bd      	mov	sp, r7
 8004a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a68:	4770      	bx	lr

08004a6a <USART_GetITStatus>:
 8004a6a:	b480      	push	{r7}
 8004a6c:	b087      	sub	sp, #28
 8004a6e:	af00      	add	r7, sp, #0
 8004a70:	6078      	str	r0, [r7, #4]
 8004a72:	460b      	mov	r3, r1
 8004a74:	807b      	strh	r3, [r7, #2]
 8004a76:	2300      	movs	r3, #0
 8004a78:	60fb      	str	r3, [r7, #12]
 8004a7a:	2300      	movs	r3, #0
 8004a7c:	617b      	str	r3, [r7, #20]
 8004a7e:	2300      	movs	r3, #0
 8004a80:	60bb      	str	r3, [r7, #8]
 8004a82:	2300      	movs	r3, #0
 8004a84:	74fb      	strb	r3, [r7, #19]
 8004a86:	887b      	ldrh	r3, [r7, #2]
 8004a88:	b2db      	uxtb	r3, r3
 8004a8a:	095b      	lsrs	r3, r3, #5
 8004a8c:	b2db      	uxtb	r3, r3
 8004a8e:	60bb      	str	r3, [r7, #8]
 8004a90:	887b      	ldrh	r3, [r7, #2]
 8004a92:	f003 031f 	and.w	r3, r3, #31
 8004a96:	617b      	str	r3, [r7, #20]
 8004a98:	2201      	movs	r2, #1
 8004a9a:	697b      	ldr	r3, [r7, #20]
 8004a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8004aa0:	617b      	str	r3, [r7, #20]
 8004aa2:	68bb      	ldr	r3, [r7, #8]
 8004aa4:	2b01      	cmp	r3, #1
 8004aa6:	d107      	bne.n	8004ab8 <USART_GetITStatus+0x4e>
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	899b      	ldrh	r3, [r3, #12]
 8004aac:	b29b      	uxth	r3, r3
 8004aae:	461a      	mov	r2, r3
 8004ab0:	697b      	ldr	r3, [r7, #20]
 8004ab2:	4013      	ands	r3, r2
 8004ab4:	617b      	str	r3, [r7, #20]
 8004ab6:	e011      	b.n	8004adc <USART_GetITStatus+0x72>
 8004ab8:	68bb      	ldr	r3, [r7, #8]
 8004aba:	2b02      	cmp	r3, #2
 8004abc:	d107      	bne.n	8004ace <USART_GetITStatus+0x64>
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	8a1b      	ldrh	r3, [r3, #16]
 8004ac2:	b29b      	uxth	r3, r3
 8004ac4:	461a      	mov	r2, r3
 8004ac6:	697b      	ldr	r3, [r7, #20]
 8004ac8:	4013      	ands	r3, r2
 8004aca:	617b      	str	r3, [r7, #20]
 8004acc:	e006      	b.n	8004adc <USART_GetITStatus+0x72>
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	8a9b      	ldrh	r3, [r3, #20]
 8004ad2:	b29b      	uxth	r3, r3
 8004ad4:	461a      	mov	r2, r3
 8004ad6:	697b      	ldr	r3, [r7, #20]
 8004ad8:	4013      	ands	r3, r2
 8004ada:	617b      	str	r3, [r7, #20]
 8004adc:	887b      	ldrh	r3, [r7, #2]
 8004ade:	0a1b      	lsrs	r3, r3, #8
 8004ae0:	b29b      	uxth	r3, r3
 8004ae2:	60fb      	str	r3, [r7, #12]
 8004ae4:	2201      	movs	r2, #1
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8004aec:	60fb      	str	r3, [r7, #12]
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	881b      	ldrh	r3, [r3, #0]
 8004af2:	b29b      	uxth	r3, r3
 8004af4:	461a      	mov	r2, r3
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	4013      	ands	r3, r2
 8004afa:	60fb      	str	r3, [r7, #12]
 8004afc:	697b      	ldr	r3, [r7, #20]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d005      	beq.n	8004b0e <USART_GetITStatus+0xa4>
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d002      	beq.n	8004b0e <USART_GetITStatus+0xa4>
 8004b08:	2301      	movs	r3, #1
 8004b0a:	74fb      	strb	r3, [r7, #19]
 8004b0c:	e001      	b.n	8004b12 <USART_GetITStatus+0xa8>
 8004b0e:	2300      	movs	r3, #0
 8004b10:	74fb      	strb	r3, [r7, #19]
 8004b12:	7cfb      	ldrb	r3, [r7, #19]
 8004b14:	4618      	mov	r0, r3
 8004b16:	371c      	adds	r7, #28
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1e:	4770      	bx	lr

08004b20 <USART_ClearITPendingBit>:
 8004b20:	b480      	push	{r7}
 8004b22:	b085      	sub	sp, #20
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
 8004b28:	460b      	mov	r3, r1
 8004b2a:	807b      	strh	r3, [r7, #2]
 8004b2c:	2300      	movs	r3, #0
 8004b2e:	81fb      	strh	r3, [r7, #14]
 8004b30:	2300      	movs	r3, #0
 8004b32:	81bb      	strh	r3, [r7, #12]
 8004b34:	887b      	ldrh	r3, [r7, #2]
 8004b36:	0a1b      	lsrs	r3, r3, #8
 8004b38:	81fb      	strh	r3, [r7, #14]
 8004b3a:	89fb      	ldrh	r3, [r7, #14]
 8004b3c:	2201      	movs	r2, #1
 8004b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8004b42:	81bb      	strh	r3, [r7, #12]
 8004b44:	89bb      	ldrh	r3, [r7, #12]
 8004b46:	43db      	mvns	r3, r3
 8004b48:	b29a      	uxth	r2, r3
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	801a      	strh	r2, [r3, #0]
 8004b4e:	bf00      	nop
 8004b50:	3714      	adds	r7, #20
 8004b52:	46bd      	mov	sp, r7
 8004b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b58:	4770      	bx	lr

08004b5a <ucg_clip_is_x_visible>:
 8004b5a:	b480      	push	{r7}
 8004b5c:	b085      	sub	sp, #20
 8004b5e:	af00      	add	r7, sp, #0
 8004b60:	6078      	str	r0, [r7, #4]
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004b66:	81fb      	strh	r3, [r7, #14]
 8004b68:	89fa      	ldrh	r2, [r7, #14]
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	f9b3 3070 	ldrsh.w	r3, [r3, #112]	; 0x70
 8004b70:	b29b      	uxth	r3, r3
 8004b72:	1ad3      	subs	r3, r2, r3
 8004b74:	b29b      	uxth	r3, r3
 8004b76:	81fb      	strh	r3, [r7, #14]
 8004b78:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	da01      	bge.n	8004b84 <ucg_clip_is_x_visible+0x2a>
 8004b80:	2300      	movs	r3, #0
 8004b82:	e009      	b.n	8004b98 <ucg_clip_is_x_visible+0x3e>
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	f9b3 3074 	ldrsh.w	r3, [r3, #116]	; 0x74
 8004b8a:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8004b8e:	429a      	cmp	r2, r3
 8004b90:	db01      	blt.n	8004b96 <ucg_clip_is_x_visible+0x3c>
 8004b92:	2300      	movs	r3, #0
 8004b94:	e000      	b.n	8004b98 <ucg_clip_is_x_visible+0x3e>
 8004b96:	2301      	movs	r3, #1
 8004b98:	4618      	mov	r0, r3
 8004b9a:	3714      	adds	r7, #20
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba2:	4770      	bx	lr

08004ba4 <ucg_clip_is_y_visible>:
 8004ba4:	b480      	push	{r7}
 8004ba6:	b085      	sub	sp, #20
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004bb0:	81fb      	strh	r3, [r7, #14]
 8004bb2:	89fa      	ldrh	r2, [r7, #14]
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	f9b3 3072 	ldrsh.w	r3, [r3, #114]	; 0x72
 8004bba:	b29b      	uxth	r3, r3
 8004bbc:	1ad3      	subs	r3, r2, r3
 8004bbe:	b29b      	uxth	r3, r3
 8004bc0:	81fb      	strh	r3, [r7, #14]
 8004bc2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	da01      	bge.n	8004bce <ucg_clip_is_y_visible+0x2a>
 8004bca:	2300      	movs	r3, #0
 8004bcc:	e009      	b.n	8004be2 <ucg_clip_is_y_visible+0x3e>
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	f9b3 3076 	ldrsh.w	r3, [r3, #118]	; 0x76
 8004bd4:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8004bd8:	429a      	cmp	r2, r3
 8004bda:	db01      	blt.n	8004be0 <ucg_clip_is_y_visible+0x3c>
 8004bdc:	2300      	movs	r3, #0
 8004bde:	e000      	b.n	8004be2 <ucg_clip_is_y_visible+0x3e>
 8004be0:	2301      	movs	r3, #1
 8004be2:	4618      	mov	r0, r3
 8004be4:	3714      	adds	r7, #20
 8004be6:	46bd      	mov	sp, r7
 8004be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bec:	4770      	bx	lr

08004bee <ucg_clip_intersection>:
 8004bee:	b480      	push	{r7}
 8004bf0:	b087      	sub	sp, #28
 8004bf2:	af00      	add	r7, sp, #0
 8004bf4:	60f8      	str	r0, [r7, #12]
 8004bf6:	60b9      	str	r1, [r7, #8]
 8004bf8:	4611      	mov	r1, r2
 8004bfa:	461a      	mov	r2, r3
 8004bfc:	460b      	mov	r3, r1
 8004bfe:	80fb      	strh	r3, [r7, #6]
 8004c00:	4613      	mov	r3, r2
 8004c02:	80bb      	strh	r3, [r7, #4]
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	881b      	ldrh	r3, [r3, #0]
 8004c08:	82fb      	strh	r3, [r7, #22]
 8004c0a:	68bb      	ldr	r3, [r7, #8]
 8004c0c:	881b      	ldrh	r3, [r3, #0]
 8004c0e:	82bb      	strh	r3, [r7, #20]
 8004c10:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8004c14:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004c18:	429a      	cmp	r2, r3
 8004c1a:	db01      	blt.n	8004c20 <ucg_clip_intersection+0x32>
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	e01a      	b.n	8004c56 <ucg_clip_intersection+0x68>
 8004c20:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8004c24:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004c28:	429a      	cmp	r2, r3
 8004c2a:	dc01      	bgt.n	8004c30 <ucg_clip_intersection+0x42>
 8004c2c:	2300      	movs	r3, #0
 8004c2e:	e012      	b.n	8004c56 <ucg_clip_intersection+0x68>
 8004c30:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8004c34:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004c38:	429a      	cmp	r2, r3
 8004c3a:	da02      	bge.n	8004c42 <ucg_clip_intersection+0x54>
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	88fa      	ldrh	r2, [r7, #6]
 8004c40:	801a      	strh	r2, [r3, #0]
 8004c42:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8004c46:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004c4a:	429a      	cmp	r2, r3
 8004c4c:	dd02      	ble.n	8004c54 <ucg_clip_intersection+0x66>
 8004c4e:	68bb      	ldr	r3, [r7, #8]
 8004c50:	88ba      	ldrh	r2, [r7, #4]
 8004c52:	801a      	strh	r2, [r3, #0]
 8004c54:	2301      	movs	r3, #1
 8004c56:	4618      	mov	r0, r3
 8004c58:	371c      	adds	r7, #28
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c60:	4770      	bx	lr

08004c62 <ucg_clip_is_pixel_visible>:
 8004c62:	b580      	push	{r7, lr}
 8004c64:	b082      	sub	sp, #8
 8004c66:	af00      	add	r7, sp, #0
 8004c68:	6078      	str	r0, [r7, #4]
 8004c6a:	6878      	ldr	r0, [r7, #4]
 8004c6c:	f7ff ff75 	bl	8004b5a <ucg_clip_is_x_visible>
 8004c70:	4603      	mov	r3, r0
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d101      	bne.n	8004c7a <ucg_clip_is_pixel_visible+0x18>
 8004c76:	2300      	movs	r3, #0
 8004c78:	e008      	b.n	8004c8c <ucg_clip_is_pixel_visible+0x2a>
 8004c7a:	6878      	ldr	r0, [r7, #4]
 8004c7c:	f7ff ff92 	bl	8004ba4 <ucg_clip_is_y_visible>
 8004c80:	4603      	mov	r3, r0
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d101      	bne.n	8004c8a <ucg_clip_is_pixel_visible+0x28>
 8004c86:	2300      	movs	r3, #0
 8004c88:	e000      	b.n	8004c8c <ucg_clip_is_pixel_visible+0x2a>
 8004c8a:	2301      	movs	r3, #1
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	3708      	adds	r7, #8
 8004c90:	46bd      	mov	sp, r7
 8004c92:	bd80      	pop	{r7, pc}

08004c94 <ucg_clip_l90fx>:
 8004c94:	b590      	push	{r4, r7, lr}
 8004c96:	b085      	sub	sp, #20
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	861a      	strh	r2, [r3, #48]	; 0x30
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 8004ca8:	2b03      	cmp	r3, #3
 8004caa:	f200 816d 	bhi.w	8004f88 <ucg_clip_l90fx+0x2f4>
 8004cae:	a201      	add	r2, pc, #4	; (adr r2, 8004cb4 <ucg_clip_l90fx+0x20>)
 8004cb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cb4:	08004cc5 	.word	0x08004cc5
 8004cb8:	08004d6b 	.word	0x08004d6b
 8004cbc:	08004e11 	.word	0x08004e11
 8004cc0:	08004ecd 	.word	0x08004ecd
 8004cc4:	6878      	ldr	r0, [r7, #4]
 8004cc6:	f7ff ff6d 	bl	8004ba4 <ucg_clip_is_y_visible>
 8004cca:	4603      	mov	r3, r0
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d101      	bne.n	8004cd4 <ucg_clip_l90fx+0x40>
 8004cd0:	2300      	movs	r3, #0
 8004cd2:	e15a      	b.n	8004f8a <ucg_clip_l90fx+0x2f6>
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8004cda:	81fb      	strh	r3, [r7, #14]
 8004cdc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004ce0:	81bb      	strh	r3, [r7, #12]
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 8004ce8:	b29a      	uxth	r2, r3
 8004cea:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8004cee:	b29b      	uxth	r3, r3
 8004cf0:	4413      	add	r3, r2
 8004cf2:	b29b      	uxth	r3, r3
 8004cf4:	b21b      	sxth	r3, r3
 8004cf6:	81bb      	strh	r3, [r7, #12]
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	f9b3 4070 	ldrsh.w	r4, [r3, #112]	; 0x70
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	f9b3 3070 	ldrsh.w	r3, [r3, #112]	; 0x70
 8004d04:	b29a      	uxth	r2, r3
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	f9b3 3074 	ldrsh.w	r3, [r3, #116]	; 0x74
 8004d0c:	b29b      	uxth	r3, r3
 8004d0e:	4413      	add	r3, r2
 8004d10:	b29b      	uxth	r3, r3
 8004d12:	b21b      	sxth	r3, r3
 8004d14:	f107 010c 	add.w	r1, r7, #12
 8004d18:	f107 000e 	add.w	r0, r7, #14
 8004d1c:	4622      	mov	r2, r4
 8004d1e:	f7ff ff66 	bl	8004bee <ucg_clip_intersection>
 8004d22:	4603      	mov	r3, r0
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d101      	bne.n	8004d2c <ucg_clip_l90fx+0x98>
 8004d28:	2300      	movs	r3, #0
 8004d2a:	e12e      	b.n	8004f8a <ucg_clip_l90fx+0x2f6>
 8004d2c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004d30:	b29a      	uxth	r2, r3
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8004d38:	b29b      	uxth	r3, r3
 8004d3a:	1ad3      	subs	r3, r2, r3
 8004d3c:	b29b      	uxth	r3, r3
 8004d3e:	b21a      	sxth	r2, r3
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	861a      	strh	r2, [r3, #48]	; 0x30
 8004d44:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	849a      	strh	r2, [r3, #36]	; 0x24
 8004d4c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8004d50:	b29a      	uxth	r2, r3
 8004d52:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004d56:	b29b      	uxth	r3, r3
 8004d58:	1ad3      	subs	r3, r2, r3
 8004d5a:	b29b      	uxth	r3, r3
 8004d5c:	b21b      	sxth	r3, r3
 8004d5e:	81bb      	strh	r3, [r7, #12]
 8004d60:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	859a      	strh	r2, [r3, #44]	; 0x2c
 8004d68:	e10e      	b.n	8004f88 <ucg_clip_l90fx+0x2f4>
 8004d6a:	6878      	ldr	r0, [r7, #4]
 8004d6c:	f7ff fef5 	bl	8004b5a <ucg_clip_is_x_visible>
 8004d70:	4603      	mov	r3, r0
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d101      	bne.n	8004d7a <ucg_clip_l90fx+0xe6>
 8004d76:	2300      	movs	r3, #0
 8004d78:	e107      	b.n	8004f8a <ucg_clip_l90fx+0x2f6>
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 8004d80:	81fb      	strh	r3, [r7, #14]
 8004d82:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004d86:	81bb      	strh	r3, [r7, #12]
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 8004d8e:	b29a      	uxth	r2, r3
 8004d90:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8004d94:	b29b      	uxth	r3, r3
 8004d96:	4413      	add	r3, r2
 8004d98:	b29b      	uxth	r3, r3
 8004d9a:	b21b      	sxth	r3, r3
 8004d9c:	81bb      	strh	r3, [r7, #12]
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	f9b3 4072 	ldrsh.w	r4, [r3, #114]	; 0x72
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	f9b3 3072 	ldrsh.w	r3, [r3, #114]	; 0x72
 8004daa:	b29a      	uxth	r2, r3
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	f9b3 3076 	ldrsh.w	r3, [r3, #118]	; 0x76
 8004db2:	b29b      	uxth	r3, r3
 8004db4:	4413      	add	r3, r2
 8004db6:	b29b      	uxth	r3, r3
 8004db8:	b21b      	sxth	r3, r3
 8004dba:	f107 010c 	add.w	r1, r7, #12
 8004dbe:	f107 000e 	add.w	r0, r7, #14
 8004dc2:	4622      	mov	r2, r4
 8004dc4:	f7ff ff13 	bl	8004bee <ucg_clip_intersection>
 8004dc8:	4603      	mov	r3, r0
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d101      	bne.n	8004dd2 <ucg_clip_l90fx+0x13e>
 8004dce:	2300      	movs	r3, #0
 8004dd0:	e0db      	b.n	8004f8a <ucg_clip_l90fx+0x2f6>
 8004dd2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004dd6:	b29a      	uxth	r2, r3
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 8004dde:	b29b      	uxth	r3, r3
 8004de0:	1ad3      	subs	r3, r2, r3
 8004de2:	b29b      	uxth	r3, r3
 8004de4:	b21a      	sxth	r2, r3
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	861a      	strh	r2, [r3, #48]	; 0x30
 8004dea:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	84da      	strh	r2, [r3, #38]	; 0x26
 8004df2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8004df6:	b29a      	uxth	r2, r3
 8004df8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004dfc:	b29b      	uxth	r3, r3
 8004dfe:	1ad3      	subs	r3, r2, r3
 8004e00:	b29b      	uxth	r3, r3
 8004e02:	b21b      	sxth	r3, r3
 8004e04:	81bb      	strh	r3, [r7, #12]
 8004e06:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	859a      	strh	r2, [r3, #44]	; 0x2c
 8004e0e:	e0bb      	b.n	8004f88 <ucg_clip_l90fx+0x2f4>
 8004e10:	6878      	ldr	r0, [r7, #4]
 8004e12:	f7ff fec7 	bl	8004ba4 <ucg_clip_is_y_visible>
 8004e16:	4603      	mov	r3, r0
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d101      	bne.n	8004e20 <ucg_clip_l90fx+0x18c>
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	e0b4      	b.n	8004f8a <ucg_clip_l90fx+0x2f6>
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8004e26:	81bb      	strh	r3, [r7, #12]
 8004e28:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8004e2c:	b29b      	uxth	r3, r3
 8004e2e:	3301      	adds	r3, #1
 8004e30:	b29b      	uxth	r3, r3
 8004e32:	b21b      	sxth	r3, r3
 8004e34:	81bb      	strh	r3, [r7, #12]
 8004e36:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8004e3a:	81fb      	strh	r3, [r7, #14]
 8004e3c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004e40:	b29a      	uxth	r2, r3
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 8004e48:	b29b      	uxth	r3, r3
 8004e4a:	1ad3      	subs	r3, r2, r3
 8004e4c:	b29b      	uxth	r3, r3
 8004e4e:	b21b      	sxth	r3, r3
 8004e50:	81fb      	strh	r3, [r7, #14]
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	f9b3 4070 	ldrsh.w	r4, [r3, #112]	; 0x70
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	f9b3 3070 	ldrsh.w	r3, [r3, #112]	; 0x70
 8004e5e:	b29a      	uxth	r2, r3
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	f9b3 3074 	ldrsh.w	r3, [r3, #116]	; 0x74
 8004e66:	b29b      	uxth	r3, r3
 8004e68:	4413      	add	r3, r2
 8004e6a:	b29b      	uxth	r3, r3
 8004e6c:	b21b      	sxth	r3, r3
 8004e6e:	f107 010c 	add.w	r1, r7, #12
 8004e72:	f107 000e 	add.w	r0, r7, #14
 8004e76:	4622      	mov	r2, r4
 8004e78:	f7ff feb9 	bl	8004bee <ucg_clip_intersection>
 8004e7c:	4603      	mov	r3, r0
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d101      	bne.n	8004e86 <ucg_clip_l90fx+0x1f2>
 8004e82:	2300      	movs	r3, #0
 8004e84:	e081      	b.n	8004f8a <ucg_clip_l90fx+0x2f6>
 8004e86:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8004e8a:	b29a      	uxth	r2, r3
 8004e8c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004e90:	b29b      	uxth	r3, r3
 8004e92:	1ad3      	subs	r3, r2, r3
 8004e94:	b29b      	uxth	r3, r3
 8004e96:	b21a      	sxth	r2, r3
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	859a      	strh	r2, [r3, #44]	; 0x2c
 8004e9c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8004ea0:	b29b      	uxth	r3, r3
 8004ea2:	3b01      	subs	r3, #1
 8004ea4:	b29b      	uxth	r3, r3
 8004ea6:	b21b      	sxth	r3, r3
 8004ea8:	81bb      	strh	r3, [r7, #12]
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8004eb0:	b29a      	uxth	r2, r3
 8004eb2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8004eb6:	b29b      	uxth	r3, r3
 8004eb8:	1ad3      	subs	r3, r2, r3
 8004eba:	b29b      	uxth	r3, r3
 8004ebc:	b21a      	sxth	r2, r3
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	861a      	strh	r2, [r3, #48]	; 0x30
 8004ec2:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	849a      	strh	r2, [r3, #36]	; 0x24
 8004eca:	e05d      	b.n	8004f88 <ucg_clip_l90fx+0x2f4>
 8004ecc:	6878      	ldr	r0, [r7, #4]
 8004ece:	f7ff fe44 	bl	8004b5a <ucg_clip_is_x_visible>
 8004ed2:	4603      	mov	r3, r0
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d101      	bne.n	8004edc <ucg_clip_l90fx+0x248>
 8004ed8:	2300      	movs	r3, #0
 8004eda:	e056      	b.n	8004f8a <ucg_clip_l90fx+0x2f6>
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 8004ee2:	81bb      	strh	r3, [r7, #12]
 8004ee4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8004ee8:	b29b      	uxth	r3, r3
 8004eea:	3301      	adds	r3, #1
 8004eec:	b29b      	uxth	r3, r3
 8004eee:	b21b      	sxth	r3, r3
 8004ef0:	81bb      	strh	r3, [r7, #12]
 8004ef2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8004ef6:	81fb      	strh	r3, [r7, #14]
 8004ef8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004efc:	b29a      	uxth	r2, r3
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 8004f04:	b29b      	uxth	r3, r3
 8004f06:	1ad3      	subs	r3, r2, r3
 8004f08:	b29b      	uxth	r3, r3
 8004f0a:	b21b      	sxth	r3, r3
 8004f0c:	81fb      	strh	r3, [r7, #14]
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	f9b3 4072 	ldrsh.w	r4, [r3, #114]	; 0x72
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	f9b3 3072 	ldrsh.w	r3, [r3, #114]	; 0x72
 8004f1a:	b29a      	uxth	r2, r3
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	f9b3 3076 	ldrsh.w	r3, [r3, #118]	; 0x76
 8004f22:	b29b      	uxth	r3, r3
 8004f24:	4413      	add	r3, r2
 8004f26:	b29b      	uxth	r3, r3
 8004f28:	b21b      	sxth	r3, r3
 8004f2a:	f107 010c 	add.w	r1, r7, #12
 8004f2e:	f107 000e 	add.w	r0, r7, #14
 8004f32:	4622      	mov	r2, r4
 8004f34:	f7ff fe5b 	bl	8004bee <ucg_clip_intersection>
 8004f38:	4603      	mov	r3, r0
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d101      	bne.n	8004f42 <ucg_clip_l90fx+0x2ae>
 8004f3e:	2300      	movs	r3, #0
 8004f40:	e023      	b.n	8004f8a <ucg_clip_l90fx+0x2f6>
 8004f42:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8004f46:	b29a      	uxth	r2, r3
 8004f48:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004f4c:	b29b      	uxth	r3, r3
 8004f4e:	1ad3      	subs	r3, r2, r3
 8004f50:	b29b      	uxth	r3, r3
 8004f52:	b21a      	sxth	r2, r3
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	859a      	strh	r2, [r3, #44]	; 0x2c
 8004f58:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8004f5c:	b29b      	uxth	r3, r3
 8004f5e:	3b01      	subs	r3, #1
 8004f60:	b29b      	uxth	r3, r3
 8004f62:	b21b      	sxth	r3, r3
 8004f64:	81bb      	strh	r3, [r7, #12]
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 8004f6c:	b29a      	uxth	r2, r3
 8004f6e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8004f72:	b29b      	uxth	r3, r3
 8004f74:	1ad3      	subs	r3, r2, r3
 8004f76:	b29b      	uxth	r3, r3
 8004f78:	b21a      	sxth	r2, r3
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	861a      	strh	r2, [r3, #48]	; 0x30
 8004f7e:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	84da      	strh	r2, [r3, #38]	; 0x26
 8004f86:	bf00      	nop
 8004f88:	2301      	movs	r3, #1
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	3714      	adds	r7, #20
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	bd90      	pop	{r4, r7, pc}
 8004f92:	bf00      	nop

08004f94 <ucg_clip_l90se>:
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b084      	sub	sp, #16
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
 8004f9c:	6878      	ldr	r0, [r7, #4]
 8004f9e:	f7ff fe79 	bl	8004c94 <ucg_clip_l90fx>
 8004fa2:	4603      	mov	r3, r0
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d101      	bne.n	8004fac <ucg_clip_l90se+0x18>
 8004fa8:	2300      	movs	r3, #0
 8004faa:	e019      	b.n	8004fe0 <ucg_clip_l90se+0x4c>
 8004fac:	2300      	movs	r3, #0
 8004fae:	73fb      	strb	r3, [r7, #15]
 8004fb0:	e012      	b.n	8004fd8 <ucg_clip_l90se+0x44>
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	f103 0146 	add.w	r1, r3, #70	; 0x46
 8004fb8:	7bfa      	ldrb	r2, [r7, #15]
 8004fba:	4613      	mov	r3, r2
 8004fbc:	00db      	lsls	r3, r3, #3
 8004fbe:	1a9b      	subs	r3, r3, r2
 8004fc0:	005b      	lsls	r3, r3, #1
 8004fc2:	18ca      	adds	r2, r1, r3
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8004fca:	4619      	mov	r1, r3
 8004fcc:	4610      	mov	r0, r2
 8004fce:	f7fe f9e8 	bl	80033a2 <ucg_ccs_seek>
 8004fd2:	7bfb      	ldrb	r3, [r7, #15]
 8004fd4:	3301      	adds	r3, #1
 8004fd6:	73fb      	strb	r3, [r7, #15]
 8004fd8:	7bfb      	ldrb	r3, [r7, #15]
 8004fda:	2b02      	cmp	r3, #2
 8004fdc:	d9e9      	bls.n	8004fb2 <ucg_clip_l90se+0x1e>
 8004fde:	2301      	movs	r3, #1
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	3710      	adds	r7, #16
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	bd80      	pop	{r7, pc}

08004fe8 <ucg_com_PowerDown>:
 8004fe8:	b590      	push	{r4, r7, lr}
 8004fea:	b083      	sub	sp, #12
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	f893 30af 	ldrb.w	r3, [r3, #175]	; 0xaf
 8004ff6:	f003 0308 	and.w	r3, r3, #8
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d006      	beq.n	800500c <ucg_com_PowerDown+0x24>
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	69dc      	ldr	r4, [r3, #28]
 8005002:	2300      	movs	r3, #0
 8005004:	2200      	movs	r2, #0
 8005006:	210b      	movs	r1, #11
 8005008:	6878      	ldr	r0, [r7, #4]
 800500a:	47a0      	blx	r4
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	f893 30af 	ldrb.w	r3, [r3, #175]	; 0xaf
 8005012:	f023 0308 	bic.w	r3, r3, #8
 8005016:	b2da      	uxtb	r2, r3
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	f883 20af 	strb.w	r2, [r3, #175]	; 0xaf
 800501e:	bf00      	nop
 8005020:	370c      	adds	r7, #12
 8005022:	46bd      	mov	sp, r7
 8005024:	bd90      	pop	{r4, r7, pc}

08005026 <ucg_com_PowerUp>:
 8005026:	b590      	push	{r4, r7, lr}
 8005028:	b085      	sub	sp, #20
 800502a:	af00      	add	r7, sp, #0
 800502c:	6078      	str	r0, [r7, #4]
 800502e:	460b      	mov	r3, r1
 8005030:	807b      	strh	r3, [r7, #2]
 8005032:	4613      	mov	r3, r2
 8005034:	803b      	strh	r3, [r7, #0]
 8005036:	887b      	ldrh	r3, [r7, #2]
 8005038:	813b      	strh	r3, [r7, #8]
 800503a:	883b      	ldrh	r3, [r7, #0]
 800503c:	817b      	strh	r3, [r7, #10]
 800503e:	6878      	ldr	r0, [r7, #4]
 8005040:	f7ff ffd2 	bl	8004fe8 <ucg_com_PowerDown>
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2200      	movs	r2, #0
 8005048:	f883 20ae 	strb.w	r2, [r3, #174]	; 0xae
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	69dc      	ldr	r4, [r3, #28]
 8005050:	f107 0308 	add.w	r3, r7, #8
 8005054:	2200      	movs	r2, #0
 8005056:	210a      	movs	r1, #10
 8005058:	6878      	ldr	r0, [r7, #4]
 800505a:	47a0      	blx	r4
 800505c:	4603      	mov	r3, r0
 800505e:	81fb      	strh	r3, [r7, #14]
 8005060:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005064:	2b00      	cmp	r3, #0
 8005066:	d008      	beq.n	800507a <ucg_com_PowerUp+0x54>
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	f893 30af 	ldrb.w	r3, [r3, #175]	; 0xaf
 800506e:	f043 0308 	orr.w	r3, r3, #8
 8005072:	b2da      	uxtb	r2, r3
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	f883 20af 	strb.w	r2, [r3, #175]	; 0xaf
 800507a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800507e:	4618      	mov	r0, r3
 8005080:	3714      	adds	r7, #20
 8005082:	46bd      	mov	sp, r7
 8005084:	bd90      	pop	{r4, r7, pc}

08005086 <ucg_com_SetLineStatus>:
 8005086:	b590      	push	{r4, r7, lr}
 8005088:	b083      	sub	sp, #12
 800508a:	af00      	add	r7, sp, #0
 800508c:	6078      	str	r0, [r7, #4]
 800508e:	4608      	mov	r0, r1
 8005090:	4611      	mov	r1, r2
 8005092:	461a      	mov	r2, r3
 8005094:	4603      	mov	r3, r0
 8005096:	70fb      	strb	r3, [r7, #3]
 8005098:	460b      	mov	r3, r1
 800509a:	70bb      	strb	r3, [r7, #2]
 800509c:	4613      	mov	r3, r2
 800509e:	707b      	strb	r3, [r7, #1]
 80050a0:	78fb      	ldrb	r3, [r7, #3]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d131      	bne.n	800510a <ucg_com_SetLineStatus+0x84>
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	f893 20ae 	ldrb.w	r2, [r3, #174]	; 0xae
 80050ac:	78bb      	ldrb	r3, [r7, #2]
 80050ae:	4013      	ands	r3, r2
 80050b0:	b2db      	uxtb	r3, r3
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d008      	beq.n	80050c8 <ucg_com_SetLineStatus+0x42>
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	f893 20af 	ldrb.w	r2, [r3, #175]	; 0xaf
 80050bc:	78bb      	ldrb	r3, [r7, #2]
 80050be:	4013      	ands	r3, r2
 80050c0:	b2db      	uxtb	r3, r3
 80050c2:	78ba      	ldrb	r2, [r7, #2]
 80050c4:	429a      	cmp	r2, r3
 80050c6:	d14b      	bne.n	8005160 <ucg_com_SetLineStatus+0xda>
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	69dc      	ldr	r4, [r3, #28]
 80050cc:	787b      	ldrb	r3, [r7, #1]
 80050ce:	b219      	sxth	r1, r3
 80050d0:	78fb      	ldrb	r3, [r7, #3]
 80050d2:	b29a      	uxth	r2, r3
 80050d4:	2300      	movs	r3, #0
 80050d6:	6878      	ldr	r0, [r7, #4]
 80050d8:	47a0      	blx	r4
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	f893 30af 	ldrb.w	r3, [r3, #175]	; 0xaf
 80050e0:	b25a      	sxtb	r2, r3
 80050e2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80050e6:	43db      	mvns	r3, r3
 80050e8:	b25b      	sxtb	r3, r3
 80050ea:	4013      	ands	r3, r2
 80050ec:	b25b      	sxtb	r3, r3
 80050ee:	b2da      	uxtb	r2, r3
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	f883 20af 	strb.w	r2, [r3, #175]	; 0xaf
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	f893 20ae 	ldrb.w	r2, [r3, #174]	; 0xae
 80050fc:	78bb      	ldrb	r3, [r7, #2]
 80050fe:	4313      	orrs	r3, r2
 8005100:	b2da      	uxtb	r2, r3
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	f883 20ae 	strb.w	r2, [r3, #174]	; 0xae
 8005108:	e02a      	b.n	8005160 <ucg_com_SetLineStatus+0xda>
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	f893 20ae 	ldrb.w	r2, [r3, #174]	; 0xae
 8005110:	78bb      	ldrb	r3, [r7, #2]
 8005112:	4013      	ands	r3, r2
 8005114:	b2db      	uxtb	r3, r3
 8005116:	2b00      	cmp	r3, #0
 8005118:	d007      	beq.n	800512a <ucg_com_SetLineStatus+0xa4>
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	f893 20af 	ldrb.w	r2, [r3, #175]	; 0xaf
 8005120:	78bb      	ldrb	r3, [r7, #2]
 8005122:	4013      	ands	r3, r2
 8005124:	b2db      	uxtb	r3, r3
 8005126:	2b00      	cmp	r3, #0
 8005128:	d11a      	bne.n	8005160 <ucg_com_SetLineStatus+0xda>
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	69dc      	ldr	r4, [r3, #28]
 800512e:	787b      	ldrb	r3, [r7, #1]
 8005130:	b219      	sxth	r1, r3
 8005132:	78fb      	ldrb	r3, [r7, #3]
 8005134:	b29a      	uxth	r2, r3
 8005136:	2300      	movs	r3, #0
 8005138:	6878      	ldr	r0, [r7, #4]
 800513a:	47a0      	blx	r4
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	f893 20af 	ldrb.w	r2, [r3, #175]	; 0xaf
 8005142:	78bb      	ldrb	r3, [r7, #2]
 8005144:	4313      	orrs	r3, r2
 8005146:	b2da      	uxtb	r2, r3
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	f883 20af 	strb.w	r2, [r3, #175]	; 0xaf
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	f893 20ae 	ldrb.w	r2, [r3, #174]	; 0xae
 8005154:	78bb      	ldrb	r3, [r7, #2]
 8005156:	4313      	orrs	r3, r2
 8005158:	b2da      	uxtb	r2, r3
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	f883 20ae 	strb.w	r2, [r3, #174]	; 0xae
 8005160:	bf00      	nop
 8005162:	370c      	adds	r7, #12
 8005164:	46bd      	mov	sp, r7
 8005166:	bd90      	pop	{r4, r7, pc}

08005168 <ucg_com_SetResetLineStatus>:
 8005168:	b580      	push	{r7, lr}
 800516a:	b082      	sub	sp, #8
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
 8005170:	460b      	mov	r3, r1
 8005172:	70fb      	strb	r3, [r7, #3]
 8005174:	78f9      	ldrb	r1, [r7, #3]
 8005176:	230d      	movs	r3, #13
 8005178:	2204      	movs	r2, #4
 800517a:	6878      	ldr	r0, [r7, #4]
 800517c:	f7ff ff83 	bl	8005086 <ucg_com_SetLineStatus>
 8005180:	bf00      	nop
 8005182:	3708      	adds	r7, #8
 8005184:	46bd      	mov	sp, r7
 8005186:	bd80      	pop	{r7, pc}

08005188 <ucg_com_SetCSLineStatus>:
 8005188:	b580      	push	{r7, lr}
 800518a:	b082      	sub	sp, #8
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
 8005190:	460b      	mov	r3, r1
 8005192:	70fb      	strb	r3, [r7, #3]
 8005194:	78f9      	ldrb	r1, [r7, #3]
 8005196:	230e      	movs	r3, #14
 8005198:	2202      	movs	r2, #2
 800519a:	6878      	ldr	r0, [r7, #4]
 800519c:	f7ff ff73 	bl	8005086 <ucg_com_SetLineStatus>
 80051a0:	bf00      	nop
 80051a2:	3708      	adds	r7, #8
 80051a4:	46bd      	mov	sp, r7
 80051a6:	bd80      	pop	{r7, pc}

080051a8 <ucg_com_SetCDLineStatus>:
 80051a8:	b580      	push	{r7, lr}
 80051aa:	b082      	sub	sp, #8
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
 80051b0:	460b      	mov	r3, r1
 80051b2:	70fb      	strb	r3, [r7, #3]
 80051b4:	78f9      	ldrb	r1, [r7, #3]
 80051b6:	230f      	movs	r3, #15
 80051b8:	2201      	movs	r2, #1
 80051ba:	6878      	ldr	r0, [r7, #4]
 80051bc:	f7ff ff63 	bl	8005086 <ucg_com_SetLineStatus>
 80051c0:	bf00      	nop
 80051c2:	3708      	adds	r7, #8
 80051c4:	46bd      	mov	sp, r7
 80051c6:	bd80      	pop	{r7, pc}

080051c8 <ucg_com_DelayMicroseconds>:
 80051c8:	b590      	push	{r4, r7, lr}
 80051ca:	b083      	sub	sp, #12
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
 80051d0:	460b      	mov	r3, r1
 80051d2:	807b      	strh	r3, [r7, #2]
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	69dc      	ldr	r4, [r3, #28]
 80051d8:	887a      	ldrh	r2, [r7, #2]
 80051da:	2300      	movs	r3, #0
 80051dc:	210c      	movs	r1, #12
 80051de:	6878      	ldr	r0, [r7, #4]
 80051e0:	47a0      	blx	r4
 80051e2:	bf00      	nop
 80051e4:	370c      	adds	r7, #12
 80051e6:	46bd      	mov	sp, r7
 80051e8:	bd90      	pop	{r4, r7, pc}

080051ea <ucg_com_DelayMilliseconds>:
 80051ea:	b580      	push	{r7, lr}
 80051ec:	b082      	sub	sp, #8
 80051ee:	af00      	add	r7, sp, #0
 80051f0:	6078      	str	r0, [r7, #4]
 80051f2:	460b      	mov	r3, r1
 80051f4:	807b      	strh	r3, [r7, #2]
 80051f6:	e007      	b.n	8005208 <ucg_com_DelayMilliseconds+0x1e>
 80051f8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80051fc:	6878      	ldr	r0, [r7, #4]
 80051fe:	f7ff ffe3 	bl	80051c8 <ucg_com_DelayMicroseconds>
 8005202:	887b      	ldrh	r3, [r7, #2]
 8005204:	3b01      	subs	r3, #1
 8005206:	807b      	strh	r3, [r7, #2]
 8005208:	887b      	ldrh	r3, [r7, #2]
 800520a:	2b00      	cmp	r3, #0
 800520c:	d1f4      	bne.n	80051f8 <ucg_com_DelayMilliseconds+0xe>
 800520e:	bf00      	nop
 8005210:	3708      	adds	r7, #8
 8005212:	46bd      	mov	sp, r7
 8005214:	bd80      	pop	{r7, pc}

08005216 <ucg_com_SendByte>:
 8005216:	b590      	push	{r4, r7, lr}
 8005218:	b083      	sub	sp, #12
 800521a:	af00      	add	r7, sp, #0
 800521c:	6078      	str	r0, [r7, #4]
 800521e:	460b      	mov	r3, r1
 8005220:	70fb      	strb	r3, [r7, #3]
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	69dc      	ldr	r4, [r3, #28]
 8005226:	78fb      	ldrb	r3, [r7, #3]
 8005228:	b29a      	uxth	r2, r3
 800522a:	2300      	movs	r3, #0
 800522c:	2110      	movs	r1, #16
 800522e:	6878      	ldr	r0, [r7, #4]
 8005230:	47a0      	blx	r4
 8005232:	bf00      	nop
 8005234:	370c      	adds	r7, #12
 8005236:	46bd      	mov	sp, r7
 8005238:	bd90      	pop	{r4, r7, pc}

0800523a <ucg_com_SendStringP>:
 800523a:	b590      	push	{r4, r7, lr}
 800523c:	b087      	sub	sp, #28
 800523e:	af00      	add	r7, sp, #0
 8005240:	60f8      	str	r0, [r7, #12]
 8005242:	460b      	mov	r3, r1
 8005244:	607a      	str	r2, [r7, #4]
 8005246:	817b      	strh	r3, [r7, #10]
 8005248:	e010      	b.n	800526c <ucg_com_SendStringP+0x32>
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	781b      	ldrb	r3, [r3, #0]
 800524e:	75fb      	strb	r3, [r7, #23]
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	69dc      	ldr	r4, [r3, #28]
 8005254:	7dfb      	ldrb	r3, [r7, #23]
 8005256:	b29a      	uxth	r2, r3
 8005258:	2300      	movs	r3, #0
 800525a:	2110      	movs	r1, #16
 800525c:	68f8      	ldr	r0, [r7, #12]
 800525e:	47a0      	blx	r4
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	3301      	adds	r3, #1
 8005264:	607b      	str	r3, [r7, #4]
 8005266:	897b      	ldrh	r3, [r7, #10]
 8005268:	3b01      	subs	r3, #1
 800526a:	817b      	strh	r3, [r7, #10]
 800526c:	897b      	ldrh	r3, [r7, #10]
 800526e:	2b00      	cmp	r3, #0
 8005270:	d1eb      	bne.n	800524a <ucg_com_SendStringP+0x10>
 8005272:	bf00      	nop
 8005274:	371c      	adds	r7, #28
 8005276:	46bd      	mov	sp, r7
 8005278:	bd90      	pop	{r4, r7, pc}

0800527a <ucg_com_SendCmdArg>:
 800527a:	b580      	push	{r7, lr}
 800527c:	b084      	sub	sp, #16
 800527e:	af00      	add	r7, sp, #0
 8005280:	60f8      	str	r0, [r7, #12]
 8005282:	60b9      	str	r1, [r7, #8]
 8005284:	4611      	mov	r1, r2
 8005286:	461a      	mov	r2, r3
 8005288:	460b      	mov	r3, r1
 800528a:	71fb      	strb	r3, [r7, #7]
 800528c:	4613      	mov	r3, r2
 800528e:	71bb      	strb	r3, [r7, #6]
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8005296:	085b      	lsrs	r3, r3, #1
 8005298:	b2db      	uxtb	r3, r3
 800529a:	f003 0301 	and.w	r3, r3, #1
 800529e:	b2db      	uxtb	r3, r3
 80052a0:	4619      	mov	r1, r3
 80052a2:	68f8      	ldr	r0, [r7, #12]
 80052a4:	f7ff ff80 	bl	80051a8 <ucg_com_SetCDLineStatus>
 80052a8:	79fb      	ldrb	r3, [r7, #7]
 80052aa:	b29b      	uxth	r3, r3
 80052ac:	68ba      	ldr	r2, [r7, #8]
 80052ae:	4619      	mov	r1, r3
 80052b0:	68f8      	ldr	r0, [r7, #12]
 80052b2:	f7ff ffc2 	bl	800523a <ucg_com_SendStringP>
 80052b6:	79bb      	ldrb	r3, [r7, #6]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d014      	beq.n	80052e6 <ucg_com_SendCmdArg+0x6c>
 80052bc:	79fb      	ldrb	r3, [r7, #7]
 80052be:	68ba      	ldr	r2, [r7, #8]
 80052c0:	4413      	add	r3, r2
 80052c2:	60bb      	str	r3, [r7, #8]
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 80052ca:	f003 0301 	and.w	r3, r3, #1
 80052ce:	b2db      	uxtb	r3, r3
 80052d0:	4619      	mov	r1, r3
 80052d2:	68f8      	ldr	r0, [r7, #12]
 80052d4:	f7ff ff68 	bl	80051a8 <ucg_com_SetCDLineStatus>
 80052d8:	79bb      	ldrb	r3, [r7, #6]
 80052da:	b29b      	uxth	r3, r3
 80052dc:	68ba      	ldr	r2, [r7, #8]
 80052de:	4619      	mov	r1, r3
 80052e0:	68f8      	ldr	r0, [r7, #12]
 80052e2:	f7ff ffaa 	bl	800523a <ucg_com_SendStringP>
 80052e6:	bf00      	nop
 80052e8:	3710      	adds	r7, #16
 80052ea:	46bd      	mov	sp, r7
 80052ec:	bd80      	pop	{r7, pc}
	...

080052f0 <ucg_com_SendCmdSeq>:
 80052f0:	b580      	push	{r7, lr}
 80052f2:	b084      	sub	sp, #16
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
 80052f8:	6039      	str	r1, [r7, #0]
 80052fa:	683b      	ldr	r3, [r7, #0]
 80052fc:	781b      	ldrb	r3, [r3, #0]
 80052fe:	73fb      	strb	r3, [r7, #15]
 8005300:	7bfb      	ldrb	r3, [r7, #15]
 8005302:	091b      	lsrs	r3, r3, #4
 8005304:	73bb      	strb	r3, [r7, #14]
 8005306:	7bfb      	ldrb	r3, [r7, #15]
 8005308:	f003 030f 	and.w	r3, r3, #15
 800530c:	737b      	strb	r3, [r7, #13]
 800530e:	7bbb      	ldrb	r3, [r7, #14]
 8005310:	2b0f      	cmp	r3, #15
 8005312:	f200 8124 	bhi.w	800555e <ucg_com_SendCmdSeq+0x26e>
 8005316:	a201      	add	r2, pc, #4	; (adr r2, 800531c <ucg_com_SendCmdSeq+0x2c>)
 8005318:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800531c:	0800555f 	.word	0x0800555f
 8005320:	0800535d 	.word	0x0800535d
 8005324:	0800535d 	.word	0x0800535d
 8005328:	0800535d 	.word	0x0800535d
 800532c:	0800555f 	.word	0x0800555f
 8005330:	0800555f 	.word	0x0800555f
 8005334:	0800537d 	.word	0x0800537d
 8005338:	080053af 	.word	0x080053af
 800533c:	080053f3 	.word	0x080053f3
 8005340:	0800541f 	.word	0x0800541f
 8005344:	0800544b 	.word	0x0800544b
 8005348:	080054ab 	.word	0x080054ab
 800534c:	0800555f 	.word	0x0800555f
 8005350:	0800555f 	.word	0x0800555f
 8005354:	0800555f 	.word	0x0800555f
 8005358:	0800550b 	.word	0x0800550b
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	1c59      	adds	r1, r3, #1
 8005360:	7b7b      	ldrb	r3, [r7, #13]
 8005362:	7bba      	ldrb	r2, [r7, #14]
 8005364:	6878      	ldr	r0, [r7, #4]
 8005366:	f7ff ff88 	bl	800527a <ucg_com_SendCmdArg>
 800536a:	7bbb      	ldrb	r3, [r7, #14]
 800536c:	1c5a      	adds	r2, r3, #1
 800536e:	7b7b      	ldrb	r3, [r7, #13]
 8005370:	4413      	add	r3, r2
 8005372:	461a      	mov	r2, r3
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	4413      	add	r3, r2
 8005378:	603b      	str	r3, [r7, #0]
 800537a:	e0ef      	b.n	800555c <ucg_com_SendCmdSeq+0x26c>
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8005382:	f003 0301 	and.w	r3, r3, #1
 8005386:	b2db      	uxtb	r3, r3
 8005388:	4619      	mov	r1, r3
 800538a:	6878      	ldr	r0, [r7, #4]
 800538c:	f7ff ff0c 	bl	80051a8 <ucg_com_SetCDLineStatus>
 8005390:	7b7b      	ldrb	r3, [r7, #13]
 8005392:	b299      	uxth	r1, r3
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	3301      	adds	r3, #1
 8005398:	461a      	mov	r2, r3
 800539a:	6878      	ldr	r0, [r7, #4]
 800539c:	f7ff ff4d 	bl	800523a <ucg_com_SendStringP>
 80053a0:	7b7b      	ldrb	r3, [r7, #13]
 80053a2:	3301      	adds	r3, #1
 80053a4:	461a      	mov	r2, r3
 80053a6:	683b      	ldr	r3, [r7, #0]
 80053a8:	4413      	add	r3, r2
 80053aa:	603b      	str	r3, [r7, #0]
 80053ac:	e0d6      	b.n	800555c <ucg_com_SendCmdSeq+0x26c>
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 80053b4:	085b      	lsrs	r3, r3, #1
 80053b6:	b2db      	uxtb	r3, r3
 80053b8:	f003 0301 	and.w	r3, r3, #1
 80053bc:	2b00      	cmp	r3, #0
 80053be:	bf0c      	ite	eq
 80053c0:	2301      	moveq	r3, #1
 80053c2:	2300      	movne	r3, #0
 80053c4:	b2db      	uxtb	r3, r3
 80053c6:	4619      	mov	r1, r3
 80053c8:	6878      	ldr	r0, [r7, #4]
 80053ca:	f7ff feed 	bl	80051a8 <ucg_com_SetCDLineStatus>
 80053ce:	7b7b      	ldrb	r3, [r7, #13]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d007      	beq.n	80053e4 <ucg_com_SendCmdSeq+0xf4>
 80053d4:	7b7b      	ldrb	r3, [r7, #13]
 80053d6:	b299      	uxth	r1, r3
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	3301      	adds	r3, #1
 80053dc:	461a      	mov	r2, r3
 80053de:	6878      	ldr	r0, [r7, #4]
 80053e0:	f7ff ff2b 	bl	800523a <ucg_com_SendStringP>
 80053e4:	7b7b      	ldrb	r3, [r7, #13]
 80053e6:	3301      	adds	r3, #1
 80053e8:	461a      	mov	r2, r3
 80053ea:	683b      	ldr	r3, [r7, #0]
 80053ec:	4413      	add	r3, r2
 80053ee:	603b      	str	r3, [r7, #0]
 80053f0:	e0b4      	b.n	800555c <ucg_com_SendCmdSeq+0x26c>
 80053f2:	683b      	ldr	r3, [r7, #0]
 80053f4:	3301      	adds	r3, #1
 80053f6:	603b      	str	r3, [r7, #0]
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	781b      	ldrb	r3, [r3, #0]
 80053fc:	73fb      	strb	r3, [r7, #15]
 80053fe:	7b7b      	ldrb	r3, [r7, #13]
 8005400:	b29b      	uxth	r3, r3
 8005402:	021b      	lsls	r3, r3, #8
 8005404:	b29a      	uxth	r2, r3
 8005406:	7bfb      	ldrb	r3, [r7, #15]
 8005408:	b29b      	uxth	r3, r3
 800540a:	4413      	add	r3, r2
 800540c:	b29b      	uxth	r3, r3
 800540e:	4619      	mov	r1, r3
 8005410:	6878      	ldr	r0, [r7, #4]
 8005412:	f7ff feea 	bl	80051ea <ucg_com_DelayMilliseconds>
 8005416:	683b      	ldr	r3, [r7, #0]
 8005418:	3301      	adds	r3, #1
 800541a:	603b      	str	r3, [r7, #0]
 800541c:	e09e      	b.n	800555c <ucg_com_SendCmdSeq+0x26c>
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	3301      	adds	r3, #1
 8005422:	603b      	str	r3, [r7, #0]
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	781b      	ldrb	r3, [r3, #0]
 8005428:	73fb      	strb	r3, [r7, #15]
 800542a:	7b7b      	ldrb	r3, [r7, #13]
 800542c:	b29b      	uxth	r3, r3
 800542e:	021b      	lsls	r3, r3, #8
 8005430:	b29a      	uxth	r2, r3
 8005432:	7bfb      	ldrb	r3, [r7, #15]
 8005434:	b29b      	uxth	r3, r3
 8005436:	4413      	add	r3, r2
 8005438:	b29b      	uxth	r3, r3
 800543a:	4619      	mov	r1, r3
 800543c:	6878      	ldr	r0, [r7, #4]
 800543e:	f7ff fec3 	bl	80051c8 <ucg_com_DelayMicroseconds>
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	3301      	adds	r3, #1
 8005446:	603b      	str	r3, [r7, #0]
 8005448:	e088      	b.n	800555c <ucg_com_SendCmdSeq+0x26c>
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	3301      	adds	r3, #1
 800544e:	603b      	str	r3, [r7, #0]
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	781b      	ldrb	r3, [r3, #0]
 8005454:	73fb      	strb	r3, [r7, #15]
 8005456:	683b      	ldr	r3, [r7, #0]
 8005458:	3301      	adds	r3, #1
 800545a:	603b      	str	r3, [r7, #0]
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	781b      	ldrb	r3, [r3, #0]
 8005460:	733b      	strb	r3, [r7, #12]
 8005462:	683b      	ldr	r3, [r7, #0]
 8005464:	3301      	adds	r3, #1
 8005466:	603b      	str	r3, [r7, #0]
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 800546e:	f003 0301 	and.w	r3, r3, #1
 8005472:	b2db      	uxtb	r3, r3
 8005474:	4619      	mov	r1, r3
 8005476:	6878      	ldr	r0, [r7, #4]
 8005478:	f7ff fe96 	bl	80051a8 <ucg_com_SetCDLineStatus>
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8005482:	461a      	mov	r2, r3
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 800548a:	441a      	add	r2, r3
 800548c:	7b7b      	ldrb	r3, [r7, #13]
 800548e:	fa42 f303 	asr.w	r3, r2, r3
 8005492:	b2da      	uxtb	r2, r3
 8005494:	7bfb      	ldrb	r3, [r7, #15]
 8005496:	4013      	ands	r3, r2
 8005498:	b2da      	uxtb	r2, r3
 800549a:	7b3b      	ldrb	r3, [r7, #12]
 800549c:	4313      	orrs	r3, r2
 800549e:	b2db      	uxtb	r3, r3
 80054a0:	4619      	mov	r1, r3
 80054a2:	6878      	ldr	r0, [r7, #4]
 80054a4:	f7ff feb7 	bl	8005216 <ucg_com_SendByte>
 80054a8:	e058      	b.n	800555c <ucg_com_SendCmdSeq+0x26c>
 80054aa:	683b      	ldr	r3, [r7, #0]
 80054ac:	3301      	adds	r3, #1
 80054ae:	603b      	str	r3, [r7, #0]
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	781b      	ldrb	r3, [r3, #0]
 80054b4:	73fb      	strb	r3, [r7, #15]
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	3301      	adds	r3, #1
 80054ba:	603b      	str	r3, [r7, #0]
 80054bc:	683b      	ldr	r3, [r7, #0]
 80054be:	781b      	ldrb	r3, [r3, #0]
 80054c0:	733b      	strb	r3, [r7, #12]
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	3301      	adds	r3, #1
 80054c6:	603b      	str	r3, [r7, #0]
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 80054ce:	f003 0301 	and.w	r3, r3, #1
 80054d2:	b2db      	uxtb	r3, r3
 80054d4:	4619      	mov	r1, r3
 80054d6:	6878      	ldr	r0, [r7, #4]
 80054d8:	f7ff fe66 	bl	80051a8 <ucg_com_SetCDLineStatus>
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 80054e2:	461a      	mov	r2, r3
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 80054ea:	441a      	add	r2, r3
 80054ec:	7b7b      	ldrb	r3, [r7, #13]
 80054ee:	fa42 f303 	asr.w	r3, r2, r3
 80054f2:	b2da      	uxtb	r2, r3
 80054f4:	7bfb      	ldrb	r3, [r7, #15]
 80054f6:	4013      	ands	r3, r2
 80054f8:	b2da      	uxtb	r2, r3
 80054fa:	7b3b      	ldrb	r3, [r7, #12]
 80054fc:	4313      	orrs	r3, r2
 80054fe:	b2db      	uxtb	r3, r3
 8005500:	4619      	mov	r1, r3
 8005502:	6878      	ldr	r0, [r7, #4]
 8005504:	f7ff fe87 	bl	8005216 <ucg_com_SendByte>
 8005508:	e028      	b.n	800555c <ucg_com_SendCmdSeq+0x26c>
 800550a:	7b7b      	ldrb	r3, [r7, #13]
 800550c:	089b      	lsrs	r3, r3, #2
 800550e:	73bb      	strb	r3, [r7, #14]
 8005510:	7b7b      	ldrb	r3, [r7, #13]
 8005512:	f003 0303 	and.w	r3, r3, #3
 8005516:	737b      	strb	r3, [r7, #13]
 8005518:	7bbb      	ldrb	r3, [r7, #14]
 800551a:	2b01      	cmp	r3, #1
 800551c:	d00c      	beq.n	8005538 <ucg_com_SendCmdSeq+0x248>
 800551e:	2b03      	cmp	r3, #3
 8005520:	d013      	beq.n	800554a <ucg_com_SendCmdSeq+0x25a>
 8005522:	2b00      	cmp	r3, #0
 8005524:	d116      	bne.n	8005554 <ucg_com_SendCmdSeq+0x264>
 8005526:	7b7b      	ldrb	r3, [r7, #13]
 8005528:	f003 0301 	and.w	r3, r3, #1
 800552c:	b2db      	uxtb	r3, r3
 800552e:	4619      	mov	r1, r3
 8005530:	6878      	ldr	r0, [r7, #4]
 8005532:	f7ff fe19 	bl	8005168 <ucg_com_SetResetLineStatus>
 8005536:	e00d      	b.n	8005554 <ucg_com_SendCmdSeq+0x264>
 8005538:	7b7b      	ldrb	r3, [r7, #13]
 800553a:	f003 0301 	and.w	r3, r3, #1
 800553e:	b2db      	uxtb	r3, r3
 8005540:	4619      	mov	r1, r3
 8005542:	6878      	ldr	r0, [r7, #4]
 8005544:	f7ff fe20 	bl	8005188 <ucg_com_SetCSLineStatus>
 8005548:	e004      	b.n	8005554 <ucg_com_SendCmdSeq+0x264>
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	7b7a      	ldrb	r2, [r7, #13]
 800554e:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
 8005552:	bf00      	nop
 8005554:	683b      	ldr	r3, [r7, #0]
 8005556:	3301      	adds	r3, #1
 8005558:	603b      	str	r3, [r7, #0]
 800555a:	bf00      	nop
 800555c:	e6cd      	b.n	80052fa <ucg_com_SendCmdSeq+0xa>
 800555e:	bf00      	nop
 8005560:	3710      	adds	r7, #16
 8005562:	46bd      	mov	sp, r7
 8005564:	bd80      	pop	{r7, pc}
 8005566:	bf00      	nop

08005568 <siprintf>:
 8005568:	b40e      	push	{r1, r2, r3}
 800556a:	b500      	push	{lr}
 800556c:	b09c      	sub	sp, #112	; 0x70
 800556e:	ab1d      	add	r3, sp, #116	; 0x74
 8005570:	9002      	str	r0, [sp, #8]
 8005572:	9006      	str	r0, [sp, #24]
 8005574:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005578:	4809      	ldr	r0, [pc, #36]	; (80055a0 <siprintf+0x38>)
 800557a:	9107      	str	r1, [sp, #28]
 800557c:	9104      	str	r1, [sp, #16]
 800557e:	4909      	ldr	r1, [pc, #36]	; (80055a4 <siprintf+0x3c>)
 8005580:	f853 2b04 	ldr.w	r2, [r3], #4
 8005584:	9105      	str	r1, [sp, #20]
 8005586:	6800      	ldr	r0, [r0, #0]
 8005588:	9301      	str	r3, [sp, #4]
 800558a:	a902      	add	r1, sp, #8
 800558c:	f000 f992 	bl	80058b4 <_svfiprintf_r>
 8005590:	9b02      	ldr	r3, [sp, #8]
 8005592:	2200      	movs	r2, #0
 8005594:	701a      	strb	r2, [r3, #0]
 8005596:	b01c      	add	sp, #112	; 0x70
 8005598:	f85d eb04 	ldr.w	lr, [sp], #4
 800559c:	b003      	add	sp, #12
 800559e:	4770      	bx	lr
 80055a0:	20000074 	.word	0x20000074
 80055a4:	ffff0208 	.word	0xffff0208

080055a8 <memset>:
 80055a8:	4402      	add	r2, r0
 80055aa:	4603      	mov	r3, r0
 80055ac:	4293      	cmp	r3, r2
 80055ae:	d100      	bne.n	80055b2 <memset+0xa>
 80055b0:	4770      	bx	lr
 80055b2:	f803 1b01 	strb.w	r1, [r3], #1
 80055b6:	e7f9      	b.n	80055ac <memset+0x4>

080055b8 <__errno>:
 80055b8:	4b01      	ldr	r3, [pc, #4]	; (80055c0 <__errno+0x8>)
 80055ba:	6818      	ldr	r0, [r3, #0]
 80055bc:	4770      	bx	lr
 80055be:	bf00      	nop
 80055c0:	20000074 	.word	0x20000074

080055c4 <__libc_init_array>:
 80055c4:	b570      	push	{r4, r5, r6, lr}
 80055c6:	4d0d      	ldr	r5, [pc, #52]	; (80055fc <__libc_init_array+0x38>)
 80055c8:	4c0d      	ldr	r4, [pc, #52]	; (8005600 <__libc_init_array+0x3c>)
 80055ca:	1b64      	subs	r4, r4, r5
 80055cc:	10a4      	asrs	r4, r4, #2
 80055ce:	2600      	movs	r6, #0
 80055d0:	42a6      	cmp	r6, r4
 80055d2:	d109      	bne.n	80055e8 <__libc_init_array+0x24>
 80055d4:	4d0b      	ldr	r5, [pc, #44]	; (8005604 <__libc_init_array+0x40>)
 80055d6:	4c0c      	ldr	r4, [pc, #48]	; (8005608 <__libc_init_array+0x44>)
 80055d8:	f000 fc6a 	bl	8005eb0 <_init>
 80055dc:	1b64      	subs	r4, r4, r5
 80055de:	10a4      	asrs	r4, r4, #2
 80055e0:	2600      	movs	r6, #0
 80055e2:	42a6      	cmp	r6, r4
 80055e4:	d105      	bne.n	80055f2 <__libc_init_array+0x2e>
 80055e6:	bd70      	pop	{r4, r5, r6, pc}
 80055e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80055ec:	4798      	blx	r3
 80055ee:	3601      	adds	r6, #1
 80055f0:	e7ee      	b.n	80055d0 <__libc_init_array+0xc>
 80055f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80055f6:	4798      	blx	r3
 80055f8:	3601      	adds	r6, #1
 80055fa:	e7f2      	b.n	80055e2 <__libc_init_array+0x1e>
 80055fc:	08006fd8 	.word	0x08006fd8
 8005600:	08006fd8 	.word	0x08006fd8
 8005604:	08006fd8 	.word	0x08006fd8
 8005608:	08006fdc 	.word	0x08006fdc

0800560c <__retarget_lock_acquire_recursive>:
 800560c:	4770      	bx	lr

0800560e <__retarget_lock_release_recursive>:
 800560e:	4770      	bx	lr

08005610 <_free_r>:
 8005610:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005612:	2900      	cmp	r1, #0
 8005614:	d044      	beq.n	80056a0 <_free_r+0x90>
 8005616:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800561a:	9001      	str	r0, [sp, #4]
 800561c:	2b00      	cmp	r3, #0
 800561e:	f1a1 0404 	sub.w	r4, r1, #4
 8005622:	bfb8      	it	lt
 8005624:	18e4      	addlt	r4, r4, r3
 8005626:	f000 f8df 	bl	80057e8 <__malloc_lock>
 800562a:	4a1e      	ldr	r2, [pc, #120]	; (80056a4 <_free_r+0x94>)
 800562c:	9801      	ldr	r0, [sp, #4]
 800562e:	6813      	ldr	r3, [r2, #0]
 8005630:	b933      	cbnz	r3, 8005640 <_free_r+0x30>
 8005632:	6063      	str	r3, [r4, #4]
 8005634:	6014      	str	r4, [r2, #0]
 8005636:	b003      	add	sp, #12
 8005638:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800563c:	f000 b8da 	b.w	80057f4 <__malloc_unlock>
 8005640:	42a3      	cmp	r3, r4
 8005642:	d908      	bls.n	8005656 <_free_r+0x46>
 8005644:	6825      	ldr	r5, [r4, #0]
 8005646:	1961      	adds	r1, r4, r5
 8005648:	428b      	cmp	r3, r1
 800564a:	bf01      	itttt	eq
 800564c:	6819      	ldreq	r1, [r3, #0]
 800564e:	685b      	ldreq	r3, [r3, #4]
 8005650:	1949      	addeq	r1, r1, r5
 8005652:	6021      	streq	r1, [r4, #0]
 8005654:	e7ed      	b.n	8005632 <_free_r+0x22>
 8005656:	461a      	mov	r2, r3
 8005658:	685b      	ldr	r3, [r3, #4]
 800565a:	b10b      	cbz	r3, 8005660 <_free_r+0x50>
 800565c:	42a3      	cmp	r3, r4
 800565e:	d9fa      	bls.n	8005656 <_free_r+0x46>
 8005660:	6811      	ldr	r1, [r2, #0]
 8005662:	1855      	adds	r5, r2, r1
 8005664:	42a5      	cmp	r5, r4
 8005666:	d10b      	bne.n	8005680 <_free_r+0x70>
 8005668:	6824      	ldr	r4, [r4, #0]
 800566a:	4421      	add	r1, r4
 800566c:	1854      	adds	r4, r2, r1
 800566e:	42a3      	cmp	r3, r4
 8005670:	6011      	str	r1, [r2, #0]
 8005672:	d1e0      	bne.n	8005636 <_free_r+0x26>
 8005674:	681c      	ldr	r4, [r3, #0]
 8005676:	685b      	ldr	r3, [r3, #4]
 8005678:	6053      	str	r3, [r2, #4]
 800567a:	440c      	add	r4, r1
 800567c:	6014      	str	r4, [r2, #0]
 800567e:	e7da      	b.n	8005636 <_free_r+0x26>
 8005680:	d902      	bls.n	8005688 <_free_r+0x78>
 8005682:	230c      	movs	r3, #12
 8005684:	6003      	str	r3, [r0, #0]
 8005686:	e7d6      	b.n	8005636 <_free_r+0x26>
 8005688:	6825      	ldr	r5, [r4, #0]
 800568a:	1961      	adds	r1, r4, r5
 800568c:	428b      	cmp	r3, r1
 800568e:	bf04      	itt	eq
 8005690:	6819      	ldreq	r1, [r3, #0]
 8005692:	685b      	ldreq	r3, [r3, #4]
 8005694:	6063      	str	r3, [r4, #4]
 8005696:	bf04      	itt	eq
 8005698:	1949      	addeq	r1, r1, r5
 800569a:	6021      	streq	r1, [r4, #0]
 800569c:	6054      	str	r4, [r2, #4]
 800569e:	e7ca      	b.n	8005636 <_free_r+0x26>
 80056a0:	b003      	add	sp, #12
 80056a2:	bd30      	pop	{r4, r5, pc}
 80056a4:	200014cc 	.word	0x200014cc

080056a8 <sbrk_aligned>:
 80056a8:	b570      	push	{r4, r5, r6, lr}
 80056aa:	4e0e      	ldr	r6, [pc, #56]	; (80056e4 <sbrk_aligned+0x3c>)
 80056ac:	460c      	mov	r4, r1
 80056ae:	6831      	ldr	r1, [r6, #0]
 80056b0:	4605      	mov	r5, r0
 80056b2:	b911      	cbnz	r1, 80056ba <sbrk_aligned+0x12>
 80056b4:	f000 fba6 	bl	8005e04 <_sbrk_r>
 80056b8:	6030      	str	r0, [r6, #0]
 80056ba:	4621      	mov	r1, r4
 80056bc:	4628      	mov	r0, r5
 80056be:	f000 fba1 	bl	8005e04 <_sbrk_r>
 80056c2:	1c43      	adds	r3, r0, #1
 80056c4:	d00a      	beq.n	80056dc <sbrk_aligned+0x34>
 80056c6:	1cc4      	adds	r4, r0, #3
 80056c8:	f024 0403 	bic.w	r4, r4, #3
 80056cc:	42a0      	cmp	r0, r4
 80056ce:	d007      	beq.n	80056e0 <sbrk_aligned+0x38>
 80056d0:	1a21      	subs	r1, r4, r0
 80056d2:	4628      	mov	r0, r5
 80056d4:	f000 fb96 	bl	8005e04 <_sbrk_r>
 80056d8:	3001      	adds	r0, #1
 80056da:	d101      	bne.n	80056e0 <sbrk_aligned+0x38>
 80056dc:	f04f 34ff 	mov.w	r4, #4294967295
 80056e0:	4620      	mov	r0, r4
 80056e2:	bd70      	pop	{r4, r5, r6, pc}
 80056e4:	200014d0 	.word	0x200014d0

080056e8 <_malloc_r>:
 80056e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80056ec:	1ccd      	adds	r5, r1, #3
 80056ee:	f025 0503 	bic.w	r5, r5, #3
 80056f2:	3508      	adds	r5, #8
 80056f4:	2d0c      	cmp	r5, #12
 80056f6:	bf38      	it	cc
 80056f8:	250c      	movcc	r5, #12
 80056fa:	2d00      	cmp	r5, #0
 80056fc:	4607      	mov	r7, r0
 80056fe:	db01      	blt.n	8005704 <_malloc_r+0x1c>
 8005700:	42a9      	cmp	r1, r5
 8005702:	d905      	bls.n	8005710 <_malloc_r+0x28>
 8005704:	230c      	movs	r3, #12
 8005706:	603b      	str	r3, [r7, #0]
 8005708:	2600      	movs	r6, #0
 800570a:	4630      	mov	r0, r6
 800570c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005710:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80057e4 <_malloc_r+0xfc>
 8005714:	f000 f868 	bl	80057e8 <__malloc_lock>
 8005718:	f8d8 3000 	ldr.w	r3, [r8]
 800571c:	461c      	mov	r4, r3
 800571e:	bb5c      	cbnz	r4, 8005778 <_malloc_r+0x90>
 8005720:	4629      	mov	r1, r5
 8005722:	4638      	mov	r0, r7
 8005724:	f7ff ffc0 	bl	80056a8 <sbrk_aligned>
 8005728:	1c43      	adds	r3, r0, #1
 800572a:	4604      	mov	r4, r0
 800572c:	d155      	bne.n	80057da <_malloc_r+0xf2>
 800572e:	f8d8 4000 	ldr.w	r4, [r8]
 8005732:	4626      	mov	r6, r4
 8005734:	2e00      	cmp	r6, #0
 8005736:	d145      	bne.n	80057c4 <_malloc_r+0xdc>
 8005738:	2c00      	cmp	r4, #0
 800573a:	d048      	beq.n	80057ce <_malloc_r+0xe6>
 800573c:	6823      	ldr	r3, [r4, #0]
 800573e:	4631      	mov	r1, r6
 8005740:	4638      	mov	r0, r7
 8005742:	eb04 0903 	add.w	r9, r4, r3
 8005746:	f000 fb5d 	bl	8005e04 <_sbrk_r>
 800574a:	4581      	cmp	r9, r0
 800574c:	d13f      	bne.n	80057ce <_malloc_r+0xe6>
 800574e:	6821      	ldr	r1, [r4, #0]
 8005750:	1a6d      	subs	r5, r5, r1
 8005752:	4629      	mov	r1, r5
 8005754:	4638      	mov	r0, r7
 8005756:	f7ff ffa7 	bl	80056a8 <sbrk_aligned>
 800575a:	3001      	adds	r0, #1
 800575c:	d037      	beq.n	80057ce <_malloc_r+0xe6>
 800575e:	6823      	ldr	r3, [r4, #0]
 8005760:	442b      	add	r3, r5
 8005762:	6023      	str	r3, [r4, #0]
 8005764:	f8d8 3000 	ldr.w	r3, [r8]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d038      	beq.n	80057de <_malloc_r+0xf6>
 800576c:	685a      	ldr	r2, [r3, #4]
 800576e:	42a2      	cmp	r2, r4
 8005770:	d12b      	bne.n	80057ca <_malloc_r+0xe2>
 8005772:	2200      	movs	r2, #0
 8005774:	605a      	str	r2, [r3, #4]
 8005776:	e00f      	b.n	8005798 <_malloc_r+0xb0>
 8005778:	6822      	ldr	r2, [r4, #0]
 800577a:	1b52      	subs	r2, r2, r5
 800577c:	d41f      	bmi.n	80057be <_malloc_r+0xd6>
 800577e:	2a0b      	cmp	r2, #11
 8005780:	d917      	bls.n	80057b2 <_malloc_r+0xca>
 8005782:	1961      	adds	r1, r4, r5
 8005784:	42a3      	cmp	r3, r4
 8005786:	6025      	str	r5, [r4, #0]
 8005788:	bf18      	it	ne
 800578a:	6059      	strne	r1, [r3, #4]
 800578c:	6863      	ldr	r3, [r4, #4]
 800578e:	bf08      	it	eq
 8005790:	f8c8 1000 	streq.w	r1, [r8]
 8005794:	5162      	str	r2, [r4, r5]
 8005796:	604b      	str	r3, [r1, #4]
 8005798:	4638      	mov	r0, r7
 800579a:	f104 060b 	add.w	r6, r4, #11
 800579e:	f000 f829 	bl	80057f4 <__malloc_unlock>
 80057a2:	f026 0607 	bic.w	r6, r6, #7
 80057a6:	1d23      	adds	r3, r4, #4
 80057a8:	1af2      	subs	r2, r6, r3
 80057aa:	d0ae      	beq.n	800570a <_malloc_r+0x22>
 80057ac:	1b9b      	subs	r3, r3, r6
 80057ae:	50a3      	str	r3, [r4, r2]
 80057b0:	e7ab      	b.n	800570a <_malloc_r+0x22>
 80057b2:	42a3      	cmp	r3, r4
 80057b4:	6862      	ldr	r2, [r4, #4]
 80057b6:	d1dd      	bne.n	8005774 <_malloc_r+0x8c>
 80057b8:	f8c8 2000 	str.w	r2, [r8]
 80057bc:	e7ec      	b.n	8005798 <_malloc_r+0xb0>
 80057be:	4623      	mov	r3, r4
 80057c0:	6864      	ldr	r4, [r4, #4]
 80057c2:	e7ac      	b.n	800571e <_malloc_r+0x36>
 80057c4:	4634      	mov	r4, r6
 80057c6:	6876      	ldr	r6, [r6, #4]
 80057c8:	e7b4      	b.n	8005734 <_malloc_r+0x4c>
 80057ca:	4613      	mov	r3, r2
 80057cc:	e7cc      	b.n	8005768 <_malloc_r+0x80>
 80057ce:	230c      	movs	r3, #12
 80057d0:	603b      	str	r3, [r7, #0]
 80057d2:	4638      	mov	r0, r7
 80057d4:	f000 f80e 	bl	80057f4 <__malloc_unlock>
 80057d8:	e797      	b.n	800570a <_malloc_r+0x22>
 80057da:	6025      	str	r5, [r4, #0]
 80057dc:	e7dc      	b.n	8005798 <_malloc_r+0xb0>
 80057de:	605b      	str	r3, [r3, #4]
 80057e0:	deff      	udf	#255	; 0xff
 80057e2:	bf00      	nop
 80057e4:	200014cc 	.word	0x200014cc

080057e8 <__malloc_lock>:
 80057e8:	4801      	ldr	r0, [pc, #4]	; (80057f0 <__malloc_lock+0x8>)
 80057ea:	f7ff bf0f 	b.w	800560c <__retarget_lock_acquire_recursive>
 80057ee:	bf00      	nop
 80057f0:	200014c8 	.word	0x200014c8

080057f4 <__malloc_unlock>:
 80057f4:	4801      	ldr	r0, [pc, #4]	; (80057fc <__malloc_unlock+0x8>)
 80057f6:	f7ff bf0a 	b.w	800560e <__retarget_lock_release_recursive>
 80057fa:	bf00      	nop
 80057fc:	200014c8 	.word	0x200014c8

08005800 <__ssputs_r>:
 8005800:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005804:	688e      	ldr	r6, [r1, #8]
 8005806:	461f      	mov	r7, r3
 8005808:	42be      	cmp	r6, r7
 800580a:	680b      	ldr	r3, [r1, #0]
 800580c:	4682      	mov	sl, r0
 800580e:	460c      	mov	r4, r1
 8005810:	4690      	mov	r8, r2
 8005812:	d82c      	bhi.n	800586e <__ssputs_r+0x6e>
 8005814:	898a      	ldrh	r2, [r1, #12]
 8005816:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800581a:	d026      	beq.n	800586a <__ssputs_r+0x6a>
 800581c:	6965      	ldr	r5, [r4, #20]
 800581e:	6909      	ldr	r1, [r1, #16]
 8005820:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005824:	eba3 0901 	sub.w	r9, r3, r1
 8005828:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800582c:	1c7b      	adds	r3, r7, #1
 800582e:	444b      	add	r3, r9
 8005830:	106d      	asrs	r5, r5, #1
 8005832:	429d      	cmp	r5, r3
 8005834:	bf38      	it	cc
 8005836:	461d      	movcc	r5, r3
 8005838:	0553      	lsls	r3, r2, #21
 800583a:	d527      	bpl.n	800588c <__ssputs_r+0x8c>
 800583c:	4629      	mov	r1, r5
 800583e:	f7ff ff53 	bl	80056e8 <_malloc_r>
 8005842:	4606      	mov	r6, r0
 8005844:	b360      	cbz	r0, 80058a0 <__ssputs_r+0xa0>
 8005846:	6921      	ldr	r1, [r4, #16]
 8005848:	464a      	mov	r2, r9
 800584a:	f000 faeb 	bl	8005e24 <memcpy>
 800584e:	89a3      	ldrh	r3, [r4, #12]
 8005850:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005854:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005858:	81a3      	strh	r3, [r4, #12]
 800585a:	6126      	str	r6, [r4, #16]
 800585c:	6165      	str	r5, [r4, #20]
 800585e:	444e      	add	r6, r9
 8005860:	eba5 0509 	sub.w	r5, r5, r9
 8005864:	6026      	str	r6, [r4, #0]
 8005866:	60a5      	str	r5, [r4, #8]
 8005868:	463e      	mov	r6, r7
 800586a:	42be      	cmp	r6, r7
 800586c:	d900      	bls.n	8005870 <__ssputs_r+0x70>
 800586e:	463e      	mov	r6, r7
 8005870:	6820      	ldr	r0, [r4, #0]
 8005872:	4632      	mov	r2, r6
 8005874:	4641      	mov	r1, r8
 8005876:	f000 faab 	bl	8005dd0 <memmove>
 800587a:	68a3      	ldr	r3, [r4, #8]
 800587c:	1b9b      	subs	r3, r3, r6
 800587e:	60a3      	str	r3, [r4, #8]
 8005880:	6823      	ldr	r3, [r4, #0]
 8005882:	4433      	add	r3, r6
 8005884:	6023      	str	r3, [r4, #0]
 8005886:	2000      	movs	r0, #0
 8005888:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800588c:	462a      	mov	r2, r5
 800588e:	f000 fad7 	bl	8005e40 <_realloc_r>
 8005892:	4606      	mov	r6, r0
 8005894:	2800      	cmp	r0, #0
 8005896:	d1e0      	bne.n	800585a <__ssputs_r+0x5a>
 8005898:	6921      	ldr	r1, [r4, #16]
 800589a:	4650      	mov	r0, sl
 800589c:	f7ff feb8 	bl	8005610 <_free_r>
 80058a0:	230c      	movs	r3, #12
 80058a2:	f8ca 3000 	str.w	r3, [sl]
 80058a6:	89a3      	ldrh	r3, [r4, #12]
 80058a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80058ac:	81a3      	strh	r3, [r4, #12]
 80058ae:	f04f 30ff 	mov.w	r0, #4294967295
 80058b2:	e7e9      	b.n	8005888 <__ssputs_r+0x88>

080058b4 <_svfiprintf_r>:
 80058b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058b8:	4698      	mov	r8, r3
 80058ba:	898b      	ldrh	r3, [r1, #12]
 80058bc:	061b      	lsls	r3, r3, #24
 80058be:	b09d      	sub	sp, #116	; 0x74
 80058c0:	4607      	mov	r7, r0
 80058c2:	460d      	mov	r5, r1
 80058c4:	4614      	mov	r4, r2
 80058c6:	d50e      	bpl.n	80058e6 <_svfiprintf_r+0x32>
 80058c8:	690b      	ldr	r3, [r1, #16]
 80058ca:	b963      	cbnz	r3, 80058e6 <_svfiprintf_r+0x32>
 80058cc:	2140      	movs	r1, #64	; 0x40
 80058ce:	f7ff ff0b 	bl	80056e8 <_malloc_r>
 80058d2:	6028      	str	r0, [r5, #0]
 80058d4:	6128      	str	r0, [r5, #16]
 80058d6:	b920      	cbnz	r0, 80058e2 <_svfiprintf_r+0x2e>
 80058d8:	230c      	movs	r3, #12
 80058da:	603b      	str	r3, [r7, #0]
 80058dc:	f04f 30ff 	mov.w	r0, #4294967295
 80058e0:	e0d0      	b.n	8005a84 <_svfiprintf_r+0x1d0>
 80058e2:	2340      	movs	r3, #64	; 0x40
 80058e4:	616b      	str	r3, [r5, #20]
 80058e6:	2300      	movs	r3, #0
 80058e8:	9309      	str	r3, [sp, #36]	; 0x24
 80058ea:	2320      	movs	r3, #32
 80058ec:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80058f0:	f8cd 800c 	str.w	r8, [sp, #12]
 80058f4:	2330      	movs	r3, #48	; 0x30
 80058f6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8005a9c <_svfiprintf_r+0x1e8>
 80058fa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80058fe:	f04f 0901 	mov.w	r9, #1
 8005902:	4623      	mov	r3, r4
 8005904:	469a      	mov	sl, r3
 8005906:	f813 2b01 	ldrb.w	r2, [r3], #1
 800590a:	b10a      	cbz	r2, 8005910 <_svfiprintf_r+0x5c>
 800590c:	2a25      	cmp	r2, #37	; 0x25
 800590e:	d1f9      	bne.n	8005904 <_svfiprintf_r+0x50>
 8005910:	ebba 0b04 	subs.w	fp, sl, r4
 8005914:	d00b      	beq.n	800592e <_svfiprintf_r+0x7a>
 8005916:	465b      	mov	r3, fp
 8005918:	4622      	mov	r2, r4
 800591a:	4629      	mov	r1, r5
 800591c:	4638      	mov	r0, r7
 800591e:	f7ff ff6f 	bl	8005800 <__ssputs_r>
 8005922:	3001      	adds	r0, #1
 8005924:	f000 80a9 	beq.w	8005a7a <_svfiprintf_r+0x1c6>
 8005928:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800592a:	445a      	add	r2, fp
 800592c:	9209      	str	r2, [sp, #36]	; 0x24
 800592e:	f89a 3000 	ldrb.w	r3, [sl]
 8005932:	2b00      	cmp	r3, #0
 8005934:	f000 80a1 	beq.w	8005a7a <_svfiprintf_r+0x1c6>
 8005938:	2300      	movs	r3, #0
 800593a:	f04f 32ff 	mov.w	r2, #4294967295
 800593e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005942:	f10a 0a01 	add.w	sl, sl, #1
 8005946:	9304      	str	r3, [sp, #16]
 8005948:	9307      	str	r3, [sp, #28]
 800594a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800594e:	931a      	str	r3, [sp, #104]	; 0x68
 8005950:	4654      	mov	r4, sl
 8005952:	2205      	movs	r2, #5
 8005954:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005958:	4850      	ldr	r0, [pc, #320]	; (8005a9c <_svfiprintf_r+0x1e8>)
 800595a:	f7fa fc41 	bl	80001e0 <memchr>
 800595e:	9a04      	ldr	r2, [sp, #16]
 8005960:	b9d8      	cbnz	r0, 800599a <_svfiprintf_r+0xe6>
 8005962:	06d0      	lsls	r0, r2, #27
 8005964:	bf44      	itt	mi
 8005966:	2320      	movmi	r3, #32
 8005968:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800596c:	0711      	lsls	r1, r2, #28
 800596e:	bf44      	itt	mi
 8005970:	232b      	movmi	r3, #43	; 0x2b
 8005972:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005976:	f89a 3000 	ldrb.w	r3, [sl]
 800597a:	2b2a      	cmp	r3, #42	; 0x2a
 800597c:	d015      	beq.n	80059aa <_svfiprintf_r+0xf6>
 800597e:	9a07      	ldr	r2, [sp, #28]
 8005980:	4654      	mov	r4, sl
 8005982:	2000      	movs	r0, #0
 8005984:	f04f 0c0a 	mov.w	ip, #10
 8005988:	4621      	mov	r1, r4
 800598a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800598e:	3b30      	subs	r3, #48	; 0x30
 8005990:	2b09      	cmp	r3, #9
 8005992:	d94d      	bls.n	8005a30 <_svfiprintf_r+0x17c>
 8005994:	b1b0      	cbz	r0, 80059c4 <_svfiprintf_r+0x110>
 8005996:	9207      	str	r2, [sp, #28]
 8005998:	e014      	b.n	80059c4 <_svfiprintf_r+0x110>
 800599a:	eba0 0308 	sub.w	r3, r0, r8
 800599e:	fa09 f303 	lsl.w	r3, r9, r3
 80059a2:	4313      	orrs	r3, r2
 80059a4:	9304      	str	r3, [sp, #16]
 80059a6:	46a2      	mov	sl, r4
 80059a8:	e7d2      	b.n	8005950 <_svfiprintf_r+0x9c>
 80059aa:	9b03      	ldr	r3, [sp, #12]
 80059ac:	1d19      	adds	r1, r3, #4
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	9103      	str	r1, [sp, #12]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	bfbb      	ittet	lt
 80059b6:	425b      	neglt	r3, r3
 80059b8:	f042 0202 	orrlt.w	r2, r2, #2
 80059bc:	9307      	strge	r3, [sp, #28]
 80059be:	9307      	strlt	r3, [sp, #28]
 80059c0:	bfb8      	it	lt
 80059c2:	9204      	strlt	r2, [sp, #16]
 80059c4:	7823      	ldrb	r3, [r4, #0]
 80059c6:	2b2e      	cmp	r3, #46	; 0x2e
 80059c8:	d10c      	bne.n	80059e4 <_svfiprintf_r+0x130>
 80059ca:	7863      	ldrb	r3, [r4, #1]
 80059cc:	2b2a      	cmp	r3, #42	; 0x2a
 80059ce:	d134      	bne.n	8005a3a <_svfiprintf_r+0x186>
 80059d0:	9b03      	ldr	r3, [sp, #12]
 80059d2:	1d1a      	adds	r2, r3, #4
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	9203      	str	r2, [sp, #12]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	bfb8      	it	lt
 80059dc:	f04f 33ff 	movlt.w	r3, #4294967295
 80059e0:	3402      	adds	r4, #2
 80059e2:	9305      	str	r3, [sp, #20]
 80059e4:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8005aac <_svfiprintf_r+0x1f8>
 80059e8:	7821      	ldrb	r1, [r4, #0]
 80059ea:	2203      	movs	r2, #3
 80059ec:	4650      	mov	r0, sl
 80059ee:	f7fa fbf7 	bl	80001e0 <memchr>
 80059f2:	b138      	cbz	r0, 8005a04 <_svfiprintf_r+0x150>
 80059f4:	9b04      	ldr	r3, [sp, #16]
 80059f6:	eba0 000a 	sub.w	r0, r0, sl
 80059fa:	2240      	movs	r2, #64	; 0x40
 80059fc:	4082      	lsls	r2, r0
 80059fe:	4313      	orrs	r3, r2
 8005a00:	3401      	adds	r4, #1
 8005a02:	9304      	str	r3, [sp, #16]
 8005a04:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a08:	4825      	ldr	r0, [pc, #148]	; (8005aa0 <_svfiprintf_r+0x1ec>)
 8005a0a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005a0e:	2206      	movs	r2, #6
 8005a10:	f7fa fbe6 	bl	80001e0 <memchr>
 8005a14:	2800      	cmp	r0, #0
 8005a16:	d038      	beq.n	8005a8a <_svfiprintf_r+0x1d6>
 8005a18:	4b22      	ldr	r3, [pc, #136]	; (8005aa4 <_svfiprintf_r+0x1f0>)
 8005a1a:	bb1b      	cbnz	r3, 8005a64 <_svfiprintf_r+0x1b0>
 8005a1c:	9b03      	ldr	r3, [sp, #12]
 8005a1e:	3307      	adds	r3, #7
 8005a20:	f023 0307 	bic.w	r3, r3, #7
 8005a24:	3308      	adds	r3, #8
 8005a26:	9303      	str	r3, [sp, #12]
 8005a28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a2a:	4433      	add	r3, r6
 8005a2c:	9309      	str	r3, [sp, #36]	; 0x24
 8005a2e:	e768      	b.n	8005902 <_svfiprintf_r+0x4e>
 8005a30:	fb0c 3202 	mla	r2, ip, r2, r3
 8005a34:	460c      	mov	r4, r1
 8005a36:	2001      	movs	r0, #1
 8005a38:	e7a6      	b.n	8005988 <_svfiprintf_r+0xd4>
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	3401      	adds	r4, #1
 8005a3e:	9305      	str	r3, [sp, #20]
 8005a40:	4619      	mov	r1, r3
 8005a42:	f04f 0c0a 	mov.w	ip, #10
 8005a46:	4620      	mov	r0, r4
 8005a48:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005a4c:	3a30      	subs	r2, #48	; 0x30
 8005a4e:	2a09      	cmp	r2, #9
 8005a50:	d903      	bls.n	8005a5a <_svfiprintf_r+0x1a6>
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d0c6      	beq.n	80059e4 <_svfiprintf_r+0x130>
 8005a56:	9105      	str	r1, [sp, #20]
 8005a58:	e7c4      	b.n	80059e4 <_svfiprintf_r+0x130>
 8005a5a:	fb0c 2101 	mla	r1, ip, r1, r2
 8005a5e:	4604      	mov	r4, r0
 8005a60:	2301      	movs	r3, #1
 8005a62:	e7f0      	b.n	8005a46 <_svfiprintf_r+0x192>
 8005a64:	ab03      	add	r3, sp, #12
 8005a66:	9300      	str	r3, [sp, #0]
 8005a68:	462a      	mov	r2, r5
 8005a6a:	4b0f      	ldr	r3, [pc, #60]	; (8005aa8 <_svfiprintf_r+0x1f4>)
 8005a6c:	a904      	add	r1, sp, #16
 8005a6e:	4638      	mov	r0, r7
 8005a70:	f3af 8000 	nop.w
 8005a74:	1c42      	adds	r2, r0, #1
 8005a76:	4606      	mov	r6, r0
 8005a78:	d1d6      	bne.n	8005a28 <_svfiprintf_r+0x174>
 8005a7a:	89ab      	ldrh	r3, [r5, #12]
 8005a7c:	065b      	lsls	r3, r3, #25
 8005a7e:	f53f af2d 	bmi.w	80058dc <_svfiprintf_r+0x28>
 8005a82:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005a84:	b01d      	add	sp, #116	; 0x74
 8005a86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a8a:	ab03      	add	r3, sp, #12
 8005a8c:	9300      	str	r3, [sp, #0]
 8005a8e:	462a      	mov	r2, r5
 8005a90:	4b05      	ldr	r3, [pc, #20]	; (8005aa8 <_svfiprintf_r+0x1f4>)
 8005a92:	a904      	add	r1, sp, #16
 8005a94:	4638      	mov	r0, r7
 8005a96:	f000 f879 	bl	8005b8c <_printf_i>
 8005a9a:	e7eb      	b.n	8005a74 <_svfiprintf_r+0x1c0>
 8005a9c:	08006fa5 	.word	0x08006fa5
 8005aa0:	08006faf 	.word	0x08006faf
 8005aa4:	00000000 	.word	0x00000000
 8005aa8:	08005801 	.word	0x08005801
 8005aac:	08006fab 	.word	0x08006fab

08005ab0 <_printf_common>:
 8005ab0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ab4:	4616      	mov	r6, r2
 8005ab6:	4699      	mov	r9, r3
 8005ab8:	688a      	ldr	r2, [r1, #8]
 8005aba:	690b      	ldr	r3, [r1, #16]
 8005abc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005ac0:	4293      	cmp	r3, r2
 8005ac2:	bfb8      	it	lt
 8005ac4:	4613      	movlt	r3, r2
 8005ac6:	6033      	str	r3, [r6, #0]
 8005ac8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005acc:	4607      	mov	r7, r0
 8005ace:	460c      	mov	r4, r1
 8005ad0:	b10a      	cbz	r2, 8005ad6 <_printf_common+0x26>
 8005ad2:	3301      	adds	r3, #1
 8005ad4:	6033      	str	r3, [r6, #0]
 8005ad6:	6823      	ldr	r3, [r4, #0]
 8005ad8:	0699      	lsls	r1, r3, #26
 8005ada:	bf42      	ittt	mi
 8005adc:	6833      	ldrmi	r3, [r6, #0]
 8005ade:	3302      	addmi	r3, #2
 8005ae0:	6033      	strmi	r3, [r6, #0]
 8005ae2:	6825      	ldr	r5, [r4, #0]
 8005ae4:	f015 0506 	ands.w	r5, r5, #6
 8005ae8:	d106      	bne.n	8005af8 <_printf_common+0x48>
 8005aea:	f104 0a19 	add.w	sl, r4, #25
 8005aee:	68e3      	ldr	r3, [r4, #12]
 8005af0:	6832      	ldr	r2, [r6, #0]
 8005af2:	1a9b      	subs	r3, r3, r2
 8005af4:	42ab      	cmp	r3, r5
 8005af6:	dc26      	bgt.n	8005b46 <_printf_common+0x96>
 8005af8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005afc:	1e13      	subs	r3, r2, #0
 8005afe:	6822      	ldr	r2, [r4, #0]
 8005b00:	bf18      	it	ne
 8005b02:	2301      	movne	r3, #1
 8005b04:	0692      	lsls	r2, r2, #26
 8005b06:	d42b      	bmi.n	8005b60 <_printf_common+0xb0>
 8005b08:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005b0c:	4649      	mov	r1, r9
 8005b0e:	4638      	mov	r0, r7
 8005b10:	47c0      	blx	r8
 8005b12:	3001      	adds	r0, #1
 8005b14:	d01e      	beq.n	8005b54 <_printf_common+0xa4>
 8005b16:	6823      	ldr	r3, [r4, #0]
 8005b18:	6922      	ldr	r2, [r4, #16]
 8005b1a:	f003 0306 	and.w	r3, r3, #6
 8005b1e:	2b04      	cmp	r3, #4
 8005b20:	bf02      	ittt	eq
 8005b22:	68e5      	ldreq	r5, [r4, #12]
 8005b24:	6833      	ldreq	r3, [r6, #0]
 8005b26:	1aed      	subeq	r5, r5, r3
 8005b28:	68a3      	ldr	r3, [r4, #8]
 8005b2a:	bf0c      	ite	eq
 8005b2c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005b30:	2500      	movne	r5, #0
 8005b32:	4293      	cmp	r3, r2
 8005b34:	bfc4      	itt	gt
 8005b36:	1a9b      	subgt	r3, r3, r2
 8005b38:	18ed      	addgt	r5, r5, r3
 8005b3a:	2600      	movs	r6, #0
 8005b3c:	341a      	adds	r4, #26
 8005b3e:	42b5      	cmp	r5, r6
 8005b40:	d11a      	bne.n	8005b78 <_printf_common+0xc8>
 8005b42:	2000      	movs	r0, #0
 8005b44:	e008      	b.n	8005b58 <_printf_common+0xa8>
 8005b46:	2301      	movs	r3, #1
 8005b48:	4652      	mov	r2, sl
 8005b4a:	4649      	mov	r1, r9
 8005b4c:	4638      	mov	r0, r7
 8005b4e:	47c0      	blx	r8
 8005b50:	3001      	adds	r0, #1
 8005b52:	d103      	bne.n	8005b5c <_printf_common+0xac>
 8005b54:	f04f 30ff 	mov.w	r0, #4294967295
 8005b58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b5c:	3501      	adds	r5, #1
 8005b5e:	e7c6      	b.n	8005aee <_printf_common+0x3e>
 8005b60:	18e1      	adds	r1, r4, r3
 8005b62:	1c5a      	adds	r2, r3, #1
 8005b64:	2030      	movs	r0, #48	; 0x30
 8005b66:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005b6a:	4422      	add	r2, r4
 8005b6c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005b70:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005b74:	3302      	adds	r3, #2
 8005b76:	e7c7      	b.n	8005b08 <_printf_common+0x58>
 8005b78:	2301      	movs	r3, #1
 8005b7a:	4622      	mov	r2, r4
 8005b7c:	4649      	mov	r1, r9
 8005b7e:	4638      	mov	r0, r7
 8005b80:	47c0      	blx	r8
 8005b82:	3001      	adds	r0, #1
 8005b84:	d0e6      	beq.n	8005b54 <_printf_common+0xa4>
 8005b86:	3601      	adds	r6, #1
 8005b88:	e7d9      	b.n	8005b3e <_printf_common+0x8e>
	...

08005b8c <_printf_i>:
 8005b8c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005b90:	7e0f      	ldrb	r7, [r1, #24]
 8005b92:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005b94:	2f78      	cmp	r7, #120	; 0x78
 8005b96:	4691      	mov	r9, r2
 8005b98:	4680      	mov	r8, r0
 8005b9a:	460c      	mov	r4, r1
 8005b9c:	469a      	mov	sl, r3
 8005b9e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005ba2:	d807      	bhi.n	8005bb4 <_printf_i+0x28>
 8005ba4:	2f62      	cmp	r7, #98	; 0x62
 8005ba6:	d80a      	bhi.n	8005bbe <_printf_i+0x32>
 8005ba8:	2f00      	cmp	r7, #0
 8005baa:	f000 80d4 	beq.w	8005d56 <_printf_i+0x1ca>
 8005bae:	2f58      	cmp	r7, #88	; 0x58
 8005bb0:	f000 80c0 	beq.w	8005d34 <_printf_i+0x1a8>
 8005bb4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005bb8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005bbc:	e03a      	b.n	8005c34 <_printf_i+0xa8>
 8005bbe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005bc2:	2b15      	cmp	r3, #21
 8005bc4:	d8f6      	bhi.n	8005bb4 <_printf_i+0x28>
 8005bc6:	a101      	add	r1, pc, #4	; (adr r1, 8005bcc <_printf_i+0x40>)
 8005bc8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005bcc:	08005c25 	.word	0x08005c25
 8005bd0:	08005c39 	.word	0x08005c39
 8005bd4:	08005bb5 	.word	0x08005bb5
 8005bd8:	08005bb5 	.word	0x08005bb5
 8005bdc:	08005bb5 	.word	0x08005bb5
 8005be0:	08005bb5 	.word	0x08005bb5
 8005be4:	08005c39 	.word	0x08005c39
 8005be8:	08005bb5 	.word	0x08005bb5
 8005bec:	08005bb5 	.word	0x08005bb5
 8005bf0:	08005bb5 	.word	0x08005bb5
 8005bf4:	08005bb5 	.word	0x08005bb5
 8005bf8:	08005d3d 	.word	0x08005d3d
 8005bfc:	08005c65 	.word	0x08005c65
 8005c00:	08005cf7 	.word	0x08005cf7
 8005c04:	08005bb5 	.word	0x08005bb5
 8005c08:	08005bb5 	.word	0x08005bb5
 8005c0c:	08005d5f 	.word	0x08005d5f
 8005c10:	08005bb5 	.word	0x08005bb5
 8005c14:	08005c65 	.word	0x08005c65
 8005c18:	08005bb5 	.word	0x08005bb5
 8005c1c:	08005bb5 	.word	0x08005bb5
 8005c20:	08005cff 	.word	0x08005cff
 8005c24:	682b      	ldr	r3, [r5, #0]
 8005c26:	1d1a      	adds	r2, r3, #4
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	602a      	str	r2, [r5, #0]
 8005c2c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005c30:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005c34:	2301      	movs	r3, #1
 8005c36:	e09f      	b.n	8005d78 <_printf_i+0x1ec>
 8005c38:	6820      	ldr	r0, [r4, #0]
 8005c3a:	682b      	ldr	r3, [r5, #0]
 8005c3c:	0607      	lsls	r7, r0, #24
 8005c3e:	f103 0104 	add.w	r1, r3, #4
 8005c42:	6029      	str	r1, [r5, #0]
 8005c44:	d501      	bpl.n	8005c4a <_printf_i+0xbe>
 8005c46:	681e      	ldr	r6, [r3, #0]
 8005c48:	e003      	b.n	8005c52 <_printf_i+0xc6>
 8005c4a:	0646      	lsls	r6, r0, #25
 8005c4c:	d5fb      	bpl.n	8005c46 <_printf_i+0xba>
 8005c4e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005c52:	2e00      	cmp	r6, #0
 8005c54:	da03      	bge.n	8005c5e <_printf_i+0xd2>
 8005c56:	232d      	movs	r3, #45	; 0x2d
 8005c58:	4276      	negs	r6, r6
 8005c5a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005c5e:	485a      	ldr	r0, [pc, #360]	; (8005dc8 <_printf_i+0x23c>)
 8005c60:	230a      	movs	r3, #10
 8005c62:	e012      	b.n	8005c8a <_printf_i+0xfe>
 8005c64:	682b      	ldr	r3, [r5, #0]
 8005c66:	6820      	ldr	r0, [r4, #0]
 8005c68:	1d19      	adds	r1, r3, #4
 8005c6a:	6029      	str	r1, [r5, #0]
 8005c6c:	0605      	lsls	r5, r0, #24
 8005c6e:	d501      	bpl.n	8005c74 <_printf_i+0xe8>
 8005c70:	681e      	ldr	r6, [r3, #0]
 8005c72:	e002      	b.n	8005c7a <_printf_i+0xee>
 8005c74:	0641      	lsls	r1, r0, #25
 8005c76:	d5fb      	bpl.n	8005c70 <_printf_i+0xe4>
 8005c78:	881e      	ldrh	r6, [r3, #0]
 8005c7a:	4853      	ldr	r0, [pc, #332]	; (8005dc8 <_printf_i+0x23c>)
 8005c7c:	2f6f      	cmp	r7, #111	; 0x6f
 8005c7e:	bf0c      	ite	eq
 8005c80:	2308      	moveq	r3, #8
 8005c82:	230a      	movne	r3, #10
 8005c84:	2100      	movs	r1, #0
 8005c86:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005c8a:	6865      	ldr	r5, [r4, #4]
 8005c8c:	60a5      	str	r5, [r4, #8]
 8005c8e:	2d00      	cmp	r5, #0
 8005c90:	bfa2      	ittt	ge
 8005c92:	6821      	ldrge	r1, [r4, #0]
 8005c94:	f021 0104 	bicge.w	r1, r1, #4
 8005c98:	6021      	strge	r1, [r4, #0]
 8005c9a:	b90e      	cbnz	r6, 8005ca0 <_printf_i+0x114>
 8005c9c:	2d00      	cmp	r5, #0
 8005c9e:	d04b      	beq.n	8005d38 <_printf_i+0x1ac>
 8005ca0:	4615      	mov	r5, r2
 8005ca2:	fbb6 f1f3 	udiv	r1, r6, r3
 8005ca6:	fb03 6711 	mls	r7, r3, r1, r6
 8005caa:	5dc7      	ldrb	r7, [r0, r7]
 8005cac:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005cb0:	4637      	mov	r7, r6
 8005cb2:	42bb      	cmp	r3, r7
 8005cb4:	460e      	mov	r6, r1
 8005cb6:	d9f4      	bls.n	8005ca2 <_printf_i+0x116>
 8005cb8:	2b08      	cmp	r3, #8
 8005cba:	d10b      	bne.n	8005cd4 <_printf_i+0x148>
 8005cbc:	6823      	ldr	r3, [r4, #0]
 8005cbe:	07de      	lsls	r6, r3, #31
 8005cc0:	d508      	bpl.n	8005cd4 <_printf_i+0x148>
 8005cc2:	6923      	ldr	r3, [r4, #16]
 8005cc4:	6861      	ldr	r1, [r4, #4]
 8005cc6:	4299      	cmp	r1, r3
 8005cc8:	bfde      	ittt	le
 8005cca:	2330      	movle	r3, #48	; 0x30
 8005ccc:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005cd0:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005cd4:	1b52      	subs	r2, r2, r5
 8005cd6:	6122      	str	r2, [r4, #16]
 8005cd8:	f8cd a000 	str.w	sl, [sp]
 8005cdc:	464b      	mov	r3, r9
 8005cde:	aa03      	add	r2, sp, #12
 8005ce0:	4621      	mov	r1, r4
 8005ce2:	4640      	mov	r0, r8
 8005ce4:	f7ff fee4 	bl	8005ab0 <_printf_common>
 8005ce8:	3001      	adds	r0, #1
 8005cea:	d14a      	bne.n	8005d82 <_printf_i+0x1f6>
 8005cec:	f04f 30ff 	mov.w	r0, #4294967295
 8005cf0:	b004      	add	sp, #16
 8005cf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005cf6:	6823      	ldr	r3, [r4, #0]
 8005cf8:	f043 0320 	orr.w	r3, r3, #32
 8005cfc:	6023      	str	r3, [r4, #0]
 8005cfe:	4833      	ldr	r0, [pc, #204]	; (8005dcc <_printf_i+0x240>)
 8005d00:	2778      	movs	r7, #120	; 0x78
 8005d02:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005d06:	6823      	ldr	r3, [r4, #0]
 8005d08:	6829      	ldr	r1, [r5, #0]
 8005d0a:	061f      	lsls	r7, r3, #24
 8005d0c:	f851 6b04 	ldr.w	r6, [r1], #4
 8005d10:	d402      	bmi.n	8005d18 <_printf_i+0x18c>
 8005d12:	065f      	lsls	r7, r3, #25
 8005d14:	bf48      	it	mi
 8005d16:	b2b6      	uxthmi	r6, r6
 8005d18:	07df      	lsls	r7, r3, #31
 8005d1a:	bf48      	it	mi
 8005d1c:	f043 0320 	orrmi.w	r3, r3, #32
 8005d20:	6029      	str	r1, [r5, #0]
 8005d22:	bf48      	it	mi
 8005d24:	6023      	strmi	r3, [r4, #0]
 8005d26:	b91e      	cbnz	r6, 8005d30 <_printf_i+0x1a4>
 8005d28:	6823      	ldr	r3, [r4, #0]
 8005d2a:	f023 0320 	bic.w	r3, r3, #32
 8005d2e:	6023      	str	r3, [r4, #0]
 8005d30:	2310      	movs	r3, #16
 8005d32:	e7a7      	b.n	8005c84 <_printf_i+0xf8>
 8005d34:	4824      	ldr	r0, [pc, #144]	; (8005dc8 <_printf_i+0x23c>)
 8005d36:	e7e4      	b.n	8005d02 <_printf_i+0x176>
 8005d38:	4615      	mov	r5, r2
 8005d3a:	e7bd      	b.n	8005cb8 <_printf_i+0x12c>
 8005d3c:	682b      	ldr	r3, [r5, #0]
 8005d3e:	6826      	ldr	r6, [r4, #0]
 8005d40:	6961      	ldr	r1, [r4, #20]
 8005d42:	1d18      	adds	r0, r3, #4
 8005d44:	6028      	str	r0, [r5, #0]
 8005d46:	0635      	lsls	r5, r6, #24
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	d501      	bpl.n	8005d50 <_printf_i+0x1c4>
 8005d4c:	6019      	str	r1, [r3, #0]
 8005d4e:	e002      	b.n	8005d56 <_printf_i+0x1ca>
 8005d50:	0670      	lsls	r0, r6, #25
 8005d52:	d5fb      	bpl.n	8005d4c <_printf_i+0x1c0>
 8005d54:	8019      	strh	r1, [r3, #0]
 8005d56:	2300      	movs	r3, #0
 8005d58:	6123      	str	r3, [r4, #16]
 8005d5a:	4615      	mov	r5, r2
 8005d5c:	e7bc      	b.n	8005cd8 <_printf_i+0x14c>
 8005d5e:	682b      	ldr	r3, [r5, #0]
 8005d60:	1d1a      	adds	r2, r3, #4
 8005d62:	602a      	str	r2, [r5, #0]
 8005d64:	681d      	ldr	r5, [r3, #0]
 8005d66:	6862      	ldr	r2, [r4, #4]
 8005d68:	2100      	movs	r1, #0
 8005d6a:	4628      	mov	r0, r5
 8005d6c:	f7fa fa38 	bl	80001e0 <memchr>
 8005d70:	b108      	cbz	r0, 8005d76 <_printf_i+0x1ea>
 8005d72:	1b40      	subs	r0, r0, r5
 8005d74:	6060      	str	r0, [r4, #4]
 8005d76:	6863      	ldr	r3, [r4, #4]
 8005d78:	6123      	str	r3, [r4, #16]
 8005d7a:	2300      	movs	r3, #0
 8005d7c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005d80:	e7aa      	b.n	8005cd8 <_printf_i+0x14c>
 8005d82:	6923      	ldr	r3, [r4, #16]
 8005d84:	462a      	mov	r2, r5
 8005d86:	4649      	mov	r1, r9
 8005d88:	4640      	mov	r0, r8
 8005d8a:	47d0      	blx	sl
 8005d8c:	3001      	adds	r0, #1
 8005d8e:	d0ad      	beq.n	8005cec <_printf_i+0x160>
 8005d90:	6823      	ldr	r3, [r4, #0]
 8005d92:	079b      	lsls	r3, r3, #30
 8005d94:	d413      	bmi.n	8005dbe <_printf_i+0x232>
 8005d96:	68e0      	ldr	r0, [r4, #12]
 8005d98:	9b03      	ldr	r3, [sp, #12]
 8005d9a:	4298      	cmp	r0, r3
 8005d9c:	bfb8      	it	lt
 8005d9e:	4618      	movlt	r0, r3
 8005da0:	e7a6      	b.n	8005cf0 <_printf_i+0x164>
 8005da2:	2301      	movs	r3, #1
 8005da4:	4632      	mov	r2, r6
 8005da6:	4649      	mov	r1, r9
 8005da8:	4640      	mov	r0, r8
 8005daa:	47d0      	blx	sl
 8005dac:	3001      	adds	r0, #1
 8005dae:	d09d      	beq.n	8005cec <_printf_i+0x160>
 8005db0:	3501      	adds	r5, #1
 8005db2:	68e3      	ldr	r3, [r4, #12]
 8005db4:	9903      	ldr	r1, [sp, #12]
 8005db6:	1a5b      	subs	r3, r3, r1
 8005db8:	42ab      	cmp	r3, r5
 8005dba:	dcf2      	bgt.n	8005da2 <_printf_i+0x216>
 8005dbc:	e7eb      	b.n	8005d96 <_printf_i+0x20a>
 8005dbe:	2500      	movs	r5, #0
 8005dc0:	f104 0619 	add.w	r6, r4, #25
 8005dc4:	e7f5      	b.n	8005db2 <_printf_i+0x226>
 8005dc6:	bf00      	nop
 8005dc8:	08006fb6 	.word	0x08006fb6
 8005dcc:	08006fc7 	.word	0x08006fc7

08005dd0 <memmove>:
 8005dd0:	4288      	cmp	r0, r1
 8005dd2:	b510      	push	{r4, lr}
 8005dd4:	eb01 0402 	add.w	r4, r1, r2
 8005dd8:	d902      	bls.n	8005de0 <memmove+0x10>
 8005dda:	4284      	cmp	r4, r0
 8005ddc:	4623      	mov	r3, r4
 8005dde:	d807      	bhi.n	8005df0 <memmove+0x20>
 8005de0:	1e43      	subs	r3, r0, #1
 8005de2:	42a1      	cmp	r1, r4
 8005de4:	d008      	beq.n	8005df8 <memmove+0x28>
 8005de6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005dea:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005dee:	e7f8      	b.n	8005de2 <memmove+0x12>
 8005df0:	4402      	add	r2, r0
 8005df2:	4601      	mov	r1, r0
 8005df4:	428a      	cmp	r2, r1
 8005df6:	d100      	bne.n	8005dfa <memmove+0x2a>
 8005df8:	bd10      	pop	{r4, pc}
 8005dfa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005dfe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005e02:	e7f7      	b.n	8005df4 <memmove+0x24>

08005e04 <_sbrk_r>:
 8005e04:	b538      	push	{r3, r4, r5, lr}
 8005e06:	4d06      	ldr	r5, [pc, #24]	; (8005e20 <_sbrk_r+0x1c>)
 8005e08:	2300      	movs	r3, #0
 8005e0a:	4604      	mov	r4, r0
 8005e0c:	4608      	mov	r0, r1
 8005e0e:	602b      	str	r3, [r5, #0]
 8005e10:	f7fb ff32 	bl	8001c78 <_sbrk>
 8005e14:	1c43      	adds	r3, r0, #1
 8005e16:	d102      	bne.n	8005e1e <_sbrk_r+0x1a>
 8005e18:	682b      	ldr	r3, [r5, #0]
 8005e1a:	b103      	cbz	r3, 8005e1e <_sbrk_r+0x1a>
 8005e1c:	6023      	str	r3, [r4, #0]
 8005e1e:	bd38      	pop	{r3, r4, r5, pc}
 8005e20:	200014c4 	.word	0x200014c4

08005e24 <memcpy>:
 8005e24:	440a      	add	r2, r1
 8005e26:	4291      	cmp	r1, r2
 8005e28:	f100 33ff 	add.w	r3, r0, #4294967295
 8005e2c:	d100      	bne.n	8005e30 <memcpy+0xc>
 8005e2e:	4770      	bx	lr
 8005e30:	b510      	push	{r4, lr}
 8005e32:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005e36:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005e3a:	4291      	cmp	r1, r2
 8005e3c:	d1f9      	bne.n	8005e32 <memcpy+0xe>
 8005e3e:	bd10      	pop	{r4, pc}

08005e40 <_realloc_r>:
 8005e40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e44:	4680      	mov	r8, r0
 8005e46:	4614      	mov	r4, r2
 8005e48:	460e      	mov	r6, r1
 8005e4a:	b921      	cbnz	r1, 8005e56 <_realloc_r+0x16>
 8005e4c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005e50:	4611      	mov	r1, r2
 8005e52:	f7ff bc49 	b.w	80056e8 <_malloc_r>
 8005e56:	b92a      	cbnz	r2, 8005e64 <_realloc_r+0x24>
 8005e58:	f7ff fbda 	bl	8005610 <_free_r>
 8005e5c:	4625      	mov	r5, r4
 8005e5e:	4628      	mov	r0, r5
 8005e60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005e64:	f000 f81b 	bl	8005e9e <_malloc_usable_size_r>
 8005e68:	4284      	cmp	r4, r0
 8005e6a:	4607      	mov	r7, r0
 8005e6c:	d802      	bhi.n	8005e74 <_realloc_r+0x34>
 8005e6e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005e72:	d812      	bhi.n	8005e9a <_realloc_r+0x5a>
 8005e74:	4621      	mov	r1, r4
 8005e76:	4640      	mov	r0, r8
 8005e78:	f7ff fc36 	bl	80056e8 <_malloc_r>
 8005e7c:	4605      	mov	r5, r0
 8005e7e:	2800      	cmp	r0, #0
 8005e80:	d0ed      	beq.n	8005e5e <_realloc_r+0x1e>
 8005e82:	42bc      	cmp	r4, r7
 8005e84:	4622      	mov	r2, r4
 8005e86:	4631      	mov	r1, r6
 8005e88:	bf28      	it	cs
 8005e8a:	463a      	movcs	r2, r7
 8005e8c:	f7ff ffca 	bl	8005e24 <memcpy>
 8005e90:	4631      	mov	r1, r6
 8005e92:	4640      	mov	r0, r8
 8005e94:	f7ff fbbc 	bl	8005610 <_free_r>
 8005e98:	e7e1      	b.n	8005e5e <_realloc_r+0x1e>
 8005e9a:	4635      	mov	r5, r6
 8005e9c:	e7df      	b.n	8005e5e <_realloc_r+0x1e>

08005e9e <_malloc_usable_size_r>:
 8005e9e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005ea2:	1f18      	subs	r0, r3, #4
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	bfbc      	itt	lt
 8005ea8:	580b      	ldrlt	r3, [r1, r0]
 8005eaa:	18c0      	addlt	r0, r0, r3
 8005eac:	4770      	bx	lr
	...

08005eb0 <_init>:
 8005eb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005eb2:	bf00      	nop
 8005eb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005eb6:	bc08      	pop	{r3}
 8005eb8:	469e      	mov	lr, r3
 8005eba:	4770      	bx	lr

08005ebc <_fini>:
 8005ebc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ebe:	bf00      	nop
 8005ec0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ec2:	bc08      	pop	{r3}
 8005ec4:	469e      	mov	lr, r3
 8005ec6:	4770      	bx	lr
