
GPIO_1603.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000444  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080005d8  080005e0  000105e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080005d8  080005d8  000105e0  2**0
                  CONTENTS
  4 .ARM          00000000  080005d8  080005d8  000105e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  080005d8  080005e0  000105e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080005d8  080005d8  000105d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080005dc  080005dc  000105dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000105e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  080005e0  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  080005e0  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000105e0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00010610  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001691  00000000  00000000  00010653  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000584  00000000  00000000  00011ce4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000290  00000000  00000000  00012268  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000001db  00000000  00000000  000124f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000162d  00000000  00000000  000126d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00038be1  00000000  00000000  00013d00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_frame  00000ac8  00000000  00000000  0004c8e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  0000a685  00000000  00000000  0004d3ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000047  00000000  00000000  00057a31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080005c0 	.word	0x080005c0

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	080005c0 	.word	0x080005c0

080001d4 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 80001d4:	b480      	push	{r7}
 80001d6:	b087      	sub	sp, #28
 80001d8:	af00      	add	r7, sp, #0
 80001da:	6078      	str	r0, [r7, #4]
 80001dc:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 80001de:	2300      	movs	r3, #0
 80001e0:	617b      	str	r3, [r7, #20]
 80001e2:	2300      	movs	r3, #0
 80001e4:	613b      	str	r3, [r7, #16]
 80001e6:	2300      	movs	r3, #0
 80001e8:	60fb      	str	r3, [r7, #12]

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80001ea:	2300      	movs	r3, #0
 80001ec:	617b      	str	r3, [r7, #20]
 80001ee:	e076      	b.n	80002de <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 80001f0:	2201      	movs	r2, #1
 80001f2:	697b      	ldr	r3, [r7, #20]
 80001f4:	fa02 f303 	lsl.w	r3, r2, r3
 80001f8:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 80001fa:	683b      	ldr	r3, [r7, #0]
 80001fc:	681b      	ldr	r3, [r3, #0]
 80001fe:	693a      	ldr	r2, [r7, #16]
 8000200:	4013      	ands	r3, r2
 8000202:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 8000204:	68fa      	ldr	r2, [r7, #12]
 8000206:	693b      	ldr	r3, [r7, #16]
 8000208:	429a      	cmp	r2, r3
 800020a:	d165      	bne.n	80002d8 <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 800020c:	687b      	ldr	r3, [r7, #4]
 800020e:	681a      	ldr	r2, [r3, #0]
 8000210:	697b      	ldr	r3, [r7, #20]
 8000212:	005b      	lsls	r3, r3, #1
 8000214:	2103      	movs	r1, #3
 8000216:	fa01 f303 	lsl.w	r3, r1, r3
 800021a:	43db      	mvns	r3, r3
 800021c:	401a      	ands	r2, r3
 800021e:	687b      	ldr	r3, [r7, #4]
 8000220:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8000222:	687b      	ldr	r3, [r7, #4]
 8000224:	681a      	ldr	r2, [r3, #0]
 8000226:	683b      	ldr	r3, [r7, #0]
 8000228:	791b      	ldrb	r3, [r3, #4]
 800022a:	4619      	mov	r1, r3
 800022c:	697b      	ldr	r3, [r7, #20]
 800022e:	005b      	lsls	r3, r3, #1
 8000230:	fa01 f303 	lsl.w	r3, r1, r3
 8000234:	431a      	orrs	r2, r3
 8000236:	687b      	ldr	r3, [r7, #4]
 8000238:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 800023a:	683b      	ldr	r3, [r7, #0]
 800023c:	791b      	ldrb	r3, [r3, #4]
 800023e:	2b01      	cmp	r3, #1
 8000240:	d003      	beq.n	800024a <GPIO_Init+0x76>
 8000242:	683b      	ldr	r3, [r7, #0]
 8000244:	791b      	ldrb	r3, [r3, #4]
 8000246:	2b02      	cmp	r3, #2
 8000248:	d12e      	bne.n	80002a8 <GPIO_Init+0xd4>
      {
        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 800024a:	687b      	ldr	r3, [r7, #4]
 800024c:	689a      	ldr	r2, [r3, #8]
 800024e:	697b      	ldr	r3, [r7, #20]
 8000250:	005b      	lsls	r3, r3, #1
 8000252:	2103      	movs	r1, #3
 8000254:	fa01 f303 	lsl.w	r3, r1, r3
 8000258:	43db      	mvns	r3, r3
 800025a:	401a      	ands	r2, r3
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8000260:	687b      	ldr	r3, [r7, #4]
 8000262:	689a      	ldr	r2, [r3, #8]
 8000264:	683b      	ldr	r3, [r7, #0]
 8000266:	795b      	ldrb	r3, [r3, #5]
 8000268:	4619      	mov	r1, r3
 800026a:	697b      	ldr	r3, [r7, #20]
 800026c:	005b      	lsls	r3, r3, #1
 800026e:	fa01 f303 	lsl.w	r3, r1, r3
 8000272:	431a      	orrs	r2, r3
 8000274:	687b      	ldr	r3, [r7, #4]
 8000276:	609a      	str	r2, [r3, #8]

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8000278:	687b      	ldr	r3, [r7, #4]
 800027a:	685a      	ldr	r2, [r3, #4]
 800027c:	697b      	ldr	r3, [r7, #20]
 800027e:	b29b      	uxth	r3, r3
 8000280:	4619      	mov	r1, r3
 8000282:	2301      	movs	r3, #1
 8000284:	408b      	lsls	r3, r1
 8000286:	43db      	mvns	r3, r3
 8000288:	401a      	ands	r2, r3
 800028a:	687b      	ldr	r3, [r7, #4]
 800028c:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 800028e:	687b      	ldr	r3, [r7, #4]
 8000290:	685b      	ldr	r3, [r3, #4]
 8000292:	683a      	ldr	r2, [r7, #0]
 8000294:	7992      	ldrb	r2, [r2, #6]
 8000296:	4611      	mov	r1, r2
 8000298:	697a      	ldr	r2, [r7, #20]
 800029a:	b292      	uxth	r2, r2
 800029c:	fa01 f202 	lsl.w	r2, r1, r2
 80002a0:	b292      	uxth	r2, r2
 80002a2:	431a      	orrs	r2, r3
 80002a4:	687b      	ldr	r3, [r7, #4]
 80002a6:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 80002a8:	687b      	ldr	r3, [r7, #4]
 80002aa:	68da      	ldr	r2, [r3, #12]
 80002ac:	697b      	ldr	r3, [r7, #20]
 80002ae:	b29b      	uxth	r3, r3
 80002b0:	005b      	lsls	r3, r3, #1
 80002b2:	2103      	movs	r1, #3
 80002b4:	fa01 f303 	lsl.w	r3, r1, r3
 80002b8:	43db      	mvns	r3, r3
 80002ba:	401a      	ands	r2, r3
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 80002c0:	687b      	ldr	r3, [r7, #4]
 80002c2:	68da      	ldr	r2, [r3, #12]
 80002c4:	683b      	ldr	r3, [r7, #0]
 80002c6:	79db      	ldrb	r3, [r3, #7]
 80002c8:	4619      	mov	r1, r3
 80002ca:	697b      	ldr	r3, [r7, #20]
 80002cc:	005b      	lsls	r3, r3, #1
 80002ce:	fa01 f303 	lsl.w	r3, r1, r3
 80002d2:	431a      	orrs	r2, r3
 80002d4:	687b      	ldr	r3, [r7, #4]
 80002d6:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80002d8:	697b      	ldr	r3, [r7, #20]
 80002da:	3301      	adds	r3, #1
 80002dc:	617b      	str	r3, [r7, #20]
 80002de:	697b      	ldr	r3, [r7, #20]
 80002e0:	2b0f      	cmp	r3, #15
 80002e2:	d985      	bls.n	80001f0 <GPIO_Init+0x1c>
    }
  }
}
 80002e4:	bf00      	nop
 80002e6:	bf00      	nop
 80002e8:	371c      	adds	r7, #28
 80002ea:	46bd      	mov	sp, r7
 80002ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f0:	4770      	bx	lr
	...

080002f4 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 80002f4:	b480      	push	{r7}
 80002f6:	b083      	sub	sp, #12
 80002f8:	af00      	add	r7, sp, #0
 80002fa:	6078      	str	r0, [r7, #4]
 80002fc:	460b      	mov	r3, r1
 80002fe:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000300:	78fb      	ldrb	r3, [r7, #3]
 8000302:	2b00      	cmp	r3, #0
 8000304:	d006      	beq.n	8000314 <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 8000306:	4b0a      	ldr	r3, [pc, #40]	; (8000330 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000308:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800030a:	4909      	ldr	r1, [pc, #36]	; (8000330 <RCC_AHB1PeriphClockCmd+0x3c>)
 800030c:	687b      	ldr	r3, [r7, #4]
 800030e:	4313      	orrs	r3, r2
 8000310:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 8000312:	e006      	b.n	8000322 <RCC_AHB1PeriphClockCmd+0x2e>
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 8000314:	4b06      	ldr	r3, [pc, #24]	; (8000330 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000316:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	43db      	mvns	r3, r3
 800031c:	4904      	ldr	r1, [pc, #16]	; (8000330 <RCC_AHB1PeriphClockCmd+0x3c>)
 800031e:	4013      	ands	r3, r2
 8000320:	630b      	str	r3, [r1, #48]	; 0x30
}
 8000322:	bf00      	nop
 8000324:	370c      	adds	r7, #12
 8000326:	46bd      	mov	sp, r7
 8000328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800032c:	4770      	bx	lr
 800032e:	bf00      	nop
 8000330:	40023800 	.word	0x40023800

08000334 <Buzzer_Init>:
#define BUZZER_GPIO_PIN			GPIO_Pin_9
#define BUZZER_PIN9				9
#define BUZZERControl_SetClock	RCC_AHB1Periph_GPIOC

static void Buzzer_Init(void)
{
 8000334:	b580      	push	{r7, lr}
 8000336:	b082      	sub	sp, #8
 8000338:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;
	RCC_AHB1PeriphClockCmd(BUZZERControl_SetClock, ENABLE);
 800033a:	2101      	movs	r1, #1
 800033c:	2004      	movs	r0, #4
 800033e:	f7ff ffd9 	bl	80002f4 <RCC_AHB1PeriphClockCmd>
	GPIO_InitStructure.GPIO_Pin = BUZZER_GPIO_PIN;
 8000342:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000346:	603b      	str	r3, [r7, #0]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8000348:	2301      	movs	r3, #1
 800034a:	713b      	strb	r3, [r7, #4]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 800034c:	2302      	movs	r3, #2
 800034e:	717b      	strb	r3, [r7, #5]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8000350:	2300      	movs	r3, #0
 8000352:	71bb      	strb	r3, [r7, #6]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_DOWN;
 8000354:	2302      	movs	r3, #2
 8000356:	71fb      	strb	r3, [r7, #7]
	GPIO_Init(BUZZER_GPIO_PORT, &GPIO_InitStructure);
 8000358:	463b      	mov	r3, r7
 800035a:	4619      	mov	r1, r3
 800035c:	4803      	ldr	r0, [pc, #12]	; (800036c <Buzzer_Init+0x38>)
 800035e:	f7ff ff39 	bl	80001d4 <GPIO_Init>
}
 8000362:	bf00      	nop
 8000364:	3708      	adds	r7, #8
 8000366:	46bd      	mov	sp, r7
 8000368:	bd80      	pop	{r7, pc}
 800036a:	bf00      	nop
 800036c:	40020800 	.word	0x40020800

08000370 <Led_Init>:

static void Led_Init(void)
{
 8000370:	b580      	push	{r7, lr}
 8000372:	b082      	sub	sp, #8
 8000374:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;
	RCC_AHB1PeriphClockCmd(LEDControl_SetClock, ENABLE);
 8000376:	2101      	movs	r1, #1
 8000378:	2001      	movs	r0, #1
 800037a:	f7ff ffbb 	bl	80002f4 <RCC_AHB1PeriphClockCmd>
	GPIO_InitStructure.GPIO_Pin = LED_GPIO_PIN;
 800037e:	2301      	movs	r3, #1
 8000380:	603b      	str	r3, [r7, #0]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8000382:	2301      	movs	r3, #1
 8000384:	713b      	strb	r3, [r7, #4]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8000386:	2302      	movs	r3, #2
 8000388:	717b      	strb	r3, [r7, #5]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 800038a:	2300      	movs	r3, #0
 800038c:	71bb      	strb	r3, [r7, #6]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_DOWN;
 800038e:	2302      	movs	r3, #2
 8000390:	71fb      	strb	r3, [r7, #7]
	GPIO_Init(LED_GPIO_PORT, &GPIO_InitStructure);
 8000392:	463b      	mov	r3, r7
 8000394:	4619      	mov	r1, r3
 8000396:	4803      	ldr	r0, [pc, #12]	; (80003a4 <Led_Init+0x34>)
 8000398:	f7ff ff1c 	bl	80001d4 <GPIO_Init>
}
 800039c:	bf00      	nop
 800039e:	3708      	adds	r7, #8
 80003a0:	46bd      	mov	sp, r7
 80003a2:	bd80      	pop	{r7, pc}
 80003a4:	40020000 	.word	0x40020000

080003a8 <Button_Init>:
static void Button_Init(void)
{
 80003a8:	b580      	push	{r7, lr}
 80003aa:	b082      	sub	sp, #8
 80003ac:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;
	RCC_AHB1PeriphClockCmd(BUTTONControl_SetClock, ENABLE);
 80003ae:	2101      	movs	r1, #1
 80003b0:	2002      	movs	r0, #2
 80003b2:	f7ff ff9f 	bl	80002f4 <RCC_AHB1PeriphClockCmd>
	GPIO_InitStructure.GPIO_Pin = BUTTON_GPIO_PIN;
 80003b6:	2308      	movs	r3, #8
 80003b8:	603b      	str	r3, [r7, #0]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
 80003ba:	2300      	movs	r3, #0
 80003bc:	713b      	strb	r3, [r7, #4]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80003be:	2302      	movs	r3, #2
 80003c0:	717b      	strb	r3, [r7, #5]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 80003c2:	2301      	movs	r3, #1
 80003c4:	71fb      	strb	r3, [r7, #7]
	GPIO_Init(BUTTON_GPIO_PORT, &GPIO_InitStructure);
 80003c6:	463b      	mov	r3, r7
 80003c8:	4619      	mov	r1, r3
 80003ca:	4803      	ldr	r0, [pc, #12]	; (80003d8 <Button_Init+0x30>)
 80003cc:	f7ff ff02 	bl	80001d4 <GPIO_Init>
}
 80003d0:	bf00      	nop
 80003d2:	3708      	adds	r7, #8
 80003d4:	46bd      	mov	sp, r7
 80003d6:	bd80      	pop	{r7, pc}
 80003d8:	40020400 	.word	0x40020400

080003dc <LedControl_SetStatus>:
static void LedControl_SetStatus(GPIO_TypeDef *GPIOx, uint8_t GPIO_PIN, uint8_t Status)
{
 80003dc:	b480      	push	{r7}
 80003de:	b083      	sub	sp, #12
 80003e0:	af00      	add	r7, sp, #0
 80003e2:	6078      	str	r0, [r7, #4]
 80003e4:	460b      	mov	r3, r1
 80003e6:	70fb      	strb	r3, [r7, #3]
 80003e8:	4613      	mov	r3, r2
 80003ea:	70bb      	strb	r3, [r7, #2]
	if (Status == GPIO_PIN_SET)
 80003ec:	78bb      	ldrb	r3, [r7, #2]
 80003ee:	2b01      	cmp	r3, #1
 80003f0:	d10d      	bne.n	800040e <LedControl_SetStatus+0x32>
	{
		GPIOx-> BSRRL |=1 << GPIO_PIN;
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	8b1b      	ldrh	r3, [r3, #24]
 80003f6:	b29b      	uxth	r3, r3
 80003f8:	b21a      	sxth	r2, r3
 80003fa:	78fb      	ldrb	r3, [r7, #3]
 80003fc:	2101      	movs	r1, #1
 80003fe:	fa01 f303 	lsl.w	r3, r1, r3
 8000402:	b21b      	sxth	r3, r3
 8000404:	4313      	orrs	r3, r2
 8000406:	b21b      	sxth	r3, r3
 8000408:	b29a      	uxth	r2, r3
 800040a:	687b      	ldr	r3, [r7, #4]
 800040c:	831a      	strh	r2, [r3, #24]
	}
	if (Status == GPIO_PIN_RESET)
 800040e:	78bb      	ldrb	r3, [r7, #2]
 8000410:	2b00      	cmp	r3, #0
 8000412:	d10d      	bne.n	8000430 <LedControl_SetStatus+0x54>
	{
		GPIOx-> BSRRH|=1 << GPIO_PIN;
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	8b5b      	ldrh	r3, [r3, #26]
 8000418:	b29b      	uxth	r3, r3
 800041a:	b21a      	sxth	r2, r3
 800041c:	78fb      	ldrb	r3, [r7, #3]
 800041e:	2101      	movs	r1, #1
 8000420:	fa01 f303 	lsl.w	r3, r1, r3
 8000424:	b21b      	sxth	r3, r3
 8000426:	4313      	orrs	r3, r2
 8000428:	b21b      	sxth	r3, r3
 800042a:	b29a      	uxth	r2, r3
 800042c:	687b      	ldr	r3, [r7, #4]
 800042e:	835a      	strh	r2, [r3, #26]
	}
}
 8000430:	bf00      	nop
 8000432:	370c      	adds	r7, #12
 8000434:	46bd      	mov	sp, r7
 8000436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800043a:	4770      	bx	lr

0800043c <ButtonRead_Status>:

static uint8_t ButtonRead_Status(GPIO_TypeDef *GPIOx, uint32_t GPIO_PIN)
{
 800043c:	b480      	push	{r7}
 800043e:	b085      	sub	sp, #20
 8000440:	af00      	add	r7, sp, #0
 8000442:	6078      	str	r0, [r7, #4]
 8000444:	6039      	str	r1, [r7, #0]
	uint32_t Read_Pin;

	Read_Pin = (GPIOx->IDR) >> GPIO_PIN;
 8000446:	687b      	ldr	r3, [r7, #4]
 8000448:	691a      	ldr	r2, [r3, #16]
 800044a:	683b      	ldr	r3, [r7, #0]
 800044c:	fa22 f303 	lsr.w	r3, r2, r3
 8000450:	60fb      	str	r3, [r7, #12]
	Read_Pin = Read_Pin &0x01;
 8000452:	68fb      	ldr	r3, [r7, #12]
 8000454:	f003 0301 	and.w	r3, r3, #1
 8000458:	60fb      	str	r3, [r7, #12]

	return Read_Pin;
 800045a:	68fb      	ldr	r3, [r7, #12]
 800045c:	b2db      	uxtb	r3, r3
}
 800045e:	4618      	mov	r0, r3
 8000460:	3714      	adds	r7, #20
 8000462:	46bd      	mov	sp, r7
 8000464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000468:	4770      	bx	lr

0800046a <BuzzerControl_SetStatus>:

static void BuzzerControl_SetStatus(GPIO_TypeDef* GPIOx, uint8_t GPIO_PIN, uint8_t Status)
{
 800046a:	b480      	push	{r7}
 800046c:	b083      	sub	sp, #12
 800046e:	af00      	add	r7, sp, #0
 8000470:	6078      	str	r0, [r7, #4]
 8000472:	460b      	mov	r3, r1
 8000474:	70fb      	strb	r3, [r7, #3]
 8000476:	4613      	mov	r3, r2
 8000478:	70bb      	strb	r3, [r7, #2]
	if (Status == GPIO_PIN_SET)
 800047a:	78bb      	ldrb	r3, [r7, #2]
 800047c:	2b01      	cmp	r3, #1
 800047e:	d10d      	bne.n	800049c <BuzzerControl_SetStatus+0x32>
	{GPIOx->BSRRL |= 1 << GPIO_PIN;
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	8b1b      	ldrh	r3, [r3, #24]
 8000484:	b29b      	uxth	r3, r3
 8000486:	b21a      	sxth	r2, r3
 8000488:	78fb      	ldrb	r3, [r7, #3]
 800048a:	2101      	movs	r1, #1
 800048c:	fa01 f303 	lsl.w	r3, r1, r3
 8000490:	b21b      	sxth	r3, r3
 8000492:	4313      	orrs	r3, r2
 8000494:	b21b      	sxth	r3, r3
 8000496:	b29a      	uxth	r2, r3
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	831a      	strh	r2, [r3, #24]
	}
	if (Status == GPIO_PIN_RESET)
 800049c:	78bb      	ldrb	r3, [r7, #2]
 800049e:	2b00      	cmp	r3, #0
 80004a0:	d10d      	bne.n	80004be <BuzzerControl_SetStatus+0x54>
	{
		GPIOx->BSRRH |= 1 << GPIO_PIN;
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	8b5b      	ldrh	r3, [r3, #26]
 80004a6:	b29b      	uxth	r3, r3
 80004a8:	b21a      	sxth	r2, r3
 80004aa:	78fb      	ldrb	r3, [r7, #3]
 80004ac:	2101      	movs	r1, #1
 80004ae:	fa01 f303 	lsl.w	r3, r1, r3
 80004b2:	b21b      	sxth	r3, r3
 80004b4:	4313      	orrs	r3, r2
 80004b6:	b21b      	sxth	r3, r3
 80004b8:	b29a      	uxth	r2, r3
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	835a      	strh	r2, [r3, #26]
	}
}
 80004be:	bf00      	nop
 80004c0:	370c      	adds	r7, #12
 80004c2:	46bd      	mov	sp, r7
 80004c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c8:	4770      	bx	lr
	...

080004cc <main>:


int main(void){
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
	Led_Init();
 80004d0:	f7ff ff4e 	bl	8000370 <Led_Init>
	Button_Init();
 80004d4:	f7ff ff68 	bl	80003a8 <Button_Init>
	Buzzer_Init();
 80004d8:	f7ff ff2c 	bl	8000334 <Buzzer_Init>
	while (1) {
		while (ButtonRead_Status(BUTTON_GPIO_PORT,  BUTTON_PIN3) == 0)
 80004dc:	e009      	b.n	80004f2 <main+0x26>
		{
			LedControl_SetStatus(LED_GPIO_PORT, LED_PIN, 1);
 80004de:	2201      	movs	r2, #1
 80004e0:	2100      	movs	r1, #0
 80004e2:	480d      	ldr	r0, [pc, #52]	; (8000518 <main+0x4c>)
 80004e4:	f7ff ff7a 	bl	80003dc <LedControl_SetStatus>
			BuzzerControl_SetStatus(BUZZER_GPIO_PORT, BUZZER_PIN9, 1);
 80004e8:	2201      	movs	r2, #1
 80004ea:	2109      	movs	r1, #9
 80004ec:	480b      	ldr	r0, [pc, #44]	; (800051c <main+0x50>)
 80004ee:	f7ff ffbc 	bl	800046a <BuzzerControl_SetStatus>
		while (ButtonRead_Status(BUTTON_GPIO_PORT,  BUTTON_PIN3) == 0)
 80004f2:	2103      	movs	r1, #3
 80004f4:	480a      	ldr	r0, [pc, #40]	; (8000520 <main+0x54>)
 80004f6:	f7ff ffa1 	bl	800043c <ButtonRead_Status>
 80004fa:	4603      	mov	r3, r0
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	d0ee      	beq.n	80004de <main+0x12>
		}
		LedControl_SetStatus(LED_GPIO_PORT, LED_PIN, 0);
 8000500:	2200      	movs	r2, #0
 8000502:	2100      	movs	r1, #0
 8000504:	4804      	ldr	r0, [pc, #16]	; (8000518 <main+0x4c>)
 8000506:	f7ff ff69 	bl	80003dc <LedControl_SetStatus>
		BuzzerControl_SetStatus(BUZZER_GPIO_PORT, BUZZER_PIN9, 0);
 800050a:	2200      	movs	r2, #0
 800050c:	2109      	movs	r1, #9
 800050e:	4803      	ldr	r0, [pc, #12]	; (800051c <main+0x50>)
 8000510:	f7ff ffab 	bl	800046a <BuzzerControl_SetStatus>
		while (ButtonRead_Status(BUTTON_GPIO_PORT,  BUTTON_PIN3) == 0)
 8000514:	e7ed      	b.n	80004f2 <main+0x26>
 8000516:	bf00      	nop
 8000518:	40020000 	.word	0x40020000
 800051c:	40020800 	.word	0x40020800
 8000520:	40020400 	.word	0x40020400

08000524 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000524:	480d      	ldr	r0, [pc, #52]	; (800055c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000526:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000528:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800052c:	480c      	ldr	r0, [pc, #48]	; (8000560 <LoopForever+0x6>)
  ldr r1, =_edata
 800052e:	490d      	ldr	r1, [pc, #52]	; (8000564 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000530:	4a0d      	ldr	r2, [pc, #52]	; (8000568 <LoopForever+0xe>)
  movs r3, #0
 8000532:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000534:	e002      	b.n	800053c <LoopCopyDataInit>

08000536 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000536:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000538:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800053a:	3304      	adds	r3, #4

0800053c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800053c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800053e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000540:	d3f9      	bcc.n	8000536 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000542:	4a0a      	ldr	r2, [pc, #40]	; (800056c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000544:	4c0a      	ldr	r4, [pc, #40]	; (8000570 <LoopForever+0x16>)
  movs r3, #0
 8000546:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000548:	e001      	b.n	800054e <LoopFillZerobss>

0800054a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800054a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800054c:	3204      	adds	r2, #4

0800054e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800054e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000550:	d3fb      	bcc.n	800054a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000552:	f000 f811 	bl	8000578 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000556:	f7ff ffb9 	bl	80004cc <main>

0800055a <LoopForever>:

LoopForever:
  b LoopForever
 800055a:	e7fe      	b.n	800055a <LoopForever>
  ldr   r0, =_estack
 800055c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000560:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000564:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000568:	080005e0 	.word	0x080005e0
  ldr r2, =_sbss
 800056c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000570:	2000001c 	.word	0x2000001c

08000574 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000574:	e7fe      	b.n	8000574 <ADC_IRQHandler>
	...

08000578 <__libc_init_array>:
 8000578:	b570      	push	{r4, r5, r6, lr}
 800057a:	4d0d      	ldr	r5, [pc, #52]	; (80005b0 <__libc_init_array+0x38>)
 800057c:	4c0d      	ldr	r4, [pc, #52]	; (80005b4 <__libc_init_array+0x3c>)
 800057e:	1b64      	subs	r4, r4, r5
 8000580:	10a4      	asrs	r4, r4, #2
 8000582:	2600      	movs	r6, #0
 8000584:	42a6      	cmp	r6, r4
 8000586:	d109      	bne.n	800059c <__libc_init_array+0x24>
 8000588:	4d0b      	ldr	r5, [pc, #44]	; (80005b8 <__libc_init_array+0x40>)
 800058a:	4c0c      	ldr	r4, [pc, #48]	; (80005bc <__libc_init_array+0x44>)
 800058c:	f000 f818 	bl	80005c0 <_init>
 8000590:	1b64      	subs	r4, r4, r5
 8000592:	10a4      	asrs	r4, r4, #2
 8000594:	2600      	movs	r6, #0
 8000596:	42a6      	cmp	r6, r4
 8000598:	d105      	bne.n	80005a6 <__libc_init_array+0x2e>
 800059a:	bd70      	pop	{r4, r5, r6, pc}
 800059c:	f855 3b04 	ldr.w	r3, [r5], #4
 80005a0:	4798      	blx	r3
 80005a2:	3601      	adds	r6, #1
 80005a4:	e7ee      	b.n	8000584 <__libc_init_array+0xc>
 80005a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80005aa:	4798      	blx	r3
 80005ac:	3601      	adds	r6, #1
 80005ae:	e7f2      	b.n	8000596 <__libc_init_array+0x1e>
 80005b0:	080005d8 	.word	0x080005d8
 80005b4:	080005d8 	.word	0x080005d8
 80005b8:	080005d8 	.word	0x080005d8
 80005bc:	080005dc 	.word	0x080005dc

080005c0 <_init>:
 80005c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005c2:	bf00      	nop
 80005c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80005c6:	bc08      	pop	{r3}
 80005c8:	469e      	mov	lr, r3
 80005ca:	4770      	bx	lr

080005cc <_fini>:
 80005cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005ce:	bf00      	nop
 80005d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80005d2:	bc08      	pop	{r3}
 80005d4:	469e      	mov	lr, r3
 80005d6:	4770      	bx	lr
